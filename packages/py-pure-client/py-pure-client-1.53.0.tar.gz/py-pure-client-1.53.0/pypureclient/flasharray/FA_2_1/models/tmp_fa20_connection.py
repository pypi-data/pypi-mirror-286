/*
FlashArray REST API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

API version: 2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pypureclient

import (
	"encoding/json"
	"from pypureclient.models.fixed_reference import FixedReference"
	"from pypureclient.models.fixed_reference_no_id import FixedReferenceNoId"
	"from pypureclient.models.reference import Reference"
)

// checks if the TmpFA20Connection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TmpFA20Connection{}

// TmpFA20Connection struct for TmpFA20Connection
type TmpFA20Connection struct {
	// The host computer that sends and receives I/O requests to and from volumes on the FlashArray array.
	host *object `json:"host,omitempty"`
	// A virtual collection of hosts with common connectivity to volumes.
	host_group *object `json:"host_group,omitempty"`
	// The logical unit number (LUN) by which the specified hosts are to address the specified volume. LUN can be in one of two formats: a simple LUN, or a LUN and Sublun with virtual volumes. A LUN and Sublun are integers in the range of 1 to 4095. The first format is simply the LUN number. The second format is a single int64 combining both ((LUN << 32) + Sublun) or (LUN * 4294967296 + Sublun). In the FA UI, a combined LUN and Sublun is represented as \"LUN:Sublun\". Example: LUN = 30, Sublun = 2, LUN:Sublun = 30:2 Combined: (30 * 4294967296 + 2) == 128849018882. In REST it will be returned as 128849018882. To automatically assign a LUN to a private connection, the system starts at LUN '1' and counts up to the maximum LUN '4095', assigning the first available LUN to the connection. For shared connections, the system starts at LUN '254' and counts down to the minimum LUN '1', assigning the first available LUN to the connection. If all LUNs in the '[1...254]' range are taken, the system starts at LUN '255' and counts up to the maximum LUN '4095', assigning the first available LUN to the connection. The maximum int64 LUN:Sublun value is 17587891081215.
	lun *object `json:"lun,omitempty"`
	// A protocol endpoint (also known as a conglomerate volume) which acts as a proxy through which virtual volumes are created and then connected to VMware ESXi hosts or host groups. The protocol endpoint itself does not serve I/Os; instead, its job is to form connections between FlashArray volumes and ESXi hosts and host groups.
	protocol_endpoint *object `json:"protocol_endpoint,omitempty"`
	// A container that manages the storage space on the array.
	volume *object `json:"volume,omitempty"`
}

// NewTmpFA20Connection instantiates a new TmpFA20Connection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTmpFA20Connection() *TmpFA20Connection {
	this := TmpFA20Connection{}
	return &this
}

// NewTmpFA20ConnectionWithDefaults instantiates a new TmpFA20Connection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTmpFA20ConnectionWithDefaults() *TmpFA20Connection {
	this := TmpFA20Connection{}
	return &this
}

// Gethost returns the host field value if set, zero value otherwise.
func (o *TmpFA20Connection) Gethost()  {
	if o == nil || isNil(o.host) {
		var ret 
		return ret
	}
	return *o.host
}

// GethostOk returns a tuple with the host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Connection) GethostOk() (*, bool) {
	if o == nil || isNil(o.host) {
		return nil, false
	}
	return o.host, true
}

// Hashost returns a boolean if a field has been set.
func (o *TmpFA20Connection) Hashost() bool {
	if o != nil && !isNil(o.host) {
		return true
	}

	return false
}

// Sethost gets a reference to the given object and assigns it to the host field.
func (o *TmpFA20Connection) Sethost(v ) {
	o.host = &v
}

// Gethost_group returns the host_group field value if set, zero value otherwise.
func (o *TmpFA20Connection) Gethost_group()  {
	if o == nil || isNil(o.host_group) {
		var ret 
		return ret
	}
	return *o.host_group
}

// Gethost_groupOk returns a tuple with the host_group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Connection) Gethost_groupOk() (*, bool) {
	if o == nil || isNil(o.host_group) {
		return nil, false
	}
	return o.host_group, true
}

// Hashost_group returns a boolean if a field has been set.
func (o *TmpFA20Connection) Hashost_group() bool {
	if o != nil && !isNil(o.host_group) {
		return true
	}

	return false
}

// Sethost_group gets a reference to the given object and assigns it to the host_group field.
func (o *TmpFA20Connection) Sethost_group(v ) {
	o.host_group = &v
}

// Getlun returns the lun field value if set, zero value otherwise.
func (o *TmpFA20Connection) Getlun()  {
	if o == nil || isNil(o.lun) {
		var ret 
		return ret
	}
	return *o.lun
}

// GetlunOk returns a tuple with the lun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Connection) GetlunOk() (*, bool) {
	if o == nil || isNil(o.lun) {
		return nil, false
	}
	return o.lun, true
}

// Haslun returns a boolean if a field has been set.
func (o *TmpFA20Connection) Haslun() bool {
	if o != nil && !isNil(o.lun) {
		return true
	}

	return false
}

// Setlun gets a reference to the given object and assigns it to the lun field.
func (o *TmpFA20Connection) Setlun(v ) {
	o.lun = &v
}

// Getprotocol_endpoint returns the protocol_endpoint field value if set, zero value otherwise.
func (o *TmpFA20Connection) Getprotocol_endpoint()  {
	if o == nil || isNil(o.protocol_endpoint) {
		var ret 
		return ret
	}
	return *o.protocol_endpoint
}

// Getprotocol_endpointOk returns a tuple with the protocol_endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Connection) Getprotocol_endpointOk() (*, bool) {
	if o == nil || isNil(o.protocol_endpoint) {
		return nil, false
	}
	return o.protocol_endpoint, true
}

// Hasprotocol_endpoint returns a boolean if a field has been set.
func (o *TmpFA20Connection) Hasprotocol_endpoint() bool {
	if o != nil && !isNil(o.protocol_endpoint) {
		return true
	}

	return false
}

// Setprotocol_endpoint gets a reference to the given object and assigns it to the protocol_endpoint field.
func (o *TmpFA20Connection) Setprotocol_endpoint(v ) {
	o.protocol_endpoint = &v
}

// Getvolume returns the volume field value if set, zero value otherwise.
func (o *TmpFA20Connection) Getvolume()  {
	if o == nil || isNil(o.volume) {
		var ret 
		return ret
	}
	return *o.volume
}

// GetvolumeOk returns a tuple with the volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Connection) GetvolumeOk() (*, bool) {
	if o == nil || isNil(o.volume) {
		return nil, false
	}
	return o.volume, true
}

// Hasvolume returns a boolean if a field has been set.
func (o *TmpFA20Connection) Hasvolume() bool {
	if o != nil && !isNil(o.volume) {
		return true
	}

	return false
}

// Setvolume gets a reference to the given object and assigns it to the volume field.
func (o *TmpFA20Connection) Setvolume(v ) {
	o.volume = &v
}

func (o TmpFA20Connection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TmpFA20Connection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.host) {
		toSerialize["host"] = o.host
	}
	if !isNil(o.host_group) {
		toSerialize["host_group"] = o.host_group
	}
	if !isNil(o.lun) {
		toSerialize["lun"] = o.lun
	}
	if !isNil(o.protocol_endpoint) {
		toSerialize["protocol_endpoint"] = o.protocol_endpoint
	}
	if !isNil(o.volume) {
		toSerialize["volume"] = o.volume
	}
	return toSerialize, nil
}

type NullableTmpFA20Connection struct {
	value *TmpFA20Connection
	isSet bool
}

func (v NullableTmpFA20Connection) Get() *TmpFA20Connection {
	return v.value
}

func (v *NullableTmpFA20Connection) Set(val *TmpFA20Connection) {
	v.value = val
	v.isSet = true
}

func (v NullableTmpFA20Connection) IsSet() bool {
	return v.isSet
}

func (v *NullableTmpFA20Connection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTmpFA20Connection(val *TmpFA20Connection) *NullableTmpFA20Connection {
	return &NullableTmpFA20Connection{value: val, isSet: true}
}

func (v NullableTmpFA20Connection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTmpFA20Connection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


