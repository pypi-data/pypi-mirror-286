/*
FlashArray REST API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

API version: 2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pypureclient

import (
	"encoding/json"
	"from pypureclient.models.chap import Chap"
	"from pypureclient.models.host_port_connectivity import HostPortConnectivity"
	"from pypureclient.models.reference import Reference"
	"from pypureclient.models.reference_no_id import ReferenceNoId"
	"from pypureclient.models.resource_no_id import ResourceNoId"
	"from pypureclient.models.space import Space"
)

// checks if the TmpFA20Host type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TmpFA20Host{}

// TmpFA20Host struct for TmpFA20Host
type TmpFA20Host struct {
	// A user-specified name. The name must be locally unique and can be changed.
	name * `json:"name,omitempty"`
	chap * `json:"chap,omitempty"`
	// The number of volumes connected to the specified host.
	connection_count * `json:"connection_count,omitempty"`
	// The host group to which the host should be associated.
	host_group * `json:"host_group,omitempty"`
	// The iSCSI qualified name (IQN) associated with the host.
	iqns * `json:"iqns,omitempty"`
	// The NVMe Qualified Name (NQN) associated with the host.
	nqns * `json:"nqns,omitempty"`
	// Determines how the system tunes the array to ensure that it works optimally with the host. Set `personality` to the name of the host operating system or virtual memory system. Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`, `oracle-vm-server`, `solaris`, and `vms`. If your system is not listed as one of the valid host personalities, do not set the option. By default, the personality is not set.
	personality * `json:"personality,omitempty"`
	port_connectivity * `json:"port_connectivity,omitempty"`
	// For synchronous replication configurations, sets a host's preferred array to specify which array exposes active/optimized paths to that host. Enter multiple preferred arrays in comma-separated format. If a preferred array is set for a host, then the other arrays in the same pod will expose active/non-optimized paths to that host. If the host is in a host group, `preferred_arrays` cannot be set because host groups have their own preferred arrays. On a preferred array of a certain host, all the paths on all the ports (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths, while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths.
	preferred_arrays * `json:"preferred_arrays,omitempty"`
	// Displays provisioned size and physical storage consumption information for the sum of all volumes connected to the specified host.
	space * `json:"space,omitempty"`
	// The Fibre Channel World Wide Name (WWN) associated with the host.
	wwns * `json:"wwns,omitempty"`
}

// NewTmpFA20Host instantiates a new TmpFA20Host object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTmpFA20Host() *TmpFA20Host {
	this := TmpFA20Host{}
	return &this
}

// NewTmpFA20HostWithDefaults instantiates a new TmpFA20Host object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTmpFA20HostWithDefaults() *TmpFA20Host {
	this := TmpFA20Host{}
	return &this
}

// Getname returns the name field value if set, zero value otherwise.
func (o *TmpFA20Host) Getname()  {
	if o == nil || isNil(o.name) {
		var ret 
		return ret
	}
	return *o.name
}

// GetnameOk returns a tuple with the name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) GetnameOk() (*, bool) {
	if o == nil || isNil(o.name) {
		return nil, false
	}
	return o.name, true
}

// Hasname returns a boolean if a field has been set.
func (o *TmpFA20Host) Hasname() bool {
	if o != nil && !isNil(o.name) {
		return true
	}

	return false
}

// Setname gets a reference to the given  and assigns it to the name field.
func (o *TmpFA20Host) Setname(v ) {
	o.name = &v
}

// Getchap returns the chap field value if set, zero value otherwise.
func (o *TmpFA20Host) Getchap()  {
	if o == nil || isNil(o.chap) {
		var ret 
		return ret
	}
	return *o.chap
}

// GetchapOk returns a tuple with the chap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) GetchapOk() (*, bool) {
	if o == nil || isNil(o.chap) {
		return nil, false
	}
	return o.chap, true
}

// Haschap returns a boolean if a field has been set.
func (o *TmpFA20Host) Haschap() bool {
	if o != nil && !isNil(o.chap) {
		return true
	}

	return false
}

// Setchap gets a reference to the given  and assigns it to the chap field.
func (o *TmpFA20Host) Setchap(v ) {
	o.chap = &v
}

// Getconnection_count returns the connection_count field value if set, zero value otherwise.
func (o *TmpFA20Host) Getconnection_count()  {
	if o == nil || isNil(o.connection_count) {
		var ret 
		return ret
	}
	return *o.connection_count
}

// Getconnection_countOk returns a tuple with the connection_count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) Getconnection_countOk() (*, bool) {
	if o == nil || isNil(o.connection_count) {
		return nil, false
	}
	return o.connection_count, true
}

// Hasconnection_count returns a boolean if a field has been set.
func (o *TmpFA20Host) Hasconnection_count() bool {
	if o != nil && !isNil(o.connection_count) {
		return true
	}

	return false
}

// Setconnection_count gets a reference to the given  and assigns it to the connection_count field.
func (o *TmpFA20Host) Setconnection_count(v ) {
	o.connection_count = &v
}

// Gethost_group returns the host_group field value if set, zero value otherwise.
func (o *TmpFA20Host) Gethost_group()  {
	if o == nil || isNil(o.host_group) {
		var ret 
		return ret
	}
	return *o.host_group
}

// Gethost_groupOk returns a tuple with the host_group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) Gethost_groupOk() (*, bool) {
	if o == nil || isNil(o.host_group) {
		return nil, false
	}
	return o.host_group, true
}

// Hashost_group returns a boolean if a field has been set.
func (o *TmpFA20Host) Hashost_group() bool {
	if o != nil && !isNil(o.host_group) {
		return true
	}

	return false
}

// Sethost_group gets a reference to the given  and assigns it to the host_group field.
func (o *TmpFA20Host) Sethost_group(v ) {
	o.host_group = &v
}

// Getiqns returns the iqns field value if set, zero value otherwise.
func (o *TmpFA20Host) Getiqns()  {
	if o == nil || isNil(o.iqns) {
		var ret 
		return ret
	}
	return *o.iqns
}

// GetiqnsOk returns a tuple with the iqns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) GetiqnsOk() (*, bool) {
	if o == nil || isNil(o.iqns) {
		return nil, false
	}
	return o.iqns, true
}

// Hasiqns returns a boolean if a field has been set.
func (o *TmpFA20Host) Hasiqns() bool {
	if o != nil && !isNil(o.iqns) {
		return true
	}

	return false
}

// Setiqns gets a reference to the given  and assigns it to the iqns field.
func (o *TmpFA20Host) Setiqns(v ) {
	o.iqns = &v
}

// Getnqns returns the nqns field value if set, zero value otherwise.
func (o *TmpFA20Host) Getnqns()  {
	if o == nil || isNil(o.nqns) {
		var ret 
		return ret
	}
	return *o.nqns
}

// GetnqnsOk returns a tuple with the nqns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) GetnqnsOk() (*, bool) {
	if o == nil || isNil(o.nqns) {
		return nil, false
	}
	return o.nqns, true
}

// Hasnqns returns a boolean if a field has been set.
func (o *TmpFA20Host) Hasnqns() bool {
	if o != nil && !isNil(o.nqns) {
		return true
	}

	return false
}

// Setnqns gets a reference to the given  and assigns it to the nqns field.
func (o *TmpFA20Host) Setnqns(v ) {
	o.nqns = &v
}

// Getpersonality returns the personality field value if set, zero value otherwise.
func (o *TmpFA20Host) Getpersonality()  {
	if o == nil || isNil(o.personality) {
		var ret 
		return ret
	}
	return *o.personality
}

// GetpersonalityOk returns a tuple with the personality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) GetpersonalityOk() (*, bool) {
	if o == nil || isNil(o.personality) {
		return nil, false
	}
	return o.personality, true
}

// Haspersonality returns a boolean if a field has been set.
func (o *TmpFA20Host) Haspersonality() bool {
	if o != nil && !isNil(o.personality) {
		return true
	}

	return false
}

// Setpersonality gets a reference to the given  and assigns it to the personality field.
func (o *TmpFA20Host) Setpersonality(v ) {
	o.personality = &v
}

// Getport_connectivity returns the port_connectivity field value if set, zero value otherwise.
func (o *TmpFA20Host) Getport_connectivity()  {
	if o == nil || isNil(o.port_connectivity) {
		var ret 
		return ret
	}
	return *o.port_connectivity
}

// Getport_connectivityOk returns a tuple with the port_connectivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) Getport_connectivityOk() (*, bool) {
	if o == nil || isNil(o.port_connectivity) {
		return nil, false
	}
	return o.port_connectivity, true
}

// Hasport_connectivity returns a boolean if a field has been set.
func (o *TmpFA20Host) Hasport_connectivity() bool {
	if o != nil && !isNil(o.port_connectivity) {
		return true
	}

	return false
}

// Setport_connectivity gets a reference to the given  and assigns it to the port_connectivity field.
func (o *TmpFA20Host) Setport_connectivity(v ) {
	o.port_connectivity = &v
}

// Getpreferred_arrays returns the preferred_arrays field value if set, zero value otherwise.
func (o *TmpFA20Host) Getpreferred_arrays()  {
	if o == nil || isNil(o.preferred_arrays) {
		var ret 
		return ret
	}
	return *o.preferred_arrays
}

// Getpreferred_arraysOk returns a tuple with the preferred_arrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) Getpreferred_arraysOk() (*, bool) {
	if o == nil || isNil(o.preferred_arrays) {
		return nil, false
	}
	return o.preferred_arrays, true
}

// Haspreferred_arrays returns a boolean if a field has been set.
func (o *TmpFA20Host) Haspreferred_arrays() bool {
	if o != nil && !isNil(o.preferred_arrays) {
		return true
	}

	return false
}

// Setpreferred_arrays gets a reference to the given  and assigns it to the preferred_arrays field.
func (o *TmpFA20Host) Setpreferred_arrays(v ) {
	o.preferred_arrays = &v
}

// Getspace returns the space field value if set, zero value otherwise.
func (o *TmpFA20Host) Getspace()  {
	if o == nil || isNil(o.space) {
		var ret 
		return ret
	}
	return *o.space
}

// GetspaceOk returns a tuple with the space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) GetspaceOk() (*, bool) {
	if o == nil || isNil(o.space) {
		return nil, false
	}
	return o.space, true
}

// Hasspace returns a boolean if a field has been set.
func (o *TmpFA20Host) Hasspace() bool {
	if o != nil && !isNil(o.space) {
		return true
	}

	return false
}

// Setspace gets a reference to the given  and assigns it to the space field.
func (o *TmpFA20Host) Setspace(v ) {
	o.space = &v
}

// Getwwns returns the wwns field value if set, zero value otherwise.
func (o *TmpFA20Host) Getwwns()  {
	if o == nil || isNil(o.wwns) {
		var ret 
		return ret
	}
	return *o.wwns
}

// GetwwnsOk returns a tuple with the wwns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TmpFA20Host) GetwwnsOk() (*, bool) {
	if o == nil || isNil(o.wwns) {
		return nil, false
	}
	return o.wwns, true
}

// Haswwns returns a boolean if a field has been set.
func (o *TmpFA20Host) Haswwns() bool {
	if o != nil && !isNil(o.wwns) {
		return true
	}

	return false
}

// Setwwns gets a reference to the given  and assigns it to the wwns field.
func (o *TmpFA20Host) Setwwns(v ) {
	o.wwns = &v
}

func (o TmpFA20Host) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TmpFA20Host) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.name) {
		toSerialize["name"] = o.name
	}
	if !isNil(o.chap) {
		toSerialize["chap"] = o.chap
	}
	// skip: connection_count is readOnly
	if !isNil(o.host_group) {
		toSerialize["host_group"] = o.host_group
	}
	if !isNil(o.iqns) {
		toSerialize["iqns"] = o.iqns
	}
	if !isNil(o.nqns) {
		toSerialize["nqns"] = o.nqns
	}
	if !isNil(o.personality) {
		toSerialize["personality"] = o.personality
	}
	if !isNil(o.port_connectivity) {
		toSerialize["port_connectivity"] = o.port_connectivity
	}
	if !isNil(o.preferred_arrays) {
		toSerialize["preferred_arrays"] = o.preferred_arrays
	}
	// skip: space is readOnly
	if !isNil(o.wwns) {
		toSerialize["wwns"] = o.wwns
	}
	return toSerialize, nil
}

type NullableTmpFA20Host struct {
	value *TmpFA20Host
	isSet bool
}

func (v NullableTmpFA20Host) Get() *TmpFA20Host {
	return v.value
}

func (v *NullableTmpFA20Host) Set(val *TmpFA20Host) {
	v.value = val
	v.isSet = true
}

func (v NullableTmpFA20Host) IsSet() bool {
	return v.isSet
}

func (v *NullableTmpFA20Host) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTmpFA20Host(val *TmpFA20Host) *NullableTmpFA20Host {
	return &NullableTmpFA20Host{value: val, isSet: true}
}

func (v NullableTmpFA20Host) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTmpFA20Host) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


