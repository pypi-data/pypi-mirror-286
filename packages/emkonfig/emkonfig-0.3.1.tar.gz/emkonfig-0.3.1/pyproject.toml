[tool.poetry]
name = "emkonfig"
version = "0.3.1"
description = "YAML template based configuration management tool"
authors = ["Kıvanç Yüksel <kivanc.yuksel@emkademy.com>"]
readme = "README.md"
license = "MIT"
classifiers= [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries",
    "Programming Language :: Python :: 3.11",
    "Natural Language :: English",
    ]
packages = [
    { include = "emkonfig" },
]

[tool.poetry.dependencies]
python = ">=3.11"
omegaconf = "~=2.3"
universal-pathlib = "~=0.2"

[tool.poetry.group.dev.dependencies]
jupyterlab = "~=4.0"
black = "~=23.11"
isort = "~=5.12"
mypy = ">=1.7"
ruff = "~=0.1"
coverage = {version = "~=7.3", extras = ["toml"]}
pytest = "~=7.4"
pytest-cov = "~=4.1"
pytest-xdist = "~=3.5"
pytest-sugar = "~=0.9"
pytest-mock = "~=3.12"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 150

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 150
indent = 4
lines_between_types = 1
known_first_party = ["emkonfig"]
default_section = "THIRDPARTY"
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.11"
show_error_codes = true
ignore_missing_imports = true
install_types = true
non_interactive = true
follow_imports = "silent"
no_strict_optional = true

warn_redundant_casts = false
warn_unused_ignores = true
warn_unused_configs = true
warn_return_any = true
warn_no_return = true
warn_incomplete_stub = true

disallow_subclassing_any = true

disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
strict_optional = true

verbosity = 0

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 150
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
