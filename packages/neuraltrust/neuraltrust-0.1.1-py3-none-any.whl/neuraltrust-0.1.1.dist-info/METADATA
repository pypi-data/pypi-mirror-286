Metadata-Version: 2.1
Name: neuraltrust
Version: 0.1.1
Summary: Python client library for the NeuralTrust
Home-page: https://github.com/singularly/neuraltrust-sdk
License: Apache-2.0
Author: Victor Garcia
Author-email: victor.garcia@neuraltrust.ai
Requires-Python: >=3.11,<4.0
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: attrs (>=23.1.0,<24.0.0)
Requires-Dist: httpx (>=0.24.1,<0.25.0)
Requires-Dist: python-dateutil (>=2.8.2,<3.0.0)
Project-URL: Repository, https://github.com/singularly/neuraltrust-sdk
Description-Content-Type: text/markdown

# NeuralTrust Python SDK

The NeuralTrust Python SDK provides a convenient way to interact with the NeuralTrust API. It allows you to manage conversations, send messages, and trace interactions asynchronously.

## Installation

To install the SDK, use pip:

```bash
pip install neuraltrust
```

## Usage

### Initialization

First, initialize the `NeuralTrust` client with your API key:

```python
from neuraltrust.client import NeuralTrust

client = NeuralTrust(api_key="your_api_key")
```

You can also set the `base_url`, `timeout`, and `max_workers` if needed:

```python
client = NeuralTrust(
    api_key="your_api_key",
    timeout=30.0,
    max_workers=10
)
```

### Creating and Sending Traces

To create a new trace:

```python
trace = client.trace(
    conversation_id="1234",
    channel_id="web",
    session_id="123",
    user=User(user_id="123"),
    metadata=Metadata(
        user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
        timezone="America/New_York"
    ),
    custom={"custom_field": "custom_value"}
)
```

### Metadata Class

The `Metadata` class allows you to provide additional information about the user's environment. Here are the available options:

- `user_agent` (Optional[str]): The user agent string of the browser. If provided, `os` and `browser` can be inferred and are not necessary.
- `timezone` (Optional[str]): The timezone of the user. If provided, `location` can be inferred and is not necessary.
- `browser` (Optional[str]): The browser used by the user.
- `device` (Optional[str]): The device used by the user.
- `os` (Optional[str]): The operating system of the user's device.
- `locale` (Optional[str]): The locale of the user.
- `location` (Optional[str]): The location of the user.

### User Class

The `User` class allows you to provide information about the user. Here are the available options:

- `user_id` (Optional[str]): The unique identifier of the user.
- `user_email` (Optional[str]): The email address of the user.
- `user_phone` (Optional[str]): The phone number of the user.

### Sending Traces

You can send different types of traces (retrieval, generation, router) using the `Trace` class:

```python
trace.generation("Hello, how are you?")
trace.end("I'm good, thank you!")

trace.retrieval("What is my name?")
trace.end([
    {"name": "John Doe", "similarity": 0.95},
    {"name": "Jane Smith", "similarity": 0.82},
    {"name": "John Smith", "similarity": 0.78}
])

trace.router("What is my name?")
trace.end({
    "route": "name_agent",
    "confidence": 0.95,
    "metadata": {
        "intent": "name_inquiry",
        "entities": ["name"]
    }
})
```

### Full Example

Here is a full example of how to interact with the SDK:

```python
from neuraltrust import NeuralTrust
from neuraltrust.api_client.types import User, Metadata

# Initialize the NeuralTrust client with your API key
API_KEY = "your_api_key"
client = NeuralTrust(api_key=API_KEY)

# Create a user object with more detailed information
user = User(
    user_id="user_123",
    user_email="user@example.com",
    user_phone="+1234567890"
)

# Create metadata with additional details
metadata = Metadata(
    user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    timezone="America/New_York"
)

# Start a new trace for a conversation
trace = client.trace(
    conversation_id="conv_1234",
    channel_id="web",
    session_id="sess_123",
    user=user,
    metadata=metadata,
    custom={"custom_field": "custom_value"}
)

# Simulate a user sending a message and the bot generating a response
trace.generation("Hello, how are you?")
trace.end("I'm good, thank you!")

# Simulate a user asking for their name and the bot retrieving it
trace.retrieval("What is my name?")
trace.end([
    {"name": "John Doe", "similarity": 0.95},
    {"name": "Jane Smith", "similarity": 0.82},
    {"name": "John Smith", "similarity": 0.78}
])

# Simulate a routing decision based on user input
trace.router("What is my name?")
trace.end({
    "route": "name_agent",
    "confidence": 0.95,
    "metadata": {
        "intent": "name_inquiry",
        "entities": ["name"]
    }
})
```

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
