Metadata-Version: 2.1
Name: vtat
Version: 0.0.2
Summary: A simple ACL system
Home-page: UNKNOWN
Author: vtat
Author-email: askofback@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# VTAT(ENGLISH)
## JSON EXAMPLE
```json
{
"group": {
  "users": [
    "group:other",
    "user:vtat"
  ],
  "other": [
    "user:other"
  ],
}
}
```
## IMPORT
```python
import vtat
```
OR
**WARNING: Beta functions doesn't include**
```python
from vtat import addGroup, removeGroup, addObject, eraseObject, userExists, groupExists, meet, removeObject, deleteObject, replaceObject, deleteObject, replaceObject, renameObject
```
## FUNCTIONS
### vtat.addGroup(json_array, group)
In `json_array` add group, `group`
And return json_array.
### vtat.removeGroup(json_array, group)
It remove `group` in `json_array`
and return json_array.
### vtat.addObject(json_array, group, name)
In `json_array` add object, `name` in group, `group`
And return json_array
and Object name must be `group:(group name)` or `user:(user name)`.
### vtat.eraseObject(json_array, group, name)
It delete `name` in `group` in `json_array`
and return json_array.
and Object name must be `group:(group name)` or `user:(user name)`.
### vtat.userExists(json_array, group, user)
It is return `True` or `False`
If in `json_array` in `group` exist `user`,
It return `True`.
If not in `json_array` in `group` exist `user`,
It return `False`.
But Don't use it.(Instead of use `meet()`)
and Uesr must be `group:(group name)` or `user:(user name)`.
### vtat.groupExists(json_array, group)
It is return `True` or `False`
If in `json_array` exist `group`,
It return `True`.
If not in `json_array` exist `group`,
It return `False`.
### vtat.meet(json_array, group, name)
It return `True` or `False`
If in json_array exist name in group (It works even if there are users in subgroups within the group.)
It return `True`
If not in json_array exist name in group (It works even if there are users in subgroups within the group.)
It return `False`
And name must be `group:(group name)` or `user:(user name)`.
### vtat.removeObject(json_array, name)
It delete `name` in all.
And name must be `group:(group name)` or `user:(user name)`.
### vtat.deleteObject(json_array, name)
It delete `name` in all groups.
And name must be `group:(group name)` or `user:(user name)`.
### vtat.replaceObject(json_array, old_name, new_name)
It replace from `old_name` to `new_name` in all groups.
And old_name and new_name must be `group:(group name)` or `user:(user name)`.
### vtat.renameGroup(json_array, old_name, new_name)
It rename group from old_name to new_name
### vtat.renameObject(json_array, group, old_name, new_name)
It replace from `old_name` to `new_name` in `group` in `json_array`.
And old_name and new_name must be `group:(group name)` or `user:(user name)`.
### vtat.listGroups(json_array)
**WARING: BETA**
It return all groups in `json_array`
### vtat.listObjects(json_array)
**WARING: BETA**
It return all objects in `json_array`
### vtat.listObjectsOfGroup(json_array, group)
**WARING: BETA**
It return objects in `group` in `json_array`
### vtat.getGroupsOfObject(json_array, name)
**WARING: BETA**
It return included `name` all groups.
### vtat.objectIsInAnyGroup(json_array, name)
**WARING: BETA**
It return included `name` any groups.
### vtat.getSubgroups(json_array, group)
**WARING: BETA**
It return subgroups in group.

