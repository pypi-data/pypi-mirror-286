# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class GlobalPromptImageItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'image_id': 'str',
        'image_type': 'GlobalPromptImageType',
        'high_res_url': 'str',
        'url': 'str',
        'boxes': 'list[list[object]]',
        'labels': 'list[GlobalPromptLabelsList]'
    }

    attribute_map = {
        'image_id': 'image_id',
        'image_type': 'image_type',
        'high_res_url': 'high_res_url',
        'url': 'url',
        'boxes': 'boxes',
        'labels': 'labels'
    }

    def __init__(self, image_id=None, image_type=None, high_res_url=None, url=None, boxes=None, labels=None, local_vars_configuration=None):  # noqa: E501
        """GlobalPromptImageItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._image_id = None
        self._image_type = None
        self._high_res_url = None
        self._url = None
        self._boxes = None
        self._labels = None
        self.discriminator = None

        self.image_id = image_id
        self.image_type = image_type
        self.high_res_url = high_res_url
        self.url = url
        self.boxes = boxes
        self.labels = labels

    @property
    def image_id(self):
        """Gets the image_id of this GlobalPromptImageItem.  # noqa: E501


        :return: The image_id of this GlobalPromptImageItem.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this GlobalPromptImageItem.


        :param image_id: The image_id of this GlobalPromptImageItem.  # noqa: E501
        :type image_id: str
        """
        if self.local_vars_configuration.client_side_validation and image_id is None:  # noqa: E501
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                image_id is not None and not re.search(r'^(D|U)_[0-9]+$', image_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `image_id`, must be a follow pattern or equal to `/^(D|U)_[0-9]+$/`")  # noqa: E501

        self._image_id = image_id

    @property
    def image_type(self):
        """Gets the image_type of this GlobalPromptImageItem.  # noqa: E501


        :return: The image_type of this GlobalPromptImageItem.  # noqa: E501
        :rtype: GlobalPromptImageType
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this GlobalPromptImageItem.


        :param image_type: The image_type of this GlobalPromptImageItem.  # noqa: E501
        :type image_type: GlobalPromptImageType
        """
        if self.local_vars_configuration.client_side_validation and image_type is None:  # noqa: E501
            raise ValueError("Invalid value for `image_type`, must not be `None`")  # noqa: E501

        self._image_type = image_type

    @property
    def high_res_url(self):
        """Gets the high_res_url of this GlobalPromptImageItem.  # noqa: E501


        :return: The high_res_url of this GlobalPromptImageItem.  # noqa: E501
        :rtype: str
        """
        return self._high_res_url

    @high_res_url.setter
    def high_res_url(self, high_res_url):
        """Sets the high_res_url of this GlobalPromptImageItem.


        :param high_res_url: The high_res_url of this GlobalPromptImageItem.  # noqa: E501
        :type high_res_url: str
        """
        if self.local_vars_configuration.client_side_validation and high_res_url is None:  # noqa: E501
            raise ValueError("Invalid value for `high_res_url`, must not be `None`")  # noqa: E501

        self._high_res_url = high_res_url

    @property
    def url(self):
        """Gets the url of this GlobalPromptImageItem.  # noqa: E501


        :return: The url of this GlobalPromptImageItem.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GlobalPromptImageItem.


        :param url: The url of this GlobalPromptImageItem.  # noqa: E501
        :type url: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def boxes(self):
        """Gets the boxes of this GlobalPromptImageItem.  # noqa: E501


        :return: The boxes of this GlobalPromptImageItem.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._boxes

    @boxes.setter
    def boxes(self, boxes):
        """Sets the boxes of this GlobalPromptImageItem.


        :param boxes: The boxes of this GlobalPromptImageItem.  # noqa: E501
        :type boxes: list[list[object]]
        """
        if self.local_vars_configuration.client_side_validation and boxes is None:  # noqa: E501
            raise ValueError("Invalid value for `boxes`, must not be `None`")  # noqa: E501

        self._boxes = boxes

    @property
    def labels(self):
        """Gets the labels of this GlobalPromptImageItem.  # noqa: E501


        :return: The labels of this GlobalPromptImageItem.  # noqa: E501
        :rtype: list[GlobalPromptLabelsList]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GlobalPromptImageItem.


        :param labels: The labels of this GlobalPromptImageItem.  # noqa: E501
        :type labels: list[GlobalPromptLabelsList]
        """
        if self.local_vars_configuration.client_side_validation and labels is None:  # noqa: E501
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalPromptImageItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlobalPromptImageItem):
            return True

        return self.to_dict() != other.to_dict()
