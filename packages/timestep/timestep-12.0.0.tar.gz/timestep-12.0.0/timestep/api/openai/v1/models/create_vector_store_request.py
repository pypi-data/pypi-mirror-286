from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.create_vector_store_request_chunking_strategy import \
    CreateVectorStoreRequestChunkingStrategy  # noqa: E501
from timestep.api.openai.v1.models.vector_store_expiration_after import \
    VectorStoreExpirationAfter  # noqa: E501


class CreateVectorStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_ids=None, name=None, expires_after=None, chunking_strategy=None, metadata=None):  # noqa: E501
        """CreateVectorStoreRequest - a model defined in OpenAPI

        :param file_ids: The file_ids of this CreateVectorStoreRequest.  # noqa: E501
        :type file_ids: List[str]
        :param name: The name of this CreateVectorStoreRequest.  # noqa: E501
        :type name: str
        :param expires_after: The expires_after of this CreateVectorStoreRequest.  # noqa: E501
        :type expires_after: VectorStoreExpirationAfter
        :param chunking_strategy: The chunking_strategy of this CreateVectorStoreRequest.  # noqa: E501
        :type chunking_strategy: CreateVectorStoreRequestChunkingStrategy
        :param metadata: The metadata of this CreateVectorStoreRequest.  # noqa: E501
        :type metadata: object
        """
        self.openapi_types = {
            'file_ids': List[str],
            'name': str,
            'expires_after': VectorStoreExpirationAfter,
            'chunking_strategy': CreateVectorStoreRequestChunkingStrategy,
            'metadata': object
        }

        self.attribute_map = {
            'file_ids': 'file_ids',
            'name': 'name',
            'expires_after': 'expires_after',
            'chunking_strategy': 'chunking_strategy',
            'metadata': 'metadata'
        }

        self._file_ids = file_ids
        self._name = name
        self._expires_after = expires_after
        self._chunking_strategy = chunking_strategy
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'CreateVectorStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateVectorStoreRequest of this CreateVectorStoreRequest.  # noqa: E501
        :rtype: CreateVectorStoreRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_ids(self) -> List[str]:
        """Gets the file_ids of this CreateVectorStoreRequest.

        A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.  # noqa: E501

        :return: The file_ids of this CreateVectorStoreRequest.
        :rtype: List[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids: List[str]):
        """Sets the file_ids of this CreateVectorStoreRequest.

        A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.  # noqa: E501

        :param file_ids: The file_ids of this CreateVectorStoreRequest.
        :type file_ids: List[str]
        """
        if file_ids is not None and len(file_ids) > 500:
            raise ValueError("Invalid value for `file_ids`, number of items must be less than or equal to `500`")  # noqa: E501

        self._file_ids = file_ids

    @property
    def name(self) -> str:
        """Gets the name of this CreateVectorStoreRequest.

        The name of the vector store.  # noqa: E501

        :return: The name of this CreateVectorStoreRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateVectorStoreRequest.

        The name of the vector store.  # noqa: E501

        :param name: The name of this CreateVectorStoreRequest.
        :type name: str
        """

        self._name = name

    @property
    def expires_after(self) -> VectorStoreExpirationAfter:
        """Gets the expires_after of this CreateVectorStoreRequest.


        :return: The expires_after of this CreateVectorStoreRequest.
        :rtype: VectorStoreExpirationAfter
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after: VectorStoreExpirationAfter):
        """Sets the expires_after of this CreateVectorStoreRequest.


        :param expires_after: The expires_after of this CreateVectorStoreRequest.
        :type expires_after: VectorStoreExpirationAfter
        """

        self._expires_after = expires_after

    @property
    def chunking_strategy(self) -> CreateVectorStoreRequestChunkingStrategy:
        """Gets the chunking_strategy of this CreateVectorStoreRequest.


        :return: The chunking_strategy of this CreateVectorStoreRequest.
        :rtype: CreateVectorStoreRequestChunkingStrategy
        """
        return self._chunking_strategy

    @chunking_strategy.setter
    def chunking_strategy(self, chunking_strategy: CreateVectorStoreRequestChunkingStrategy):
        """Sets the chunking_strategy of this CreateVectorStoreRequest.


        :param chunking_strategy: The chunking_strategy of this CreateVectorStoreRequest.
        :type chunking_strategy: CreateVectorStoreRequestChunkingStrategy
        """

        self._chunking_strategy = chunking_strategy

    @property
    def metadata(self) -> object:
        """Gets the metadata of this CreateVectorStoreRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :return: The metadata of this CreateVectorStoreRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this CreateVectorStoreRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :param metadata: The metadata of this CreateVectorStoreRequest.
        :type metadata: object
        """

        self._metadata = metadata
