from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.vector_store_file_batch_object_file_counts import \
    VectorStoreFileBatchObjectFileCounts  # noqa: E501


class VectorStoreFileBatchObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, object=None, created_at=None, vector_store_id=None, status=None, file_counts=None):  # noqa: E501
        """VectorStoreFileBatchObject - a model defined in OpenAPI

        :param id: The id of this VectorStoreFileBatchObject.  # noqa: E501
        :type id: str
        :param object: The object of this VectorStoreFileBatchObject.  # noqa: E501
        :type object: str
        :param created_at: The created_at of this VectorStoreFileBatchObject.  # noqa: E501
        :type created_at: int
        :param vector_store_id: The vector_store_id of this VectorStoreFileBatchObject.  # noqa: E501
        :type vector_store_id: str
        :param status: The status of this VectorStoreFileBatchObject.  # noqa: E501
        :type status: str
        :param file_counts: The file_counts of this VectorStoreFileBatchObject.  # noqa: E501
        :type file_counts: VectorStoreFileBatchObjectFileCounts
        """
        self.openapi_types = {
            'id': str,
            'object': str,
            'created_at': int,
            'vector_store_id': str,
            'status': str,
            'file_counts': VectorStoreFileBatchObjectFileCounts
        }

        self.attribute_map = {
            'id': 'id',
            'object': 'object',
            'created_at': 'created_at',
            'vector_store_id': 'vector_store_id',
            'status': 'status',
            'file_counts': 'file_counts'
        }

        self._id = id
        self._object = object
        self._created_at = created_at
        self._vector_store_id = vector_store_id
        self._status = status
        self._file_counts = file_counts

    @classmethod
    def from_dict(cls, dikt) -> 'VectorStoreFileBatchObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VectorStoreFileBatchObject of this VectorStoreFileBatchObject.  # noqa: E501
        :rtype: VectorStoreFileBatchObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this VectorStoreFileBatchObject.

        The identifier, which can be referenced in API endpoints.  # noqa: E501

        :return: The id of this VectorStoreFileBatchObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VectorStoreFileBatchObject.

        The identifier, which can be referenced in API endpoints.  # noqa: E501

        :param id: The id of this VectorStoreFileBatchObject.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def object(self) -> str:
        """Gets the object of this VectorStoreFileBatchObject.

        The object type, which is always `vector_store.file_batch`.  # noqa: E501

        :return: The object of this VectorStoreFileBatchObject.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this VectorStoreFileBatchObject.

        The object type, which is always `vector_store.file_batch`.  # noqa: E501

        :param object: The object of this VectorStoreFileBatchObject.
        :type object: str
        """
        allowed_values = ["vector_store.files_batch"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def created_at(self) -> int:
        """Gets the created_at of this VectorStoreFileBatchObject.

        The Unix timestamp (in seconds) for when the vector store files batch was created.  # noqa: E501

        :return: The created_at of this VectorStoreFileBatchObject.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: int):
        """Sets the created_at of this VectorStoreFileBatchObject.

        The Unix timestamp (in seconds) for when the vector store files batch was created.  # noqa: E501

        :param created_at: The created_at of this VectorStoreFileBatchObject.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def vector_store_id(self) -> str:
        """Gets the vector_store_id of this VectorStoreFileBatchObject.

        The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.  # noqa: E501

        :return: The vector_store_id of this VectorStoreFileBatchObject.
        :rtype: str
        """
        return self._vector_store_id

    @vector_store_id.setter
    def vector_store_id(self, vector_store_id: str):
        """Sets the vector_store_id of this VectorStoreFileBatchObject.

        The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.  # noqa: E501

        :param vector_store_id: The vector_store_id of this VectorStoreFileBatchObject.
        :type vector_store_id: str
        """
        if vector_store_id is None:
            raise ValueError("Invalid value for `vector_store_id`, must not be `None`")  # noqa: E501

        self._vector_store_id = vector_store_id

    @property
    def status(self) -> str:
        """Gets the status of this VectorStoreFileBatchObject.

        The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.  # noqa: E501

        :return: The status of this VectorStoreFileBatchObject.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this VectorStoreFileBatchObject.

        The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.  # noqa: E501

        :param status: The status of this VectorStoreFileBatchObject.
        :type status: str
        """
        allowed_values = ["in_progress", "completed", "cancelled", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def file_counts(self) -> VectorStoreFileBatchObjectFileCounts:
        """Gets the file_counts of this VectorStoreFileBatchObject.


        :return: The file_counts of this VectorStoreFileBatchObject.
        :rtype: VectorStoreFileBatchObjectFileCounts
        """
        return self._file_counts

    @file_counts.setter
    def file_counts(self, file_counts: VectorStoreFileBatchObjectFileCounts):
        """Sets the file_counts of this VectorStoreFileBatchObject.


        :param file_counts: The file_counts of this VectorStoreFileBatchObject.
        :type file_counts: VectorStoreFileBatchObjectFileCounts
        """
        if file_counts is None:
            raise ValueError("Invalid value for `file_counts`, must not be `None`")  # noqa: E501

        self._file_counts = file_counts
