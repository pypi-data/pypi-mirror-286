from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model


class RunStepDetailsToolCallsFileSearchObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, file_search=None):  # noqa: E501
        """RunStepDetailsToolCallsFileSearchObject - a model defined in OpenAPI

        :param id: The id of this RunStepDetailsToolCallsFileSearchObject.  # noqa: E501
        :type id: str
        :param type: The type of this RunStepDetailsToolCallsFileSearchObject.  # noqa: E501
        :type type: str
        :param file_search: The file_search of this RunStepDetailsToolCallsFileSearchObject.  # noqa: E501
        :type file_search: object
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'file_search': object
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'file_search': 'file_search'
        }

        self._id = id
        self._type = type
        self._file_search = file_search

    @classmethod
    def from_dict(cls, dikt) -> 'RunStepDetailsToolCallsFileSearchObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunStepDetailsToolCallsFileSearchObject of this RunStepDetailsToolCallsFileSearchObject.  # noqa: E501
        :rtype: RunStepDetailsToolCallsFileSearchObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this RunStepDetailsToolCallsFileSearchObject.

        The ID of the tool call object.  # noqa: E501

        :return: The id of this RunStepDetailsToolCallsFileSearchObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RunStepDetailsToolCallsFileSearchObject.

        The ID of the tool call object.  # noqa: E501

        :param id: The id of this RunStepDetailsToolCallsFileSearchObject.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this RunStepDetailsToolCallsFileSearchObject.

        The type of tool call. This is always going to be `file_search` for this type of tool call.  # noqa: E501

        :return: The type of this RunStepDetailsToolCallsFileSearchObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this RunStepDetailsToolCallsFileSearchObject.

        The type of tool call. This is always going to be `file_search` for this type of tool call.  # noqa: E501

        :param type: The type of this RunStepDetailsToolCallsFileSearchObject.
        :type type: str
        """
        allowed_values = ["file_search"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def file_search(self) -> object:
        """Gets the file_search of this RunStepDetailsToolCallsFileSearchObject.

        For now, this is always going to be an empty object.  # noqa: E501

        :return: The file_search of this RunStepDetailsToolCallsFileSearchObject.
        :rtype: object
        """
        return self._file_search

    @file_search.setter
    def file_search(self, file_search: object):
        """Sets the file_search of this RunStepDetailsToolCallsFileSearchObject.

        For now, this is always going to be an empty object.  # noqa: E501

        :param file_search: The file_search of this RunStepDetailsToolCallsFileSearchObject.
        :type file_search: object
        """
        if file_search is None:
            raise ValueError("Invalid value for `file_search`, must not be `None`")  # noqa: E501

        self._file_search = file_search
