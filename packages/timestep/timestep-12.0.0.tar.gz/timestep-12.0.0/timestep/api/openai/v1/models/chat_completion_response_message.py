from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.chat_completion_message_tool_call import \
    ChatCompletionMessageToolCall  # noqa: E501
from timestep.api.openai.v1.models.chat_completion_response_message_function_call import \
    ChatCompletionResponseMessageFunctionCall  # noqa: E501


class ChatCompletionResponseMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content=None, tool_calls=None, role=None, function_call=None):  # noqa: E501
        """ChatCompletionResponseMessage - a model defined in OpenAPI

        :param content: The content of this ChatCompletionResponseMessage.  # noqa: E501
        :type content: str
        :param tool_calls: The tool_calls of this ChatCompletionResponseMessage.  # noqa: E501
        :type tool_calls: List[ChatCompletionMessageToolCall]
        :param role: The role of this ChatCompletionResponseMessage.  # noqa: E501
        :type role: str
        :param function_call: The function_call of this ChatCompletionResponseMessage.  # noqa: E501
        :type function_call: ChatCompletionResponseMessageFunctionCall
        """
        self.openapi_types = {
            'content': str,
            'tool_calls': List[ChatCompletionMessageToolCall],
            'role': str,
            'function_call': ChatCompletionResponseMessageFunctionCall
        }

        self.attribute_map = {
            'content': 'content',
            'tool_calls': 'tool_calls',
            'role': 'role',
            'function_call': 'function_call'
        }

        self._content = content
        self._tool_calls = tool_calls
        self._role = role
        self._function_call = function_call

    @classmethod
    def from_dict(cls, dikt) -> 'ChatCompletionResponseMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatCompletionResponseMessage of this ChatCompletionResponseMessage.  # noqa: E501
        :rtype: ChatCompletionResponseMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self) -> str:
        """Gets the content of this ChatCompletionResponseMessage.

        The contents of the message.  # noqa: E501

        :return: The content of this ChatCompletionResponseMessage.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this ChatCompletionResponseMessage.

        The contents of the message.  # noqa: E501

        :param content: The content of this ChatCompletionResponseMessage.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def tool_calls(self) -> List[ChatCompletionMessageToolCall]:
        """Gets the tool_calls of this ChatCompletionResponseMessage.

        The tool calls generated by the model, such as function calls.  # noqa: E501

        :return: The tool_calls of this ChatCompletionResponseMessage.
        :rtype: List[ChatCompletionMessageToolCall]
        """
        return self._tool_calls

    @tool_calls.setter
    def tool_calls(self, tool_calls: List[ChatCompletionMessageToolCall]):
        """Sets the tool_calls of this ChatCompletionResponseMessage.

        The tool calls generated by the model, such as function calls.  # noqa: E501

        :param tool_calls: The tool_calls of this ChatCompletionResponseMessage.
        :type tool_calls: List[ChatCompletionMessageToolCall]
        """

        self._tool_calls = tool_calls

    @property
    def role(self) -> str:
        """Gets the role of this ChatCompletionResponseMessage.

        The role of the author of this message.  # noqa: E501

        :return: The role of this ChatCompletionResponseMessage.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this ChatCompletionResponseMessage.

        The role of the author of this message.  # noqa: E501

        :param role: The role of this ChatCompletionResponseMessage.
        :type role: str
        """
        allowed_values = ["assistant"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def function_call(self) -> ChatCompletionResponseMessageFunctionCall:
        """Gets the function_call of this ChatCompletionResponseMessage.


        :return: The function_call of this ChatCompletionResponseMessage.
        :rtype: ChatCompletionResponseMessageFunctionCall
        """
        return self._function_call

    @function_call.setter
    def function_call(self, function_call: ChatCompletionResponseMessageFunctionCall):
        """Sets the function_call of this ChatCompletionResponseMessage.


        :param function_call: The function_call of this ChatCompletionResponseMessage.
        :type function_call: ChatCompletionResponseMessageFunctionCall
        """

        self._function_call = function_call
