from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.assistant_object_tools_inner import \
    AssistantObjectToolsInner  # noqa: E501
from timestep.api.openai.v1.models.assistants_api_response_format_option import \
    AssistantsApiResponseFormatOption  # noqa: E501
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.create_assistant_request_model import \
    CreateAssistantRequestModel  # noqa: E501
from timestep.api.openai.v1.models.create_assistant_request_tool_resources import \
    CreateAssistantRequestToolResources  # noqa: E501


class CreateAssistantRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model=None, name=None, description=None, instructions=None, tools=[], tool_resources=None, metadata=None, temperature=1, top_p=1, response_format=None):  # noqa: E501
        """CreateAssistantRequest - a model defined in OpenAPI

        :param model: The model of this CreateAssistantRequest.  # noqa: E501
        :type model: CreateAssistantRequestModel
        :param name: The name of this CreateAssistantRequest.  # noqa: E501
        :type name: str
        :param description: The description of this CreateAssistantRequest.  # noqa: E501
        :type description: str
        :param instructions: The instructions of this CreateAssistantRequest.  # noqa: E501
        :type instructions: str
        :param tools: The tools of this CreateAssistantRequest.  # noqa: E501
        :type tools: List[AssistantObjectToolsInner]
        :param tool_resources: The tool_resources of this CreateAssistantRequest.  # noqa: E501
        :type tool_resources: CreateAssistantRequestToolResources
        :param metadata: The metadata of this CreateAssistantRequest.  # noqa: E501
        :type metadata: object
        :param temperature: The temperature of this CreateAssistantRequest.  # noqa: E501
        :type temperature: float
        :param top_p: The top_p of this CreateAssistantRequest.  # noqa: E501
        :type top_p: float
        :param response_format: The response_format of this CreateAssistantRequest.  # noqa: E501
        :type response_format: AssistantsApiResponseFormatOption
        """
        self.openapi_types = {
            'model': CreateAssistantRequestModel,
            'name': str,
            'description': str,
            'instructions': str,
            'tools': List[AssistantObjectToolsInner],
            'tool_resources': CreateAssistantRequestToolResources,
            'metadata': object,
            'temperature': float,
            'top_p': float,
            'response_format': AssistantsApiResponseFormatOption
        }

        self.attribute_map = {
            'model': 'model',
            'name': 'name',
            'description': 'description',
            'instructions': 'instructions',
            'tools': 'tools',
            'tool_resources': 'tool_resources',
            'metadata': 'metadata',
            'temperature': 'temperature',
            'top_p': 'top_p',
            'response_format': 'response_format'
        }

        self._model = model
        self._name = name
        self._description = description
        self._instructions = instructions
        self._tools = tools
        self._tool_resources = tool_resources
        self._metadata = metadata
        self._temperature = temperature
        self._top_p = top_p
        self._response_format = response_format

    @classmethod
    def from_dict(cls, dikt) -> 'CreateAssistantRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateAssistantRequest of this CreateAssistantRequest.  # noqa: E501
        :rtype: CreateAssistantRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self) -> CreateAssistantRequestModel:
        """Gets the model of this CreateAssistantRequest.


        :return: The model of this CreateAssistantRequest.
        :rtype: CreateAssistantRequestModel
        """
        return self._model

    @model.setter
    def model(self, model: CreateAssistantRequestModel):
        """Sets the model of this CreateAssistantRequest.


        :param model: The model of this CreateAssistantRequest.
        :type model: CreateAssistantRequestModel
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def name(self) -> str:
        """Gets the name of this CreateAssistantRequest.

        The name of the assistant. The maximum length is 256 characters.   # noqa: E501

        :return: The name of this CreateAssistantRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateAssistantRequest.

        The name of the assistant. The maximum length is 256 characters.   # noqa: E501

        :param name: The name of this CreateAssistantRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this CreateAssistantRequest.

        The description of the assistant. The maximum length is 512 characters.   # noqa: E501

        :return: The description of this CreateAssistantRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreateAssistantRequest.

        The description of the assistant. The maximum length is 512 characters.   # noqa: E501

        :param description: The description of this CreateAssistantRequest.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")  # noqa: E501

        self._description = description

    @property
    def instructions(self) -> str:
        """Gets the instructions of this CreateAssistantRequest.

        The system instructions that the assistant uses. The maximum length is 256,000 characters.   # noqa: E501

        :return: The instructions of this CreateAssistantRequest.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: str):
        """Sets the instructions of this CreateAssistantRequest.

        The system instructions that the assistant uses. The maximum length is 256,000 characters.   # noqa: E501

        :param instructions: The instructions of this CreateAssistantRequest.
        :type instructions: str
        """
        if instructions is not None and len(instructions) > 256000:
            raise ValueError("Invalid value for `instructions`, length must be less than or equal to `256000`")  # noqa: E501

        self._instructions = instructions

    @property
    def tools(self) -> List[AssistantObjectToolsInner]:
        """Gets the tools of this CreateAssistantRequest.

        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.   # noqa: E501

        :return: The tools of this CreateAssistantRequest.
        :rtype: List[AssistantObjectToolsInner]
        """
        return self._tools

    @tools.setter
    def tools(self, tools: List[AssistantObjectToolsInner]):
        """Sets the tools of this CreateAssistantRequest.

        A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.   # noqa: E501

        :param tools: The tools of this CreateAssistantRequest.
        :type tools: List[AssistantObjectToolsInner]
        """
        if tools is not None and len(tools) > 128:
            raise ValueError("Invalid value for `tools`, number of items must be less than or equal to `128`")  # noqa: E501

        self._tools = tools

    @property
    def tool_resources(self) -> CreateAssistantRequestToolResources:
        """Gets the tool_resources of this CreateAssistantRequest.


        :return: The tool_resources of this CreateAssistantRequest.
        :rtype: CreateAssistantRequestToolResources
        """
        return self._tool_resources

    @tool_resources.setter
    def tool_resources(self, tool_resources: CreateAssistantRequestToolResources):
        """Sets the tool_resources of this CreateAssistantRequest.


        :param tool_resources: The tool_resources of this CreateAssistantRequest.
        :type tool_resources: CreateAssistantRequestToolResources
        """

        self._tool_resources = tool_resources

    @property
    def metadata(self) -> object:
        """Gets the metadata of this CreateAssistantRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :return: The metadata of this CreateAssistantRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this CreateAssistantRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :param metadata: The metadata of this CreateAssistantRequest.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def temperature(self) -> float:
        """Gets the temperature of this CreateAssistantRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.   # noqa: E501

        :return: The temperature of this CreateAssistantRequest.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this CreateAssistantRequest.

        What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.   # noqa: E501

        :param temperature: The temperature of this CreateAssistantRequest.
        :type temperature: float
        """
        if temperature is not None and temperature > 2:  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must be a value less than or equal to `2`")  # noqa: E501
        if temperature is not None and temperature < 0:  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must be a value greater than or equal to `0`")  # noqa: E501

        self._temperature = temperature

    @property
    def top_p(self) -> float:
        """Gets the top_p of this CreateAssistantRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.   # noqa: E501

        :return: The top_p of this CreateAssistantRequest.
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p: float):
        """Sets the top_p of this CreateAssistantRequest.

        An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.   # noqa: E501

        :param top_p: The top_p of this CreateAssistantRequest.
        :type top_p: float
        """
        if top_p is not None and top_p > 1:  # noqa: E501
            raise ValueError("Invalid value for `top_p`, must be a value less than or equal to `1`")  # noqa: E501
        if top_p is not None and top_p < 0:  # noqa: E501
            raise ValueError("Invalid value for `top_p`, must be a value greater than or equal to `0`")  # noqa: E501

        self._top_p = top_p

    @property
    def response_format(self) -> AssistantsApiResponseFormatOption:
        """Gets the response_format of this CreateAssistantRequest.


        :return: The response_format of this CreateAssistantRequest.
        :rtype: AssistantsApiResponseFormatOption
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format: AssistantsApiResponseFormatOption):
        """Sets the response_format of this CreateAssistantRequest.


        :param response_format: The response_format of this CreateAssistantRequest.
        :type response_format: AssistantsApiResponseFormatOption
        """

        self._response_format = response_format
