from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.vector_store_expiration_after import \
    VectorStoreExpirationAfter  # noqa: E501


class UpdateVectorStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, expires_after=None, metadata=None):  # noqa: E501
        """UpdateVectorStoreRequest - a model defined in OpenAPI

        :param name: The name of this UpdateVectorStoreRequest.  # noqa: E501
        :type name: str
        :param expires_after: The expires_after of this UpdateVectorStoreRequest.  # noqa: E501
        :type expires_after: VectorStoreExpirationAfter
        :param metadata: The metadata of this UpdateVectorStoreRequest.  # noqa: E501
        :type metadata: object
        """
        self.openapi_types = {
            'name': str,
            'expires_after': VectorStoreExpirationAfter,
            'metadata': object
        }

        self.attribute_map = {
            'name': 'name',
            'expires_after': 'expires_after',
            'metadata': 'metadata'
        }

        self._name = name
        self._expires_after = expires_after
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateVectorStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateVectorStoreRequest of this UpdateVectorStoreRequest.  # noqa: E501
        :rtype: UpdateVectorStoreRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this UpdateVectorStoreRequest.

        The name of the vector store.  # noqa: E501

        :return: The name of this UpdateVectorStoreRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UpdateVectorStoreRequest.

        The name of the vector store.  # noqa: E501

        :param name: The name of this UpdateVectorStoreRequest.
        :type name: str
        """

        self._name = name

    @property
    def expires_after(self) -> VectorStoreExpirationAfter:
        """Gets the expires_after of this UpdateVectorStoreRequest.


        :return: The expires_after of this UpdateVectorStoreRequest.
        :rtype: VectorStoreExpirationAfter
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after: VectorStoreExpirationAfter):
        """Sets the expires_after of this UpdateVectorStoreRequest.


        :param expires_after: The expires_after of this UpdateVectorStoreRequest.
        :type expires_after: VectorStoreExpirationAfter
        """

        self._expires_after = expires_after

    @property
    def metadata(self) -> object:
        """Gets the metadata of this UpdateVectorStoreRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :return: The metadata of this UpdateVectorStoreRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this UpdateVectorStoreRequest.

        Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.   # noqa: E501

        :param metadata: The metadata of this UpdateVectorStoreRequest.
        :type metadata: object
        """

        self._metadata = metadata
