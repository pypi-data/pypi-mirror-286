from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.chunking_strategy_request_param import \
    ChunkingStrategyRequestParam  # noqa: E501


class CreateVectorStoreFileBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_ids=None, chunking_strategy=None):  # noqa: E501
        """CreateVectorStoreFileBatchRequest - a model defined in OpenAPI

        :param file_ids: The file_ids of this CreateVectorStoreFileBatchRequest.  # noqa: E501
        :type file_ids: List[str]
        :param chunking_strategy: The chunking_strategy of this CreateVectorStoreFileBatchRequest.  # noqa: E501
        :type chunking_strategy: ChunkingStrategyRequestParam
        """
        self.openapi_types = {
            'file_ids': List[str],
            'chunking_strategy': ChunkingStrategyRequestParam
        }

        self.attribute_map = {
            'file_ids': 'file_ids',
            'chunking_strategy': 'chunking_strategy'
        }

        self._file_ids = file_ids
        self._chunking_strategy = chunking_strategy

    @classmethod
    def from_dict(cls, dikt) -> 'CreateVectorStoreFileBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateVectorStoreFileBatchRequest of this CreateVectorStoreFileBatchRequest.  # noqa: E501
        :rtype: CreateVectorStoreFileBatchRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_ids(self) -> List[str]:
        """Gets the file_ids of this CreateVectorStoreFileBatchRequest.

        A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.  # noqa: E501

        :return: The file_ids of this CreateVectorStoreFileBatchRequest.
        :rtype: List[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids: List[str]):
        """Sets the file_ids of this CreateVectorStoreFileBatchRequest.

        A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.  # noqa: E501

        :param file_ids: The file_ids of this CreateVectorStoreFileBatchRequest.
        :type file_ids: List[str]
        """
        if file_ids is None:
            raise ValueError("Invalid value for `file_ids`, must not be `None`")  # noqa: E501
        if file_ids is not None and len(file_ids) > 500:
            raise ValueError("Invalid value for `file_ids`, number of items must be less than or equal to `500`")  # noqa: E501
        if file_ids is not None and len(file_ids) < 1:
            raise ValueError("Invalid value for `file_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._file_ids = file_ids

    @property
    def chunking_strategy(self) -> ChunkingStrategyRequestParam:
        """Gets the chunking_strategy of this CreateVectorStoreFileBatchRequest.


        :return: The chunking_strategy of this CreateVectorStoreFileBatchRequest.
        :rtype: ChunkingStrategyRequestParam
        """
        return self._chunking_strategy

    @chunking_strategy.setter
    def chunking_strategy(self, chunking_strategy: ChunkingStrategyRequestParam):
        """Sets the chunking_strategy of this CreateVectorStoreFileBatchRequest.


        :param chunking_strategy: The chunking_strategy of this CreateVectorStoreFileBatchRequest.
        :type chunking_strategy: ChunkingStrategyRequestParam
        """

        self._chunking_strategy = chunking_strategy
