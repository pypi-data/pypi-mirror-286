from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.other_chunking_strategy_response_param import \
    OtherChunkingStrategyResponseParam  # noqa: E501
from timestep.api.openai.v1.models.static_chunking_strategy import \
    StaticChunkingStrategy  # noqa: E501
from timestep.api.openai.v1.models.static_chunking_strategy_response_param import \
    StaticChunkingStrategyResponseParam  # noqa: E501


class VectorStoreFileObjectChunkingStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, static=None):  # noqa: E501
        """VectorStoreFileObjectChunkingStrategy - a model defined in OpenAPI

        :param type: The type of this VectorStoreFileObjectChunkingStrategy.  # noqa: E501
        :type type: str
        :param static: The static of this VectorStoreFileObjectChunkingStrategy.  # noqa: E501
        :type static: StaticChunkingStrategy
        """
        self.openapi_types = {
            'type': str,
            'static': StaticChunkingStrategy
        }

        self.attribute_map = {
            'type': 'type',
            'static': 'static'
        }

        self._type = type
        self._static = static

    @classmethod
    def from_dict(cls, dikt) -> 'VectorStoreFileObjectChunkingStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VectorStoreFileObject_chunking_strategy of this VectorStoreFileObjectChunkingStrategy.  # noqa: E501
        :rtype: VectorStoreFileObjectChunkingStrategy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this VectorStoreFileObjectChunkingStrategy.

        Always `static`.  # noqa: E501

        :return: The type of this VectorStoreFileObjectChunkingStrategy.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this VectorStoreFileObjectChunkingStrategy.

        Always `static`.  # noqa: E501

        :param type: The type of this VectorStoreFileObjectChunkingStrategy.
        :type type: str
        """
        allowed_values = ["static", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def static(self) -> StaticChunkingStrategy:
        """Gets the static of this VectorStoreFileObjectChunkingStrategy.


        :return: The static of this VectorStoreFileObjectChunkingStrategy.
        :rtype: StaticChunkingStrategy
        """
        return self._static

    @static.setter
    def static(self, static: StaticChunkingStrategy):
        """Sets the static of this VectorStoreFileObjectChunkingStrategy.


        :param static: The static of this VectorStoreFileObjectChunkingStrategy.
        :type static: StaticChunkingStrategy
        """
        if static is None:
            raise ValueError("Invalid value for `static`, must not be `None`")  # noqa: E501

        self._static = static
