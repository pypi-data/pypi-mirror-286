from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from timestep.api.openai.v1 import util
from timestep.api.openai.v1.models.base_model import Model
from timestep.api.openai.v1.models.message_delta_object_delta_content_inner import \
    MessageDeltaObjectDeltaContentInner  # noqa: E501


class MessageDeltaObjectDelta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role=None, content=None):  # noqa: E501
        """MessageDeltaObjectDelta - a model defined in OpenAPI

        :param role: The role of this MessageDeltaObjectDelta.  # noqa: E501
        :type role: str
        :param content: The content of this MessageDeltaObjectDelta.  # noqa: E501
        :type content: List[MessageDeltaObjectDeltaContentInner]
        """
        self.openapi_types = {
            'role': str,
            'content': List[MessageDeltaObjectDeltaContentInner]
        }

        self.attribute_map = {
            'role': 'role',
            'content': 'content'
        }

        self._role = role
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'MessageDeltaObjectDelta':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MessageDeltaObject_delta of this MessageDeltaObjectDelta.  # noqa: E501
        :rtype: MessageDeltaObjectDelta
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self) -> str:
        """Gets the role of this MessageDeltaObjectDelta.

        The entity that produced the message. One of `user` or `assistant`.  # noqa: E501

        :return: The role of this MessageDeltaObjectDelta.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this MessageDeltaObjectDelta.

        The entity that produced the message. One of `user` or `assistant`.  # noqa: E501

        :param role: The role of this MessageDeltaObjectDelta.
        :type role: str
        """
        allowed_values = ["user", "assistant"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def content(self) -> List[MessageDeltaObjectDeltaContentInner]:
        """Gets the content of this MessageDeltaObjectDelta.

        The content of the message in array of text and/or images.  # noqa: E501

        :return: The content of this MessageDeltaObjectDelta.
        :rtype: List[MessageDeltaObjectDeltaContentInner]
        """
        return self._content

    @content.setter
    def content(self, content: List[MessageDeltaObjectDeltaContentInner]):
        """Sets the content of this MessageDeltaObjectDelta.

        The content of the message in array of text and/or images.  # noqa: E501

        :param content: The content of this MessageDeltaObjectDelta.
        :type content: List[MessageDeltaObjectDeltaContentInner]
        """

        self._content = content
