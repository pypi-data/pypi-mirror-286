[project]
authors = [
    { name = "Asher Norland", email = "asher.norland@synodic.software" },
]
dependencies = []
description = "Synodic python utility library"
dynamic = []
name = "synodic-utilities"
readme = "README.md"
requires-python = ">=3.12"
version = "0.1.1.dev9"

[project.license]
text = "MIT"

[project.license-files]
paths = [
    "LICENSE.md",
]

[project.urls]
homepage = "https://github.com/Synodic-Software/Synodic-Utilities"
repository = "https://github.com/Synodic-Software/Synodic-Utilities"

[tool.pdm.options]
update = [
    "--update-all",
]

[tool.pdm.version]
source = "scm"

[tool.pdm.dev-dependencies]
lint = [
    "black>= 24.4.0",
    "isort>=5.12.0",
    "mypy>=1.11.0",
    "pylint>=3.2.6",
]
test = [
    "pytest>=8.1.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
]

[tool.pdm.scripts.analyze]
shell = "pylint --verbose synodic_utilities tests"

[tool.pdm.scripts.format]
shell = "black --check --verbose ."

[tool.pdm.scripts.lint]
composite = [
    "analyze",
    "format",
    "sort-imports",
    "type-check",
]

[tool.pdm.scripts.sort-imports]
shell = "isort --check-only --diff --verbose ."

[tool.pdm.scripts.test]
shell = "pytest --cov=synodic_utilities --verbose tests"

[tool.pdm.scripts.type-check]
shell = "mypy ."

[tool.pytest.ini_options]
log_cli = true
testpaths = [
    "tests",
]

[tool.black]
line-length = 120
preview = true

[tool.isort]
profile = "black"
skip_gitignore = true

[tool.mypy]
exclude = "__pypackages__"
strict = true

[tool.pylint.MAIN]
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
    "pylint.extensions.docstyle",
    "pylint.extensions.docparams",
    "pylint.extensions.private_import",
    "pylint.extensions.bad_builtin",
]

[tool.pylint.format]
max-line-length = "120"

[tool.pylint.parameter_documentation]
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
default-docstring-type = "google"

[tool.coverage.report]
skip_empty = true

[build-system]
build-backend = "pdm.backend"
requires = [
    "pdm-backend",
]
