#!/usr/bin/env python3
import argparse
import logging
import sys
import datetime
from somanet_test_suite.hardware_description_builder import build_hardware_description_json as hdb

parser = argparse.ArgumentParser(
    description='Build the JSON stack description file for flashing stack info to the stack. Optionally add the --skip_flash argument to disable flashing to the board.')

d_component = {"metavar":  ('NAME', 'VERSION', 'SERIAL_NUMBER'),
               "required": False,
               "type":     str,
               "nargs":    3,
               "action":   'append',
               "help":     'name, revision <letter>.<digit>, and serial number of a component.'}

mxg = parser.add_mutually_exclusive_group()

mxg.add_argument('-f', '--flash',
                 required=False,
                 type=str,
                 help='After creating the file, flash it to the device. Argument is filesystem unlock password.')

mxg.add_argument('-p', '--postfix',
                 required=False,
                 action='store_true',
                 help='Append S/N to file name')

parser.add_argument('-o', '--old_stack_info',
                    required=False,
                    action='store_true',
                    help='Create deprecated stack_info.json')

parser.add_argument('-hd', '--hardware_description',
                    required=False,
                    action='store_true',
                    help='Create .hardware_description')

parser.add_argument('-a', '--assembly',
                    metavar=('SERIAL_NUMBER', 'NAME', 'ID', 'VERSION'),
                    required=False,
                    type=str,
                    nargs=4,
                    help='serial number, name, id, and version <letter>.<digit> of the assembly')

parser.add_argument('-ac', '--assembly_components',
                    **d_component)

parser.add_argument('-d', '--device',
                    # metavar=('SERIAL_NUMBER', 'MAC', 'NAME', 'ID', 'VERSION'),
                    required=False,
                    type=str,
                    nargs='+',
                    help='serial number, MAC address, [name, id, version <letter>.<digit>] of the device. You need all arguments for hardware_description')

parser.add_argument('-dc', '--device_components',
                    **d_component)

args = parser.parse_args()

if not len(sys.argv) > 1:
    parser.print_help()
    parser.error("No arguments provided")

if args.device and not len(args.device) in (2, 5):
    parser.error('Wrong amount of arguments for "--device": "SERIAL_NUMBER", "MAC", ["NAME", "ID", "VERSION"]. You need all arguments for hardware_description')

postfix = args.device[0] if args.postfix else None

#
# Configure the logger for both console and file output.
#

if not args.hardware_description and not args.old_stack_info:
    args.hardware_description = True
    args.old_stack_info = True

if args.hardware_description:
    build_hw = hdb.BuildHardwareDescription()

    ch_console = logging.StreamHandler()
    ch_file = logging.FileHandler(build_hw.file_name[1:] + "_" + args.device[0] + '.log')
    logging.basicConfig(
        format='[%(levelname)s] %(message)s',
        level=logging.DEBUG,
        handlers=[
            ch_file,
            ch_console
        ])

    logging.info("Started on " + str(datetime.date.today())
                 + " at " + datetime.datetime.now().time().strftime("%H:%M:%S"))
    logging.info("Logging to " + ch_file.baseFilename)

    res_assembly = not args.assembly

    if args.assembly:
        res_assembly = build_hw.set_assembly(
            name=args.assembly[1],
            id=args.assembly[2],
            version=args.assembly[3],
            sn=args.assembly[0],
            components=args.assembly_components,
        )
    res_device = build_hw.set_device(
        name=args.device[2],
        id=args.device[3],
        version=args.device[4],
        sn=args.device[0],
        mac=args.device[1],
        components=args.device_components
    )

    if res_assembly and res_device:
        build_hw.generate(postfix)

        if args.flash:
            build_hw.flash(args.flash)
        else:
            logging.warning("The file was created but not flashed to the board. Remove the --skip_flash and the --postfix argument if you want that.")

if args.old_stack_info:
    ch_console = logging.StreamHandler()
    ch_file = logging.FileHandler("stack_info_" + args.device[0] + '.log')
    logging.basicConfig(
        format='[%(levelname)s] %(message)s',
        level=logging.DEBUG,
        handlers=[
            ch_file,
            ch_console
        ])

    logging.info('')
    logging.info("####### DEPRECATED! PLEASE USE IN FUTURE HARDWARE_DESCRIPTION FILE ##############")
    logging.info('')
    logging.info("Started on " + str(datetime.date.today())
                 + " at " + datetime.datetime.now().time().strftime("%H:%M:%S"))
    logging.info("Logging to " + ch_file.baseFilename)

    jinfo = hdb.JSONInfo(args.device[1], args.device[0], *args.device_components)
    jinfo.generate(args.skip_flash, postfix)
