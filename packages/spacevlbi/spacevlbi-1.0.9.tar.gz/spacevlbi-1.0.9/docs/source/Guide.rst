Guide
=====

.. _installation:

Installation
------------

The latest version is available on 'PyPi <https://pypi.org/project/spacevlbi/>'.
Ensure that pip is installed and run the following command:

.. code-block:: console

   pip install spacevlbi
   
Installing with pip will install/update all of the required libraries 
automatically ('numpy <http://www.numpy.org/>', 'poliastro 
<https://www.poliastro.space/>', 'matplotlib <http://www.matplotlib.org/>'', 
'astropy <http://www.astropy.org/>').

.. _introduction:

Introduction
------------

**spacevlbi** relies on creation of a number of key class objects and execution
of the ``TimeLoop()`` function to conduct a simulation of a space VLBI mission.

The ``SpaceTelescope`` class enables an Earth-orbiting space telescope to be 
modelled, including a range of its key components which can affect when
observations can take place (see the :ref:`spacetelescope` and :ref:`constraints`
sections below).

The ``GroundTelescope`` class enables a ground-based radio antenna to be
modelled so that ground-space VLBI baselines can be simulated (see the 
:ref:`groundtelescope` section below for more information).

The ``Ground Station`` class enables a ground-based station for space telescope
telemetry, tracking and control (TT&C) to be modelled. This is useful for
calculating the impact of a number of functional constraints (see the 
:ref:`groundstation` and :ref:`constraints` sections below).

To model a purely space-based VLBI mission, two or more ``SpaceTelescope``
objects must be created. To model a ground-space VLBI mission, two or more
``SpaceTelescope`` and ``GroundTelescope`` objects must be created. 
``GroundStation`` objects are not mandatory in order to run a simulation but
are required for inclusion of some of the functional constraints.

Once the desired VLBI array has been defined by creating objects of the classes
described above, the ``TimeLoop()`` function can be executed to run the 
simulation over a defined time period and with a specific step size. At each
time step, the ``TimeLoop()`` function:

    1. Propagates space telescope(s) orbit
    2. Propagates space telescope(s) attitude
    3. Calculates Moon and Sun positions
    4. Calculates range and elevation from ground station(s) to space telescopes(s)
    (if ground stations are modelled)
    5. Calculates whether any functional constraints are prohibiting observations
    6. Calculates the baselines and subsequent (u,v) coverage generated by the 
    array of a specific source (or for a range of sources across the celestial
    sphere if the ``allsky`` parameter is set to 1 in the execution of 
    ``TimeLoop()``)
    
Once the ``TimeLoop()`` function has finished executing, the results of the
simulation are returned within the ``SpaceTelescope``, ``GroundTelescope`` and
``GroundStation`` objects. A number of Figure types are then available to the 
user to plot key results:

    * ``OrbitPlot()`` - Plot of the space telescope orbits about the Earth
    * ``UvPlot()`` - Plot of the (u,v) coverage achieved by the array, including the
    impact of any functional constraints modelled
    * ``AttitudeSphere()`` - Plot of a specified space telescope's attitude 
    sphere in the body-fixed frame including Sun, Earth and Moon positions 
    throughout the simulation and the positions of any spacecraft components 
    that have been modelled
    * ``SolarPanelIncidence()`` - Plot of the angle between the Sun and the
    spacecraft's panel normal vectors throughout the simulation
    * ``GroundStationElevation()`` - Plot of the elevation angle from each 
    modelled ground station to a specified space telescope throughout the
    simulation

Provided in the Examples folder is the script ``ExampleSetup.py``. This script 
shows how the package can be used to model a VLBI array with a single space 
element. This example is based upon the preliminary concept for the 
'Black Hole Explorer (BHEX)' <https://www.blackholeexplorer.org/>' mission. 
The script ``ExampleSpaceTelescope.py`` shows how an object of the 
SpaceTelescope class can be defined.

.. _spacetelescope:
Space Telescope
---------------

.. _radiopayload:
Radio Payload
~~~~~~~~~~~~~

.. _startracker:
Star Tracker
~~~~~~~~~~~~

.. _radiator:
Radiator
~~~~~~~~

.. _solarpanel:
Solar Panel
~~~~~~~~~~~

.. _commssystem:
Communication System
~~~~~~~~~~~~~~~~~~~~

.. _groundtelescope:
Ground Telescope
----------------

.. _groundstation:
Ground Station
--------------

.. _orbitprop:
Orbit Propagation
-----------------

.. _attitudeprop:
Attitude Propagation
--------------------

.. _constraints:
Functional Constraints
----------------------

.. _optimisation:
Optimisation
------------
