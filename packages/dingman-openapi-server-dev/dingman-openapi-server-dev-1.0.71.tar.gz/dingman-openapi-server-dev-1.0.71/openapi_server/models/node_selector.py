# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.node_selector_term import NodeSelectorTerm
from openapi_server import util

from openapi_server.models.node_selector_term import NodeSelectorTerm  # noqa: E501

class NodeSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_selector_terms=None):  # noqa: E501
        """NodeSelector - a model defined in OpenAPI

        :param node_selector_terms: The node_selector_terms of this NodeSelector.  # noqa: E501
        :type node_selector_terms: List[NodeSelectorTerm]
        """
        self.openapi_types = {
            'node_selector_terms': List[NodeSelectorTerm]
        }

        self.attribute_map = {
            'node_selector_terms': 'node_selector_terms'
        }

        self._node_selector_terms = node_selector_terms

    @classmethod
    def from_dict(cls, dikt) -> 'NodeSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeSelector of this NodeSelector.  # noqa: E501
        :rtype: NodeSelector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_selector_terms(self):
        """Gets the node_selector_terms of this NodeSelector.


        :return: The node_selector_terms of this NodeSelector.
        :rtype: List[NodeSelectorTerm]
        """
        return self._node_selector_terms

    @node_selector_terms.setter
    def node_selector_terms(self, node_selector_terms):
        """Sets the node_selector_terms of this NodeSelector.


        :param node_selector_terms: The node_selector_terms of this NodeSelector.
        :type node_selector_terms: List[NodeSelectorTerm]
        """

        self._node_selector_terms = node_selector_terms
