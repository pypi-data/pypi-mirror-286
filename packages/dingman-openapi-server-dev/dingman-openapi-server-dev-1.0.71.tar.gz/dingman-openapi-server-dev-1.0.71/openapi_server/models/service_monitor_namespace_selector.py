# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ServiceMonitorNamespaceSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_names=None, any=None):  # noqa: E501
        """ServiceMonitorNamespaceSelector - a model defined in OpenAPI

        :param match_names: The match_names of this ServiceMonitorNamespaceSelector.  # noqa: E501
        :type match_names: List[str]
        :param any: The any of this ServiceMonitorNamespaceSelector.  # noqa: E501
        :type any: bool
        """
        self.openapi_types = {
            'match_names': List[str],
            'any': bool
        }

        self.attribute_map = {
            'match_names': 'match_names',
            'any': 'any'
        }

        self._match_names = match_names
        self._any = any

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceMonitorNamespaceSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceMonitor_namespace_selector of this ServiceMonitorNamespaceSelector.  # noqa: E501
        :rtype: ServiceMonitorNamespaceSelector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_names(self):
        """Gets the match_names of this ServiceMonitorNamespaceSelector.

        matchNames is a list of namespace names. The NamespaceSelector matches namespaces based on the names selected by this list.  # noqa: E501

        :return: The match_names of this ServiceMonitorNamespaceSelector.
        :rtype: List[str]
        """
        return self._match_names

    @match_names.setter
    def match_names(self, match_names):
        """Sets the match_names of this ServiceMonitorNamespaceSelector.

        matchNames is a list of namespace names. The NamespaceSelector matches namespaces based on the names selected by this list.  # noqa: E501

        :param match_names: The match_names of this ServiceMonitorNamespaceSelector.
        :type match_names: List[str]
        """

        self._match_names = match_names

    @property
    def any(self):
        """Gets the any of this ServiceMonitorNamespaceSelector.

        any matches any selected namespaces. If true, then none of the other match fields can be set.  # noqa: E501

        :return: The any of this ServiceMonitorNamespaceSelector.
        :rtype: bool
        """
        return self._any

    @any.setter
    def any(self, any):
        """Sets the any of this ServiceMonitorNamespaceSelector.

        any matches any selected namespaces. If true, then none of the other match fields can be set.  # noqa: E501

        :param any: The any of this ServiceMonitorNamespaceSelector.
        :type any: bool
        """

        self._any = any
