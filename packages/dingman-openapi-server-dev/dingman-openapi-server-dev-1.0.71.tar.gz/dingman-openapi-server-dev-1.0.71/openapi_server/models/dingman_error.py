# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DingmanError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, error_type=None, error_code=None, reason=None):  # noqa: E501
        """DingmanError - a model defined in OpenAPI

        :param status: The status of this DingmanError.  # noqa: E501
        :type status: str
        :param error_type: The error_type of this DingmanError.  # noqa: E501
        :type error_type: str
        :param error_code: The error_code of this DingmanError.  # noqa: E501
        :type error_code: int
        :param reason: The reason of this DingmanError.  # noqa: E501
        :type reason: str
        """
        self.openapi_types = {
            'status': str,
            'error_type': str,
            'error_code': int,
            'reason': str
        }

        self.attribute_map = {
            'status': 'status',
            'error_type': 'error_type',
            'error_code': 'error_code',
            'reason': 'reason'
        }

        self._status = status
        self._error_type = error_type
        self._error_code = error_code
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt) -> 'DingmanError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DingmanError of this DingmanError.  # noqa: E501
        :rtype: DingmanError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this DingmanError.

        status of the operation  # noqa: E501

        :return: The status of this DingmanError.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DingmanError.

        status of the operation  # noqa: E501

        :param status: The status of this DingmanError.
        :type status: str
        """

        self._status = status

    @property
    def error_type(self):
        """Gets the error_type of this DingmanError.

        type of the error  # noqa: E501

        :return: The error_type of this DingmanError.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this DingmanError.

        type of the error  # noqa: E501

        :param error_type: The error_type of this DingmanError.
        :type error_type: str
        """

        self._error_type = error_type

    @property
    def error_code(self):
        """Gets the error_code of this DingmanError.

        internal error code  # noqa: E501

        :return: The error_code of this DingmanError.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this DingmanError.

        internal error code  # noqa: E501

        :param error_code: The error_code of this DingmanError.
        :type error_code: int
        """

        self._error_code = error_code

    @property
    def reason(self):
        """Gets the reason of this DingmanError.

        explanation message returned from the server  # noqa: E501

        :return: The reason of this DingmanError.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DingmanError.

        explanation message returned from the server  # noqa: E501

        :param reason: The reason of this DingmanError.
        :type reason: str
        """

        self._reason = reason
