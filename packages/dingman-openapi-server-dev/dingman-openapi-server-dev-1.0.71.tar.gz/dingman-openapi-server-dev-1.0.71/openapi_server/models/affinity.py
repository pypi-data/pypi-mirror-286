# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.node_affinity import NodeAffinity
from openapi_server.models.pod_affinity import PodAffinity
from openapi_server.models.pod_anti_affinity import PodAntiAffinity
from openapi_server import util

from openapi_server.models.node_affinity import NodeAffinity  # noqa: E501
from openapi_server.models.pod_affinity import PodAffinity  # noqa: E501
from openapi_server.models.pod_anti_affinity import PodAntiAffinity  # noqa: E501

class Affinity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_affinity=None, pod_affinity=None, pod_anti_affinity=None):  # noqa: E501
        """Affinity - a model defined in OpenAPI

        :param node_affinity: The node_affinity of this Affinity.  # noqa: E501
        :type node_affinity: NodeAffinity
        :param pod_affinity: The pod_affinity of this Affinity.  # noqa: E501
        :type pod_affinity: PodAffinity
        :param pod_anti_affinity: The pod_anti_affinity of this Affinity.  # noqa: E501
        :type pod_anti_affinity: PodAntiAffinity
        """
        self.openapi_types = {
            'node_affinity': NodeAffinity,
            'pod_affinity': PodAffinity,
            'pod_anti_affinity': PodAntiAffinity
        }

        self.attribute_map = {
            'node_affinity': 'node_affinity',
            'pod_affinity': 'pod_affinity',
            'pod_anti_affinity': 'pod_anti_affinity'
        }

        self._node_affinity = node_affinity
        self._pod_affinity = pod_affinity
        self._pod_anti_affinity = pod_anti_affinity

    @classmethod
    def from_dict(cls, dikt) -> 'Affinity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Affinity of this Affinity.  # noqa: E501
        :rtype: Affinity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_affinity(self):
        """Gets the node_affinity of this Affinity.


        :return: The node_affinity of this Affinity.
        :rtype: NodeAffinity
        """
        return self._node_affinity

    @node_affinity.setter
    def node_affinity(self, node_affinity):
        """Sets the node_affinity of this Affinity.


        :param node_affinity: The node_affinity of this Affinity.
        :type node_affinity: NodeAffinity
        """

        self._node_affinity = node_affinity

    @property
    def pod_affinity(self):
        """Gets the pod_affinity of this Affinity.


        :return: The pod_affinity of this Affinity.
        :rtype: PodAffinity
        """
        return self._pod_affinity

    @pod_affinity.setter
    def pod_affinity(self, pod_affinity):
        """Sets the pod_affinity of this Affinity.


        :param pod_affinity: The pod_affinity of this Affinity.
        :type pod_affinity: PodAffinity
        """

        self._pod_affinity = pod_affinity

    @property
    def pod_anti_affinity(self):
        """Gets the pod_anti_affinity of this Affinity.


        :return: The pod_anti_affinity of this Affinity.
        :rtype: PodAntiAffinity
        """
        return self._pod_anti_affinity

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, pod_anti_affinity):
        """Sets the pod_anti_affinity of this Affinity.


        :param pod_anti_affinity: The pod_anti_affinity of this Affinity.
        :type pod_anti_affinity: PodAntiAffinity
        """

        self._pod_anti_affinity = pod_anti_affinity
