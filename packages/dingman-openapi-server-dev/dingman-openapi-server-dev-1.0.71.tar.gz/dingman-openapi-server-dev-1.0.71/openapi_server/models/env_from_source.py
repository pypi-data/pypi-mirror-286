# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EnvFromSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, optional=None, source_type=None):  # noqa: E501
        """EnvFromSource - a model defined in OpenAPI

        :param name: The name of this EnvFromSource.  # noqa: E501
        :type name: str
        :param optional: The optional of this EnvFromSource.  # noqa: E501
        :type optional: bool
        :param source_type: The source_type of this EnvFromSource.  # noqa: E501
        :type source_type: str
        """
        self.openapi_types = {
            'name': str,
            'optional': bool,
            'source_type': str
        }

        self.attribute_map = {
            'name': 'name',
            'optional': 'optional',
            'source_type': 'source_type'
        }

        self._name = name
        self._optional = optional
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt) -> 'EnvFromSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnvFromSource of this EnvFromSource.  # noqa: E501
        :rtype: EnvFromSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this EnvFromSource.


        :return: The name of this EnvFromSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvFromSource.


        :param name: The name of this EnvFromSource.
        :type name: str
        """

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this EnvFromSource.


        :return: The optional of this EnvFromSource.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this EnvFromSource.


        :param optional: The optional of this EnvFromSource.
        :type optional: bool
        """

        self._optional = optional

    @property
    def source_type(self):
        """Gets the source_type of this EnvFromSource.


        :return: The source_type of this EnvFromSource.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this EnvFromSource.


        :param source_type: The source_type of this EnvFromSource.
        :type source_type: str
        """
        allowed_values = ["ConfigMap", "Secret"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
