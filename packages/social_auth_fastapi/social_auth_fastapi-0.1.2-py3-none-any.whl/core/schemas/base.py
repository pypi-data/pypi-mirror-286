#!/usr/bin/env python3
from pydantic import BaseModel, ConfigDict, EmailStr, validate_email

from core.common.messages import messages as _

# The custom validation error message does not contain the expected content of the validation
# (that is, the input content). Please refer to the following link for the supported expected content fields.
# https://github.com/pydantic/pydantic-core/blob/a5cb7382643415b716b1a7a5392914e50f726528/tests/test_errors.py#L266
# To replace the expected content field, refer to the following link
# https://github.com/pydantic/pydantic/blob/caa78016433ec9b16a973f92f187a7b6bfde6cb5/docs/errors/errors.md?plain=1#L232
CUSTOM_VALIDATION_ERROR_MESSAGES = {
    'arguments_type': _('Parameter type input error'),
    'assertion_error': _('Assertion execution error'),
    'bool_parsing': _('Boolean input parsing error'),
    'bool_type': _('Boolean value type input error'),
    'bytes_too_long': _('The input byte length is too long'),
    'bytes_too_short': _('The input byte length is too short'),
    'bytes_type': _('Bytes type input error'),
    'callable_type': _('Incorrect callable object type'),
    'dataclass_exact_type': _('Data class instance type input error'),
    'dataclass_type': _('Data class type input error'),
    'date_from_datetime_inexact': _('Date component input is non-zero'),
    'date_from_datetime_parsing': _('Date input parsing error'),
    'date_future': _('Date input is not in future tense'),
    'date_parsing': _('Date input validation error'),
    'date_past': _('Date input is not past tense'),
    'date_type': _('Date type input error'),
    'datetime_future': _('Date time input is not a future time'),
    'datetime_object_invalid': _('The date and time input object is invalid'),
    'datetime_parsing': _('Datetime input parsing error'),
    'datetime_past': _('Date time input is not in the past time'),
    'datetime_type': _('Datetime type input error'),
    'decimal_max_digits': _('Enter too many decimal digits'),
    'decimal_max_places': _('Wrong input of decimal places'),
    'decimal_parsing': _('Decimal input parsing error'),
    'decimal_type': _('Decimal type input error'),
    'decimal_whole_digits': _('Wrong number of decimal places entered'),
    'dict_type': _('Dictionary type input error'),
    'enum': _('Enumeration member input error, {expected} allowed'),
    'extra_forbidden': _('Forbid extra fields to be entered'),
    'finite_number': _('Input error of finite value'),
    'float_parsing': _('Floating point input parsing error'),
    'float_type': _('Floating point type input error'),
    'frozen_field': _('Input error in frozen field'),
    'frozen_instance': _('Frozen instance prohibits modification'),
    'frozen_set_type': _('Frozen type prohibits input'),
    'get_attribute_error': _('Get attribute error'),
    'greater_than': _('The input value is too large'),
    'greater_than_equal': _('The input value is too large or equal'),
    'int_from_float': _('Integer type input error'),
    'int_parsing': _('Integer input parsing error'),
    'int_parsing_size': _('Integer input parsing length error'),
    'int_type': _('Integer type input error'),
    'invalid_key': _('Enter invalid key value'),
    'is_instance_of': _('Type instance input error'),
    'is_subclass_of': _('Type subclass input error'),
    'iterable_type': _('Iterable type input error'),
    'iteration_error': _('Iteration value input error'),
    'json_invalid': _('JSON string input error'),
    'json_type': _('JSON type input error'),
    'less_than': _('The input value is too small'),
    'less_than_equal': _('The input value is too small or equal'),
    'list_type': _('List type input error'),
    'literal_error': _('Literal value input error'),
    'mapping_type': _('Mapping type input error'),
    'missing': _('Missing required fields'),
    'missing_argument': _('Missing argument'),
    'missing_keyword_only_argument': _('Missing keyword argument'),
    'missing_positional_only_argument': _('Missing positional argument'),
    'model_attributes_type': _('Model attribute type input error'),
    'model_type': _('Model instance input error'),
    'multiple_argument_values': _('Too many parameter values entered'),
    'multiple_of': _('The input value is not a multiple'),
    'no_such_attribute': _('Assign invalid attribute value'),
    'none_required': _('The input value must be None'),
    'recursion_loop': _('Input loop assignment'),
    'set_type': _('Set type input error'),
    'string_pattern_mismatch': _('String constraint pattern input does not match'),
    'string_sub_type': _('String subtype (non-strict instance) input error'),
    'string_too_long': _('String input is too long'),
    'string_too_short': _('String input is too short'),
    'string_type': _('String type input error'),
    'string_unicode': _('String input is not Unicode'),
    'time_delta_parsing': _('Time difference input parsing error'),
    'time_delta_type': _('Time difference type input error'),
    'time_parsing': _('Time input parsing error'),
    'time_type': _('Time type input error'),
    'timezone_aware': _('Missing time zone input information'),
    'timezone_naive': _('Prohibit time zone input information'),
    'too_long': _('Input too long'),
    'too_short': _('Input too short'),
    'tuple_type': _('Tuple type input error'),
    'unexpected_keyword_argument': _('Enter unexpected keyword argument'),
    'unexpected_positional_argument': _('Input unexpected positional argument'),
    'union_tag_invalid': _('Union type literal input error'),
    'union_tag_not_found': _('Union type parameter input not found'),
    'url_parsing': _('URL input parsing error'),
    'url_scheme': _('URL input scheme error'),
    'url_syntax_violation': _('URL input syntax error'),
    'url_too_long': _('URL input is too long'),
    'url_type': _('URL type input error'),
    'uuid_parsing': _('UUID input parsing error'),
    'uuid_type': _('UUID type input error'),
    'uuid_version': _('UUID version type input error'),
    'value_error': _('Value input error'),
}

CUSTOM_USAGE_ERROR_MESSAGES = {
    'class-not-fully-defined': _('Class attribute type is not fully defined'),
    'custom-json-schema': _('__modify_schema__ method has been deprecated in V2'),
    'decorator-missing-field': _('Invalid field validator defined'),
    'discriminator-no-field': _('The discriminator fields are not all defined'),
    'discriminator-alias-type': _('The discriminator field is defined using a non-string type'),
    'discriminator-needs-literal': _('The discriminator field needs to be defined using literal values'),
    'discriminator-alias': _('Discriminator field alias definition is inconsistent'),
    'discriminator-validator': _('The discriminator field prohibits defining field validators'),
    'model-field-overridden': _('Untyped fields prohibit overriding'),
    'model-field-missing-annotation': _('Missing field type definition'),
    'config-both': _('Repeatly define configuration items'),
    'removed-kwargs': _('Calling removed keyword configuration parameters'),
    'invalid-for-json-schema': _('Invalid JSON type exists'),
    'base-model-instantiated': _('Prohibit instantiating the base model'),
    'undefined-annotation': _('Missing type definition'),
    'schema-for-unknown-type': _('Unknown type definition'),
    'create-model-field-definitions': _('Field definition error'),
    'create-model-config-base': _('Configuration item definition error'),
    'validator-no-fields': _('Field validator does not specify fields'),
    'validator-invalid-fields': _('Field validator field definition error'),
    'validator-instance-method': _('Field validator must be a class method'),
    'model-serializer-instance-method': _('The serializer must be an instance method'),
    'validator-v1-signature': _('V1 field validator error has been deprecated'),
    'validator-signature': _('Field validator signature error'),
    'field-serializer-signature': _('Field serializer signature cannot be recognized'),
    'model-serializer-signature': _('The model serializer signature cannot be recognized'),
    'multiple-field-serializers': _('Field serializers are repeatedly defined'),
    'invalid_annotated_type': _('Invalid type definition'),
    'type-adapter-config-unused': _('Type adapter configuration item definition error'),
    'root-model-extra': _('The root model is prohibited from defining additional fields'),
}


class CustomEmailStr(EmailStr):
    @classmethod
    def _validate(cls, __input_value: str) -> str:
        return None if __input_value == '' else validate_email(__input_value)[1]


class SchemaBase(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
