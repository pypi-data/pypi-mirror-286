# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetEnforcerGroupsResult',
    'AwaitableGetEnforcerGroupsResult',
    'get_enforcer_groups',
    'get_enforcer_groups_output',
]

@pulumi.output_type
class GetEnforcerGroupsResult:
    """
    A collection of values returned by getEnforcerGroups.
    """
    def __init__(__self__, admission_control=None, allow_kube_enforcer_audit=None, allowed_applications=None, allowed_labels=None, allowed_registries=None, antivirus_protection=None, aqua_version=None, audit_all=None, auto_copy_secrets=None, auto_discover_configure_registries=None, auto_discovery_enabled=None, auto_scan_discovered_images_running_containers=None, behavioral_engine=None, block_admission_control=None, commands=None, connected_count=None, container_activity_protection=None, container_antivirus_protection=None, description=None, disconnected_count=None, enforce=None, enforcer_image_name=None, forensics=None, gateway_address=None, gateway_name=None, gateways=None, group_id=None, high_vulns=None, host_assurance=None, host_behavioral_engine=None, host_forensics=None, host_network_protection=None, host_os=None, host_protection=None, host_user_protection=None, hosts_count=None, id=None, image_assurance=None, install_command=None, kube_bench_image_name=None, last_update=None, logical_name=None, low_vulns=None, med_vulns=None, micro_enforcer_certs_secrets_name=None, micro_enforcer_image_name=None, micro_enforcer_injection=None, micro_enforcer_secrets_name=None, neg_vulns=None, network_protection=None, orchestrators=None, pas_deployment_link=None, permission=None, risk_explorer_auto_discovery=None, runtime_policy_name=None, runtime_type=None, sync_host_images=None, syscall_enabled=None, token=None, type=None, user_access_control=None):
        if admission_control and not isinstance(admission_control, bool):
            raise TypeError("Expected argument 'admission_control' to be a bool")
        pulumi.set(__self__, "admission_control", admission_control)
        if allow_kube_enforcer_audit and not isinstance(allow_kube_enforcer_audit, bool):
            raise TypeError("Expected argument 'allow_kube_enforcer_audit' to be a bool")
        pulumi.set(__self__, "allow_kube_enforcer_audit", allow_kube_enforcer_audit)
        if allowed_applications and not isinstance(allowed_applications, list):
            raise TypeError("Expected argument 'allowed_applications' to be a list")
        pulumi.set(__self__, "allowed_applications", allowed_applications)
        if allowed_labels and not isinstance(allowed_labels, list):
            raise TypeError("Expected argument 'allowed_labels' to be a list")
        pulumi.set(__self__, "allowed_labels", allowed_labels)
        if allowed_registries and not isinstance(allowed_registries, list):
            raise TypeError("Expected argument 'allowed_registries' to be a list")
        pulumi.set(__self__, "allowed_registries", allowed_registries)
        if antivirus_protection and not isinstance(antivirus_protection, bool):
            raise TypeError("Expected argument 'antivirus_protection' to be a bool")
        pulumi.set(__self__, "antivirus_protection", antivirus_protection)
        if aqua_version and not isinstance(aqua_version, str):
            raise TypeError("Expected argument 'aqua_version' to be a str")
        pulumi.set(__self__, "aqua_version", aqua_version)
        if audit_all and not isinstance(audit_all, bool):
            raise TypeError("Expected argument 'audit_all' to be a bool")
        pulumi.set(__self__, "audit_all", audit_all)
        if auto_copy_secrets and not isinstance(auto_copy_secrets, bool):
            raise TypeError("Expected argument 'auto_copy_secrets' to be a bool")
        pulumi.set(__self__, "auto_copy_secrets", auto_copy_secrets)
        if auto_discover_configure_registries and not isinstance(auto_discover_configure_registries, bool):
            raise TypeError("Expected argument 'auto_discover_configure_registries' to be a bool")
        pulumi.set(__self__, "auto_discover_configure_registries", auto_discover_configure_registries)
        if auto_discovery_enabled and not isinstance(auto_discovery_enabled, bool):
            raise TypeError("Expected argument 'auto_discovery_enabled' to be a bool")
        pulumi.set(__self__, "auto_discovery_enabled", auto_discovery_enabled)
        if auto_scan_discovered_images_running_containers and not isinstance(auto_scan_discovered_images_running_containers, bool):
            raise TypeError("Expected argument 'auto_scan_discovered_images_running_containers' to be a bool")
        pulumi.set(__self__, "auto_scan_discovered_images_running_containers", auto_scan_discovered_images_running_containers)
        if behavioral_engine and not isinstance(behavioral_engine, bool):
            raise TypeError("Expected argument 'behavioral_engine' to be a bool")
        pulumi.set(__self__, "behavioral_engine", behavioral_engine)
        if block_admission_control and not isinstance(block_admission_control, bool):
            raise TypeError("Expected argument 'block_admission_control' to be a bool")
        pulumi.set(__self__, "block_admission_control", block_admission_control)
        if commands and not isinstance(commands, list):
            raise TypeError("Expected argument 'commands' to be a list")
        pulumi.set(__self__, "commands", commands)
        if connected_count and not isinstance(connected_count, int):
            raise TypeError("Expected argument 'connected_count' to be a int")
        pulumi.set(__self__, "connected_count", connected_count)
        if container_activity_protection and not isinstance(container_activity_protection, bool):
            raise TypeError("Expected argument 'container_activity_protection' to be a bool")
        pulumi.set(__self__, "container_activity_protection", container_activity_protection)
        if container_antivirus_protection and not isinstance(container_antivirus_protection, bool):
            raise TypeError("Expected argument 'container_antivirus_protection' to be a bool")
        pulumi.set(__self__, "container_antivirus_protection", container_antivirus_protection)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disconnected_count and not isinstance(disconnected_count, int):
            raise TypeError("Expected argument 'disconnected_count' to be a int")
        pulumi.set(__self__, "disconnected_count", disconnected_count)
        if enforce and not isinstance(enforce, bool):
            raise TypeError("Expected argument 'enforce' to be a bool")
        pulumi.set(__self__, "enforce", enforce)
        if enforcer_image_name and not isinstance(enforcer_image_name, str):
            raise TypeError("Expected argument 'enforcer_image_name' to be a str")
        pulumi.set(__self__, "enforcer_image_name", enforcer_image_name)
        if forensics and not isinstance(forensics, bool):
            raise TypeError("Expected argument 'forensics' to be a bool")
        pulumi.set(__self__, "forensics", forensics)
        if gateway_address and not isinstance(gateway_address, str):
            raise TypeError("Expected argument 'gateway_address' to be a str")
        pulumi.set(__self__, "gateway_address", gateway_address)
        if gateway_name and not isinstance(gateway_name, str):
            raise TypeError("Expected argument 'gateway_name' to be a str")
        pulumi.set(__self__, "gateway_name", gateway_name)
        if gateways and not isinstance(gateways, list):
            raise TypeError("Expected argument 'gateways' to be a list")
        pulumi.set(__self__, "gateways", gateways)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if high_vulns and not isinstance(high_vulns, int):
            raise TypeError("Expected argument 'high_vulns' to be a int")
        pulumi.set(__self__, "high_vulns", high_vulns)
        if host_assurance and not isinstance(host_assurance, bool):
            raise TypeError("Expected argument 'host_assurance' to be a bool")
        pulumi.set(__self__, "host_assurance", host_assurance)
        if host_behavioral_engine and not isinstance(host_behavioral_engine, bool):
            raise TypeError("Expected argument 'host_behavioral_engine' to be a bool")
        pulumi.set(__self__, "host_behavioral_engine", host_behavioral_engine)
        if host_forensics and not isinstance(host_forensics, bool):
            raise TypeError("Expected argument 'host_forensics' to be a bool")
        pulumi.set(__self__, "host_forensics", host_forensics)
        if host_network_protection and not isinstance(host_network_protection, bool):
            raise TypeError("Expected argument 'host_network_protection' to be a bool")
        pulumi.set(__self__, "host_network_protection", host_network_protection)
        if host_os and not isinstance(host_os, str):
            raise TypeError("Expected argument 'host_os' to be a str")
        pulumi.set(__self__, "host_os", host_os)
        if host_protection and not isinstance(host_protection, bool):
            raise TypeError("Expected argument 'host_protection' to be a bool")
        pulumi.set(__self__, "host_protection", host_protection)
        if host_user_protection and not isinstance(host_user_protection, bool):
            raise TypeError("Expected argument 'host_user_protection' to be a bool")
        pulumi.set(__self__, "host_user_protection", host_user_protection)
        if hosts_count and not isinstance(hosts_count, int):
            raise TypeError("Expected argument 'hosts_count' to be a int")
        pulumi.set(__self__, "hosts_count", hosts_count)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_assurance and not isinstance(image_assurance, bool):
            raise TypeError("Expected argument 'image_assurance' to be a bool")
        pulumi.set(__self__, "image_assurance", image_assurance)
        if install_command and not isinstance(install_command, str):
            raise TypeError("Expected argument 'install_command' to be a str")
        pulumi.set(__self__, "install_command", install_command)
        if kube_bench_image_name and not isinstance(kube_bench_image_name, str):
            raise TypeError("Expected argument 'kube_bench_image_name' to be a str")
        pulumi.set(__self__, "kube_bench_image_name", kube_bench_image_name)
        if last_update and not isinstance(last_update, int):
            raise TypeError("Expected argument 'last_update' to be a int")
        pulumi.set(__self__, "last_update", last_update)
        if logical_name and not isinstance(logical_name, str):
            raise TypeError("Expected argument 'logical_name' to be a str")
        pulumi.set(__self__, "logical_name", logical_name)
        if low_vulns and not isinstance(low_vulns, int):
            raise TypeError("Expected argument 'low_vulns' to be a int")
        pulumi.set(__self__, "low_vulns", low_vulns)
        if med_vulns and not isinstance(med_vulns, int):
            raise TypeError("Expected argument 'med_vulns' to be a int")
        pulumi.set(__self__, "med_vulns", med_vulns)
        if micro_enforcer_certs_secrets_name and not isinstance(micro_enforcer_certs_secrets_name, str):
            raise TypeError("Expected argument 'micro_enforcer_certs_secrets_name' to be a str")
        pulumi.set(__self__, "micro_enforcer_certs_secrets_name", micro_enforcer_certs_secrets_name)
        if micro_enforcer_image_name and not isinstance(micro_enforcer_image_name, str):
            raise TypeError("Expected argument 'micro_enforcer_image_name' to be a str")
        pulumi.set(__self__, "micro_enforcer_image_name", micro_enforcer_image_name)
        if micro_enforcer_injection and not isinstance(micro_enforcer_injection, bool):
            raise TypeError("Expected argument 'micro_enforcer_injection' to be a bool")
        pulumi.set(__self__, "micro_enforcer_injection", micro_enforcer_injection)
        if micro_enforcer_secrets_name and not isinstance(micro_enforcer_secrets_name, str):
            raise TypeError("Expected argument 'micro_enforcer_secrets_name' to be a str")
        pulumi.set(__self__, "micro_enforcer_secrets_name", micro_enforcer_secrets_name)
        if neg_vulns and not isinstance(neg_vulns, int):
            raise TypeError("Expected argument 'neg_vulns' to be a int")
        pulumi.set(__self__, "neg_vulns", neg_vulns)
        if network_protection and not isinstance(network_protection, bool):
            raise TypeError("Expected argument 'network_protection' to be a bool")
        pulumi.set(__self__, "network_protection", network_protection)
        if orchestrators and not isinstance(orchestrators, list):
            raise TypeError("Expected argument 'orchestrators' to be a list")
        pulumi.set(__self__, "orchestrators", orchestrators)
        if pas_deployment_link and not isinstance(pas_deployment_link, str):
            raise TypeError("Expected argument 'pas_deployment_link' to be a str")
        pulumi.set(__self__, "pas_deployment_link", pas_deployment_link)
        if permission and not isinstance(permission, str):
            raise TypeError("Expected argument 'permission' to be a str")
        pulumi.set(__self__, "permission", permission)
        if risk_explorer_auto_discovery and not isinstance(risk_explorer_auto_discovery, bool):
            raise TypeError("Expected argument 'risk_explorer_auto_discovery' to be a bool")
        pulumi.set(__self__, "risk_explorer_auto_discovery", risk_explorer_auto_discovery)
        if runtime_policy_name and not isinstance(runtime_policy_name, str):
            raise TypeError("Expected argument 'runtime_policy_name' to be a str")
        pulumi.set(__self__, "runtime_policy_name", runtime_policy_name)
        if runtime_type and not isinstance(runtime_type, str):
            raise TypeError("Expected argument 'runtime_type' to be a str")
        pulumi.set(__self__, "runtime_type", runtime_type)
        if sync_host_images and not isinstance(sync_host_images, bool):
            raise TypeError("Expected argument 'sync_host_images' to be a bool")
        pulumi.set(__self__, "sync_host_images", sync_host_images)
        if syscall_enabled and not isinstance(syscall_enabled, bool):
            raise TypeError("Expected argument 'syscall_enabled' to be a bool")
        pulumi.set(__self__, "syscall_enabled", syscall_enabled)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user_access_control and not isinstance(user_access_control, bool):
            raise TypeError("Expected argument 'user_access_control' to be a bool")
        pulumi.set(__self__, "user_access_control", user_access_control)

    @property
    @pulumi.getter(name="admissionControl")
    def admission_control(self) -> bool:
        """
        Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\\
        			* Block Non-Compliant Images\\
        			* Block Non-Compliant Workloads\\
        			* Block Unregistered Images\\
        			This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
        """
        return pulumi.get(self, "admission_control")

    @property
    @pulumi.getter(name="allowKubeEnforcerAudit")
    def allow_kube_enforcer_audit(self) -> bool:
        """
        Allow kube enforcer audit.
        """
        return pulumi.get(self, "allow_kube_enforcer_audit")

    @property
    @pulumi.getter(name="allowedApplications")
    def allowed_applications(self) -> Sequence[str]:
        """
        List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
        """
        return pulumi.get(self, "allowed_applications")

    @property
    @pulumi.getter(name="allowedLabels")
    def allowed_labels(self) -> Sequence[str]:
        """
        List of label names to allow on the hosts.
        """
        return pulumi.get(self, "allowed_labels")

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Sequence[str]:
        """
        List of registry names to allow on the hosts.
        """
        return pulumi.get(self, "allowed_registries")

    @property
    @pulumi.getter(name="antivirusProtection")
    def antivirus_protection(self) -> bool:
        """
        This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
        """
        return pulumi.get(self, "antivirus_protection")

    @property
    @pulumi.getter(name="aquaVersion")
    def aqua_version(self) -> str:
        """
        Aqua server version
        """
        return pulumi.get(self, "aqua_version")

    @property
    @pulumi.getter(name="auditAll")
    def audit_all(self) -> bool:
        """
        Agent will send extra audit messages to the server for success operations from inside the container (runtime).
        """
        return pulumi.get(self, "audit_all")

    @property
    @pulumi.getter(name="autoCopySecrets")
    def auto_copy_secrets(self) -> bool:
        """
        This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
        """
        return pulumi.get(self, "auto_copy_secrets")

    @property
    @pulumi.getter(name="autoDiscoverConfigureRegistries")
    def auto_discover_configure_registries(self) -> bool:
        """
        This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
        """
        return pulumi.get(self, "auto_discover_configure_registries")

    @property
    @pulumi.getter(name="autoDiscoveryEnabled")
    def auto_discovery_enabled(self) -> bool:
        """
        When this option is selected, the KubeEnforcer will discover workloads on its cluster.
        """
        return pulumi.get(self, "auto_discovery_enabled")

    @property
    @pulumi.getter(name="autoScanDiscoveredImagesRunningContainers")
    def auto_scan_discovered_images_running_containers(self) -> bool:
        """
        This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
        """
        return pulumi.get(self, "auto_scan_discovered_images_running_containers")

    @property
    @pulumi.getter(name="behavioralEngine")
    def behavioral_engine(self) -> bool:
        """
        If `Enabled`, detects suspicious activity in your containers and displays potential security threats in the Incidents and Audits pages.
        """
        return pulumi.get(self, "behavioral_engine")

    @property
    @pulumi.getter(name="blockAdmissionControl")
    def block_admission_control(self) -> bool:
        """
        This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
        """
        return pulumi.get(self, "block_admission_control")

    @property
    @pulumi.getter
    def commands(self) -> Sequence['outputs.GetEnforcerGroupsCommandResult']:
        """
        The installation command.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="connectedCount")
    def connected_count(self) -> int:
        """
        Number of connected enforcers in the enforcer group.
        """
        return pulumi.get(self, "connected_count")

    @property
    @pulumi.getter(name="containerActivityProtection")
    def container_activity_protection(self) -> bool:
        """
        When set to `True` applies Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
        """
        return pulumi.get(self, "container_activity_protection")

    @property
    @pulumi.getter(name="containerAntivirusProtection")
    def container_antivirus_protection(self) -> bool:
        """
        This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
        """
        return pulumi.get(self, "container_antivirus_protection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for the Aqua Enforcer group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disconnectedCount")
    def disconnected_count(self) -> int:
        """
        Number of disconnected enforcers in the enforcer group.
        """
        return pulumi.get(self, "disconnected_count")

    @property
    @pulumi.getter
    def enforce(self) -> bool:
        """
        Whether the enforce mode is enabled on the Enforcers.
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="enforcerImageName")
    def enforcer_image_name(self) -> str:
        """
        The specific Aqua Enforcer product image (with image tag) to be deployed.
        """
        return pulumi.get(self, "enforcer_image_name")

    @property
    @pulumi.getter
    def forensics(self) -> Optional[bool]:
        """
        Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
        """
        return pulumi.get(self, "forensics")

    @property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> str:
        """
        Gateway Address
        """
        return pulumi.get(self, "gateway_address")

    @property
    @pulumi.getter(name="gatewayName")
    def gateway_name(self) -> str:
        """
        Gateway Name
        """
        return pulumi.get(self, "gateway_name")

    @property
    @pulumi.getter
    def gateways(self) -> Sequence[str]:
        """
        List of Aqua gateway IDs for the Enforcers.
        """
        return pulumi.get(self, "gateways")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The ID of the Enforcer group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="highVulns")
    def high_vulns(self) -> int:
        """
        Number of high vulnerabilities in the enforcers that in this enforcer group.
        """
        return pulumi.get(self, "high_vulns")

    @property
    @pulumi.getter(name="hostAssurance")
    def host_assurance(self) -> bool:
        """
        When set to `True` enables host scanning and respective Host Assurance controls.
        """
        return pulumi.get(self, "host_assurance")

    @property
    @pulumi.getter(name="hostBehavioralEngine")
    def host_behavioral_engine(self) -> bool:
        """
        When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
        """
        return pulumi.get(self, "host_behavioral_engine")

    @property
    @pulumi.getter(name="hostForensics")
    def host_forensics(self) -> Optional[bool]:
        """
        Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
        """
        return pulumi.get(self, "host_forensics")

    @property
    @pulumi.getter(name="hostNetworkProtection")
    def host_network_protection(self) -> bool:
        """
        When set to `True` applies Firewall Policies to hosts, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
        """
        return pulumi.get(self, "host_network_protection")

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> str:
        """
        The OS type for the host
        """
        return pulumi.get(self, "host_os")

    @property
    @pulumi.getter(name="hostProtection")
    def host_protection(self) -> bool:
        """
        When set to `True` enables all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
        """
        return pulumi.get(self, "host_protection")

    @property
    @pulumi.getter(name="hostUserProtection")
    def host_user_protection(self) -> bool:
        """
        When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
        """
        return pulumi.get(self, "host_user_protection")

    @property
    @pulumi.getter(name="hostsCount")
    def hosts_count(self) -> int:
        """
        Number of enforcers in the enforcer group.
        """
        return pulumi.get(self, "hosts_count")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageAssurance")
    def image_assurance(self) -> bool:
        """
        When Set to `True` enables selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
        """
        return pulumi.get(self, "image_assurance")

    @property
    @pulumi.getter(name="installCommand")
    def install_command(self) -> str:
        """
        Enforcer install command
        """
        return pulumi.get(self, "install_command")

    @property
    @pulumi.getter(name="kubeBenchImageName")
    def kube_bench_image_name(self) -> str:
        """
        See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
        			This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
        """
        return pulumi.get(self, "kube_bench_image_name")

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> int:
        """
        The last date and time the batch token was updated in UNIX time.
        """
        return pulumi.get(self, "last_update")

    @property
    @pulumi.getter(name="logicalName")
    def logical_name(self) -> str:
        """
        Name for the batch install record.
        """
        return pulumi.get(self, "logical_name")

    @property
    @pulumi.getter(name="lowVulns")
    def low_vulns(self) -> int:
        """
        Number of low vulnerabilities in the enforcers that in this enforcer group.
        """
        return pulumi.get(self, "low_vulns")

    @property
    @pulumi.getter(name="medVulns")
    def med_vulns(self) -> int:
        """
        Number of medium vulnerabilities in the enforcers that in this enforcer group.
        """
        return pulumi.get(self, "med_vulns")

    @property
    @pulumi.getter(name="microEnforcerCertsSecretsName")
    def micro_enforcer_certs_secrets_name(self) -> str:
        """
        This option is applicable only if `Enable Pod Enforcer injection` is selected.
        """
        return pulumi.get(self, "micro_enforcer_certs_secrets_name")

    @property
    @pulumi.getter(name="microEnforcerImageName")
    def micro_enforcer_image_name(self) -> str:
        """
        This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
        """
        return pulumi.get(self, "micro_enforcer_image_name")

    @property
    @pulumi.getter(name="microEnforcerInjection")
    def micro_enforcer_injection(self) -> bool:
        """
        This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
        """
        return pulumi.get(self, "micro_enforcer_injection")

    @property
    @pulumi.getter(name="microEnforcerSecretsName")
    def micro_enforcer_secrets_name(self) -> str:
        """
        This option is applicable only if `Enable Pod Enforcer injection` is selected.
        """
        return pulumi.get(self, "micro_enforcer_secrets_name")

    @property
    @pulumi.getter(name="negVulns")
    def neg_vulns(self) -> int:
        """
        Number of negligible vulnerabilities in the enforcers that in this enforcer group.
        """
        return pulumi.get(self, "neg_vulns")

    @property
    @pulumi.getter(name="networkProtection")
    def network_protection(self) -> bool:
        """
        When set to `True` applies Firewall Policies to containers, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
        """
        return pulumi.get(self, "network_protection")

    @property
    @pulumi.getter
    def orchestrators(self) -> Sequence['outputs.GetEnforcerGroupsOrchestratorResult']:
        """
        The orchestrator for which you are creating the Enforcer group.
        """
        return pulumi.get(self, "orchestrators")

    @property
    @pulumi.getter(name="pasDeploymentLink")
    def pas_deployment_link(self) -> str:
        """
        pas deployment link
        """
        return pulumi.get(self, "pas_deployment_link")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        Permission Action
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="riskExplorerAutoDiscovery")
    def risk_explorer_auto_discovery(self) -> bool:
        """
        When set to `True` allows Enforcers to be discovered in the Risk Explorer.
        """
        return pulumi.get(self, "risk_explorer_auto_discovery")

    @property
    @pulumi.getter(name="runtimePolicyName")
    def runtime_policy_name(self) -> str:
        """
        Function Runtime Policy that will applay on the nano enforcer.
        """
        return pulumi.get(self, "runtime_policy_name")

    @property
    @pulumi.getter(name="runtimeType")
    def runtime_type(self) -> str:
        """
        The container runtime environment.
        """
        return pulumi.get(self, "runtime_type")

    @property
    @pulumi.getter(name="syncHostImages")
    def sync_host_images(self) -> bool:
        """
        When set to `True` configures Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
        """
        return pulumi.get(self, "sync_host_images")

    @property
    @pulumi.getter(name="syscallEnabled")
    def syscall_enabled(self) -> bool:
        """
        When set to `True` allows profiling and monitoring system calls made by running containers.
        """
        return pulumi.get(self, "syscall_enabled")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The batch install token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Enforcer Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccessControl")
    def user_access_control(self) -> bool:
        """
        When set to `True` applies User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
        """
        return pulumi.get(self, "user_access_control")


class AwaitableGetEnforcerGroupsResult(GetEnforcerGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnforcerGroupsResult(
            admission_control=self.admission_control,
            allow_kube_enforcer_audit=self.allow_kube_enforcer_audit,
            allowed_applications=self.allowed_applications,
            allowed_labels=self.allowed_labels,
            allowed_registries=self.allowed_registries,
            antivirus_protection=self.antivirus_protection,
            aqua_version=self.aqua_version,
            audit_all=self.audit_all,
            auto_copy_secrets=self.auto_copy_secrets,
            auto_discover_configure_registries=self.auto_discover_configure_registries,
            auto_discovery_enabled=self.auto_discovery_enabled,
            auto_scan_discovered_images_running_containers=self.auto_scan_discovered_images_running_containers,
            behavioral_engine=self.behavioral_engine,
            block_admission_control=self.block_admission_control,
            commands=self.commands,
            connected_count=self.connected_count,
            container_activity_protection=self.container_activity_protection,
            container_antivirus_protection=self.container_antivirus_protection,
            description=self.description,
            disconnected_count=self.disconnected_count,
            enforce=self.enforce,
            enforcer_image_name=self.enforcer_image_name,
            forensics=self.forensics,
            gateway_address=self.gateway_address,
            gateway_name=self.gateway_name,
            gateways=self.gateways,
            group_id=self.group_id,
            high_vulns=self.high_vulns,
            host_assurance=self.host_assurance,
            host_behavioral_engine=self.host_behavioral_engine,
            host_forensics=self.host_forensics,
            host_network_protection=self.host_network_protection,
            host_os=self.host_os,
            host_protection=self.host_protection,
            host_user_protection=self.host_user_protection,
            hosts_count=self.hosts_count,
            id=self.id,
            image_assurance=self.image_assurance,
            install_command=self.install_command,
            kube_bench_image_name=self.kube_bench_image_name,
            last_update=self.last_update,
            logical_name=self.logical_name,
            low_vulns=self.low_vulns,
            med_vulns=self.med_vulns,
            micro_enforcer_certs_secrets_name=self.micro_enforcer_certs_secrets_name,
            micro_enforcer_image_name=self.micro_enforcer_image_name,
            micro_enforcer_injection=self.micro_enforcer_injection,
            micro_enforcer_secrets_name=self.micro_enforcer_secrets_name,
            neg_vulns=self.neg_vulns,
            network_protection=self.network_protection,
            orchestrators=self.orchestrators,
            pas_deployment_link=self.pas_deployment_link,
            permission=self.permission,
            risk_explorer_auto_discovery=self.risk_explorer_auto_discovery,
            runtime_policy_name=self.runtime_policy_name,
            runtime_type=self.runtime_type,
            sync_host_images=self.sync_host_images,
            syscall_enabled=self.syscall_enabled,
            token=self.token,
            type=self.type,
            user_access_control=self.user_access_control)


def get_enforcer_groups(forensics: Optional[bool] = None,
                        group_id: Optional[str] = None,
                        host_forensics: Optional[bool] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnforcerGroupsResult:
    """
    The data source `EnforcerGroups` provides an Enforcer group template that generates a configuration file, which is subsequently used to generate one or more Enforcers using a Docker command.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aquasec as aquasec

    groups = aquasec.get_enforcer_groups(group_id="IacGroup")
    pulumi.export("groupDetails", groups)
    ```


    :param bool forensics: Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
    :param str group_id: The ID of the Enforcer group.
    :param bool host_forensics: Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
    """
    __args__ = dict()
    __args__['forensics'] = forensics
    __args__['groupId'] = group_id
    __args__['hostForensics'] = host_forensics
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aquasec:index/getEnforcerGroups:getEnforcerGroups', __args__, opts=opts, typ=GetEnforcerGroupsResult).value

    return AwaitableGetEnforcerGroupsResult(
        admission_control=pulumi.get(__ret__, 'admission_control'),
        allow_kube_enforcer_audit=pulumi.get(__ret__, 'allow_kube_enforcer_audit'),
        allowed_applications=pulumi.get(__ret__, 'allowed_applications'),
        allowed_labels=pulumi.get(__ret__, 'allowed_labels'),
        allowed_registries=pulumi.get(__ret__, 'allowed_registries'),
        antivirus_protection=pulumi.get(__ret__, 'antivirus_protection'),
        aqua_version=pulumi.get(__ret__, 'aqua_version'),
        audit_all=pulumi.get(__ret__, 'audit_all'),
        auto_copy_secrets=pulumi.get(__ret__, 'auto_copy_secrets'),
        auto_discover_configure_registries=pulumi.get(__ret__, 'auto_discover_configure_registries'),
        auto_discovery_enabled=pulumi.get(__ret__, 'auto_discovery_enabled'),
        auto_scan_discovered_images_running_containers=pulumi.get(__ret__, 'auto_scan_discovered_images_running_containers'),
        behavioral_engine=pulumi.get(__ret__, 'behavioral_engine'),
        block_admission_control=pulumi.get(__ret__, 'block_admission_control'),
        commands=pulumi.get(__ret__, 'commands'),
        connected_count=pulumi.get(__ret__, 'connected_count'),
        container_activity_protection=pulumi.get(__ret__, 'container_activity_protection'),
        container_antivirus_protection=pulumi.get(__ret__, 'container_antivirus_protection'),
        description=pulumi.get(__ret__, 'description'),
        disconnected_count=pulumi.get(__ret__, 'disconnected_count'),
        enforce=pulumi.get(__ret__, 'enforce'),
        enforcer_image_name=pulumi.get(__ret__, 'enforcer_image_name'),
        forensics=pulumi.get(__ret__, 'forensics'),
        gateway_address=pulumi.get(__ret__, 'gateway_address'),
        gateway_name=pulumi.get(__ret__, 'gateway_name'),
        gateways=pulumi.get(__ret__, 'gateways'),
        group_id=pulumi.get(__ret__, 'group_id'),
        high_vulns=pulumi.get(__ret__, 'high_vulns'),
        host_assurance=pulumi.get(__ret__, 'host_assurance'),
        host_behavioral_engine=pulumi.get(__ret__, 'host_behavioral_engine'),
        host_forensics=pulumi.get(__ret__, 'host_forensics'),
        host_network_protection=pulumi.get(__ret__, 'host_network_protection'),
        host_os=pulumi.get(__ret__, 'host_os'),
        host_protection=pulumi.get(__ret__, 'host_protection'),
        host_user_protection=pulumi.get(__ret__, 'host_user_protection'),
        hosts_count=pulumi.get(__ret__, 'hosts_count'),
        id=pulumi.get(__ret__, 'id'),
        image_assurance=pulumi.get(__ret__, 'image_assurance'),
        install_command=pulumi.get(__ret__, 'install_command'),
        kube_bench_image_name=pulumi.get(__ret__, 'kube_bench_image_name'),
        last_update=pulumi.get(__ret__, 'last_update'),
        logical_name=pulumi.get(__ret__, 'logical_name'),
        low_vulns=pulumi.get(__ret__, 'low_vulns'),
        med_vulns=pulumi.get(__ret__, 'med_vulns'),
        micro_enforcer_certs_secrets_name=pulumi.get(__ret__, 'micro_enforcer_certs_secrets_name'),
        micro_enforcer_image_name=pulumi.get(__ret__, 'micro_enforcer_image_name'),
        micro_enforcer_injection=pulumi.get(__ret__, 'micro_enforcer_injection'),
        micro_enforcer_secrets_name=pulumi.get(__ret__, 'micro_enforcer_secrets_name'),
        neg_vulns=pulumi.get(__ret__, 'neg_vulns'),
        network_protection=pulumi.get(__ret__, 'network_protection'),
        orchestrators=pulumi.get(__ret__, 'orchestrators'),
        pas_deployment_link=pulumi.get(__ret__, 'pas_deployment_link'),
        permission=pulumi.get(__ret__, 'permission'),
        risk_explorer_auto_discovery=pulumi.get(__ret__, 'risk_explorer_auto_discovery'),
        runtime_policy_name=pulumi.get(__ret__, 'runtime_policy_name'),
        runtime_type=pulumi.get(__ret__, 'runtime_type'),
        sync_host_images=pulumi.get(__ret__, 'sync_host_images'),
        syscall_enabled=pulumi.get(__ret__, 'syscall_enabled'),
        token=pulumi.get(__ret__, 'token'),
        type=pulumi.get(__ret__, 'type'),
        user_access_control=pulumi.get(__ret__, 'user_access_control'))


@_utilities.lift_output_func(get_enforcer_groups)
def get_enforcer_groups_output(forensics: Optional[pulumi.Input[Optional[bool]]] = None,
                               group_id: Optional[pulumi.Input[str]] = None,
                               host_forensics: Optional[pulumi.Input[Optional[bool]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnforcerGroupsResult]:
    """
    The data source `EnforcerGroups` provides an Enforcer group template that generates a configuration file, which is subsequently used to generate one or more Enforcers using a Docker command.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aquasec as aquasec

    groups = aquasec.get_enforcer_groups(group_id="IacGroup")
    pulumi.export("groupDetails", groups)
    ```


    :param bool forensics: Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
    :param str group_id: The ID of the Enforcer group.
    :param bool host_forensics: Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
    """
    ...
