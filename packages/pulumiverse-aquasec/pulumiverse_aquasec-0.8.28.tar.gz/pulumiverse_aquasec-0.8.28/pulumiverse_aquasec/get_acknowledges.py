# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAcknowledgesResult',
    'AwaitableGetAcknowledgesResult',
    'get_acknowledges',
    'get_acknowledges_output',
]

@pulumi.output_type
class GetAcknowledgesResult:
    """
    A collection of values returned by getAcknowledges.
    """
    def __init__(__self__, acknowledges=None, id=None):
        if acknowledges and not isinstance(acknowledges, list):
            raise TypeError("Expected argument 'acknowledges' to be a list")
        pulumi.set(__self__, "acknowledges", acknowledges)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def acknowledges(self) -> Sequence['outputs.GetAcknowledgesAcknowledgeResult']:
        """
        A list of existing security acknowledges.
        """
        return pulumi.get(self, "acknowledges")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAcknowledgesResult(GetAcknowledgesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAcknowledgesResult(
            acknowledges=self.acknowledges,
            id=self.id)


def get_acknowledges(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAcknowledgesResult:
    """
    The data source `get_acknowledges` provides a method to query all acknowledges within the Aqua

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aquasec as aquasec

    acknowledges_acknowledges = aquasec.get_acknowledges()
    pulumi.export("acknowledges", acknowledges_acknowledges)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aquasec:index/getAcknowledges:getAcknowledges', __args__, opts=opts, typ=GetAcknowledgesResult).value

    return AwaitableGetAcknowledgesResult(
        acknowledges=pulumi.get(__ret__, 'acknowledges'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_acknowledges)
def get_acknowledges_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAcknowledgesResult]:
    """
    The data source `get_acknowledges` provides a method to query all acknowledges within the Aqua

    ## Example Usage

    ```python
    import pulumi
    import pulumi_aquasec as aquasec

    acknowledges_acknowledges = aquasec.get_acknowledges()
    pulumi.export("acknowledges", acknowledges_acknowledges)
    ```
    """
    ...
