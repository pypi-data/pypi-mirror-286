# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AcknowledgeIssueArgs',
    'ApplicationScopeCategoryArgs',
    'ApplicationScopeCategoryArtifactArgs',
    'ApplicationScopeCategoryArtifactCfArgs',
    'ApplicationScopeCategoryArtifactCfVariableArgs',
    'ApplicationScopeCategoryArtifactFunctionArgs',
    'ApplicationScopeCategoryArtifactFunctionVariableArgs',
    'ApplicationScopeCategoryArtifactImageArgs',
    'ApplicationScopeCategoryArtifactImageVariableArgs',
    'ApplicationScopeCategoryEntityScopeArgs',
    'ApplicationScopeCategoryEntityScopeVariableArgs',
    'ApplicationScopeCategoryInfrastructureArgs',
    'ApplicationScopeCategoryInfrastructureKuberneteArgs',
    'ApplicationScopeCategoryInfrastructureKuberneteVariableArgs',
    'ApplicationScopeCategoryInfrastructureOArgs',
    'ApplicationScopeCategoryInfrastructureOVariableArgs',
    'ApplicationScopeCategoryWorkloadArgs',
    'ApplicationScopeCategoryWorkloadCfArgs',
    'ApplicationScopeCategoryWorkloadCfVariableArgs',
    'ApplicationScopeCategoryWorkloadKuberneteArgs',
    'ApplicationScopeCategoryWorkloadKuberneteVariableArgs',
    'ApplicationScopeCategoryWorkloadOArgs',
    'ApplicationScopeCategoryWorkloadOVariableArgs',
    'ContainerRuntimePolicyAllowedExecutableArgs',
    'ContainerRuntimePolicyAllowedRegistryArgs',
    'ContainerRuntimePolicyAuditingArgs',
    'ContainerRuntimePolicyBlacklistedOsUsersArgs',
    'ContainerRuntimePolicyBypassScopeArgs',
    'ContainerRuntimePolicyBypassScopeScopeArgs',
    'ContainerRuntimePolicyBypassScopeScopeVariableArgs',
    'ContainerRuntimePolicyContainerExecArgs',
    'ContainerRuntimePolicyDriftPreventionArgs',
    'ContainerRuntimePolicyExecutableBlacklistArgs',
    'ContainerRuntimePolicyFailedKubernetesChecksArgs',
    'ContainerRuntimePolicyFileBlockArgs',
    'ContainerRuntimePolicyFileIntegrityMonitoringArgs',
    'ContainerRuntimePolicyLimitContainerPrivilegeArgs',
    'ContainerRuntimePolicyLinuxCapabilitiesArgs',
    'ContainerRuntimePolicyMalwareScanOptionsArgs',
    'ContainerRuntimePolicyPackageBlockArgs',
    'ContainerRuntimePolicyPortBlockArgs',
    'ContainerRuntimePolicyReadonlyFilesArgs',
    'ContainerRuntimePolicyReadonlyRegistryArgs',
    'ContainerRuntimePolicyRegistryAccessMonitoringArgs',
    'ContainerRuntimePolicyRestrictedVolumeArgs',
    'ContainerRuntimePolicyReverseShellArgs',
    'ContainerRuntimePolicyScopeArgs',
    'ContainerRuntimePolicyScopeVariableArgs',
    'ContainerRuntimePolicySystemIntegrityProtectionArgs',
    'ContainerRuntimePolicyTripwireArgs',
    'ContainerRuntimePolicyWhitelistedOsUsersArgs',
    'EnforcerGroupsCommandArgs',
    'EnforcerGroupsOrchestratorArgs',
    'FirewallPolicyInboundNetworkArgs',
    'FirewallPolicyOutboundNetworkArgs',
    'FunctionAssurancePolicyAutoScanTimeArgs',
    'FunctionAssurancePolicyCustomCheckArgs',
    'FunctionAssurancePolicyForbiddenLabelArgs',
    'FunctionAssurancePolicyKubernetesControlArgs',
    'FunctionAssurancePolicyPackagesBlackListArgs',
    'FunctionAssurancePolicyPackagesWhiteListArgs',
    'FunctionAssurancePolicyPolicySettingsArgs',
    'FunctionAssurancePolicyRequiredLabelArgs',
    'FunctionAssurancePolicyScopeArgs',
    'FunctionAssurancePolicyScopeVariableArgs',
    'FunctionAssurancePolicyTrustedBaseImageArgs',
    'FunctionRuntimePolicyAllowedExecutableArgs',
    'FunctionRuntimePolicyAllowedRegistryArgs',
    'FunctionRuntimePolicyAuditingArgs',
    'FunctionRuntimePolicyBlacklistedOsUsersArgs',
    'FunctionRuntimePolicyBypassScopeArgs',
    'FunctionRuntimePolicyBypassScopeScopeArgs',
    'FunctionRuntimePolicyBypassScopeScopeVariableArgs',
    'FunctionRuntimePolicyContainerExecArgs',
    'FunctionRuntimePolicyDriftPreventionArgs',
    'FunctionRuntimePolicyExecutableBlacklistArgs',
    'FunctionRuntimePolicyFailedKubernetesChecksArgs',
    'FunctionRuntimePolicyFileBlockArgs',
    'FunctionRuntimePolicyFileIntegrityMonitoringArgs',
    'FunctionRuntimePolicyLimitContainerPrivilegeArgs',
    'FunctionRuntimePolicyLinuxCapabilitiesArgs',
    'FunctionRuntimePolicyMalwareScanOptionsArgs',
    'FunctionRuntimePolicyPackageBlockArgs',
    'FunctionRuntimePolicyPortBlockArgs',
    'FunctionRuntimePolicyReadonlyFilesArgs',
    'FunctionRuntimePolicyReadonlyRegistryArgs',
    'FunctionRuntimePolicyRegistryAccessMonitoringArgs',
    'FunctionRuntimePolicyRestrictedVolumeArgs',
    'FunctionRuntimePolicyReverseShellArgs',
    'FunctionRuntimePolicyScopeArgs',
    'FunctionRuntimePolicyScopeVariableArgs',
    'FunctionRuntimePolicySystemIntegrityProtectionArgs',
    'FunctionRuntimePolicyTripwireArgs',
    'FunctionRuntimePolicyWhitelistedOsUsersArgs',
    'HostAssurancePolicyAutoScanTimeArgs',
    'HostAssurancePolicyCustomCheckArgs',
    'HostAssurancePolicyForbiddenLabelArgs',
    'HostAssurancePolicyPackagesBlackListArgs',
    'HostAssurancePolicyPackagesWhiteListArgs',
    'HostAssurancePolicyPolicySettingsArgs',
    'HostAssurancePolicyRequiredLabelArgs',
    'HostAssurancePolicyScopeArgs',
    'HostAssurancePolicyScopeVariableArgs',
    'HostAssurancePolicyTrustedBaseImageArgs',
    'HostRuntimePolicyAllowedExecutableArgs',
    'HostRuntimePolicyAllowedRegistryArgs',
    'HostRuntimePolicyAuditingArgs',
    'HostRuntimePolicyBlacklistedOsUsersArgs',
    'HostRuntimePolicyBypassScopeArgs',
    'HostRuntimePolicyBypassScopeScopeArgs',
    'HostRuntimePolicyBypassScopeScopeVariableArgs',
    'HostRuntimePolicyContainerExecArgs',
    'HostRuntimePolicyDriftPreventionArgs',
    'HostRuntimePolicyExecutableBlacklistArgs',
    'HostRuntimePolicyFailedKubernetesChecksArgs',
    'HostRuntimePolicyFileBlockArgs',
    'HostRuntimePolicyFileIntegrityMonitoringArgs',
    'HostRuntimePolicyLimitContainerPrivilegeArgs',
    'HostRuntimePolicyLinuxCapabilitiesArgs',
    'HostRuntimePolicyMalwareScanOptionsArgs',
    'HostRuntimePolicyPackageBlockArgs',
    'HostRuntimePolicyPortBlockArgs',
    'HostRuntimePolicyReadonlyFilesArgs',
    'HostRuntimePolicyReadonlyRegistryArgs',
    'HostRuntimePolicyRegistryAccessMonitoringArgs',
    'HostRuntimePolicyRestrictedVolumeArgs',
    'HostRuntimePolicyReverseShellArgs',
    'HostRuntimePolicyScopeArgs',
    'HostRuntimePolicyScopeVariableArgs',
    'HostRuntimePolicySystemIntegrityProtectionArgs',
    'HostRuntimePolicyTripwireArgs',
    'HostRuntimePolicyWhitelistedOsUsersArgs',
    'ImageAssuranceChecksPerformedArgs',
    'ImageAssurancePolicyAutoScanTimeArgs',
    'ImageAssurancePolicyCustomCheckArgs',
    'ImageAssurancePolicyForbiddenLabelArgs',
    'ImageAssurancePolicyKubernetesControlsArgs',
    'ImageAssurancePolicyPackagesBlackListArgs',
    'ImageAssurancePolicyPackagesWhiteListArgs',
    'ImageAssurancePolicyPolicySettingsArgs',
    'ImageAssurancePolicyRequiredLabelArgs',
    'ImageAssurancePolicyScopeArgs',
    'ImageAssurancePolicyScopeVariableArgs',
    'ImageAssurancePolicyTrustedBaseImageArgs',
    'ImageHistoryArgs',
    'ImageVulnerabilityArgs',
    'IntegrationRegistryOptionArgs',
    'IntegrationRegistryWebhookArgs',
    'KubernetesAssurancePolicyAutoScanTimeArgs',
    'KubernetesAssurancePolicyCustomCheckArgs',
    'KubernetesAssurancePolicyForbiddenLabelArgs',
    'KubernetesAssurancePolicyKubernetesControlArgs',
    'KubernetesAssurancePolicyPackagesBlackListArgs',
    'KubernetesAssurancePolicyPackagesWhiteListArgs',
    'KubernetesAssurancePolicyPolicySettingsArgs',
    'KubernetesAssurancePolicyRequiredLabelArgs',
    'KubernetesAssurancePolicyScopeArgs',
    'KubernetesAssurancePolicyScopeVariableArgs',
    'KubernetesAssurancePolicyTrustedBaseImageArgs',
    'RoleMappingLdapArgs',
    'RoleMappingOauth2Args',
    'RoleMappingOpenidArgs',
    'RoleMappingSamlArgs',
    'ServiceScopeVariableArgs',
    'UserSaasGroupArgs',
    'UserSaasLoginArgs',
    'VmwareAssurancePolicyAutoScanTimeArgs',
    'VmwareAssurancePolicyCustomCheckArgs',
    'VmwareAssurancePolicyForbiddenLabelArgs',
    'VmwareAssurancePolicyKubernetesControlArgs',
    'VmwareAssurancePolicyPackagesBlackListArgs',
    'VmwareAssurancePolicyPackagesWhiteListArgs',
    'VmwareAssurancePolicyPolicySettingsArgs',
    'VmwareAssurancePolicyRequiredLabelArgs',
    'VmwareAssurancePolicyScopeArgs',
    'VmwareAssurancePolicyScopeVariableArgs',
    'VmwareAssurancePolicyTrustedBaseImageArgs',
    'GetApplicationScopeCategoryArgs',
    'GetApplicationScopeCategoryArtifactArgs',
    'GetApplicationScopeCategoryArtifactCfArgs',
    'GetApplicationScopeCategoryArtifactCfVariableArgs',
    'GetApplicationScopeCategoryArtifactFunctionArgs',
    'GetApplicationScopeCategoryArtifactFunctionVariableArgs',
    'GetApplicationScopeCategoryArtifactImageArgs',
    'GetApplicationScopeCategoryArtifactImageVariableArgs',
    'GetApplicationScopeCategoryEntityScopeArgs',
    'GetApplicationScopeCategoryEntityScopeVariableArgs',
    'GetApplicationScopeCategoryInfrastructureArgs',
    'GetApplicationScopeCategoryInfrastructureKuberneteArgs',
    'GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs',
    'GetApplicationScopeCategoryInfrastructureOArgs',
    'GetApplicationScopeCategoryInfrastructureOVariableArgs',
    'GetApplicationScopeCategoryWorkloadArgs',
    'GetApplicationScopeCategoryWorkloadCfArgs',
    'GetApplicationScopeCategoryWorkloadCfVariableArgs',
    'GetApplicationScopeCategoryWorkloadKuberneteArgs',
    'GetApplicationScopeCategoryWorkloadKuberneteVariableArgs',
    'GetApplicationScopeCategoryWorkloadOArgs',
    'GetApplicationScopeCategoryWorkloadOVariableArgs',
    'GetContainerRuntimePolicyAllowedExecutableArgs',
    'GetContainerRuntimePolicyAllowedRegistryArgs',
    'GetContainerRuntimePolicyAuditingArgs',
    'GetContainerRuntimePolicyContainerExecArgs',
    'GetContainerRuntimePolicyFileBlockArgs',
    'GetContainerRuntimePolicyFileIntegrityMonitoringArgs',
    'GetContainerRuntimePolicyLimitContainerPrivilegeArgs',
    'GetContainerRuntimePolicyMalwareScanOptionArgs',
    'GetContainerRuntimePolicyPortBlockArgs',
    'GetContainerRuntimePolicyReadonlyFilesArgs',
    'GetContainerRuntimePolicyRestrictedVolumeArgs',
    'GetFirewallPolicyOutboundNetworkArgs',
    'GetFunctionRuntimePolicyDriftPreventionArgs',
    'GetFunctionRuntimePolicyExecutableBlacklistArgs',
    'GetHostRuntimePolicyAuditingArgs',
    'GetHostRuntimePolicyFileIntegrityMonitoringArgs',
    'GetHostRuntimePolicyMalwareScanOptionArgs',
    'GetHostRuntimePolicyPackageBlockArgs',
    'GetIntegrationRegistriesOptionArgs',
    'GetIntegrationRegistriesWebhookArgs',
    'GetIntegrationRegistryOptionArgs',
    'GetIntegrationRegistryWebhookArgs',
]

@pulumi.input_type
class AcknowledgeIssueArgs:
    def __init__(__self__, *,
                 issue_name: pulumi.Input[str],
                 issue_type: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 author: Optional[pulumi.Input[str]] = None,
                 date: Optional[pulumi.Input[str]] = None,
                 docker_id: Optional[pulumi.Input[str]] = None,
                 expiration_configured_at: Optional[pulumi.Input[str]] = None,
                 expiration_configured_by: Optional[pulumi.Input[str]] = None,
                 expiration_days: Optional[pulumi.Input[int]] = None,
                 fix_version: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 registry_name: Optional[pulumi.Input[str]] = None,
                 resource_cpe: Optional[pulumi.Input[str]] = None,
                 resource_format: Optional[pulumi.Input[str]] = None,
                 resource_hash: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_path: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] issue_name: The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
        :param pulumi.Input[str] issue_type: The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')
        :param pulumi.Input[str] resource_type: The type of the resource where the issue was detected (either 'package', 'file' or 'executable')
        :param pulumi.Input[str] author: The user who acknowledged the issue.
        :param pulumi.Input[str] date: The date and time of the acknowledgment.
        :param pulumi.Input[str] expiration_configured_at: The current dat and time when the expiration was set
        :param pulumi.Input[str] expiration_configured_by: The user who set the expiration of the issue.
        :param pulumi.Input[int] expiration_days: Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
        :param pulumi.Input[str] fix_version: The version of the package that having a fix for the issue.
        :param pulumi.Input[str] image_name: Only acknowledge the issue in the context of the specified image (also requires 'registry_name')
        :param pulumi.Input[str] os: When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').
        :param pulumi.Input[str] os_version: When the resource_type is 'package', the operating system version is required.
        :param pulumi.Input[str] permission: The permissions of the user who acknowledged the issue.
        :param pulumi.Input[str] registry_name: Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').
        :param pulumi.Input[str] resource_cpe: The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.
        :param pulumi.Input[str] resource_format: The format of the resource.
        :param pulumi.Input[str] resource_hash: When the resource_type is 'file', the hash of the file is required
        :param pulumi.Input[str] resource_name: When the resource_type is 'package', the name of the package is required.
        :param pulumi.Input[str] resource_path: The path of the resource. This is required for resources of type 'file' and 'executable'.
        :param pulumi.Input[str] resource_version: When the resource_type is 'package', the version of the package is required
        """
        pulumi.set(__self__, "issue_name", issue_name)
        pulumi.set(__self__, "issue_type", issue_type)
        pulumi.set(__self__, "resource_type", resource_type)
        if author is not None:
            pulumi.set(__self__, "author", author)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if docker_id is not None:
            pulumi.set(__self__, "docker_id", docker_id)
        if expiration_configured_at is not None:
            pulumi.set(__self__, "expiration_configured_at", expiration_configured_at)
        if expiration_configured_by is not None:
            pulumi.set(__self__, "expiration_configured_by", expiration_configured_by)
        if expiration_days is not None:
            pulumi.set(__self__, "expiration_days", expiration_days)
        if fix_version is not None:
            pulumi.set(__self__, "fix_version", fix_version)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if registry_name is not None:
            pulumi.set(__self__, "registry_name", registry_name)
        if resource_cpe is not None:
            pulumi.set(__self__, "resource_cpe", resource_cpe)
        if resource_format is not None:
            pulumi.set(__self__, "resource_format", resource_format)
        if resource_hash is not None:
            pulumi.set(__self__, "resource_hash", resource_hash)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)

    @property
    @pulumi.getter(name="issueName")
    def issue_name(self) -> pulumi.Input[str]:
        """
        The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
        """
        return pulumi.get(self, "issue_name")

    @issue_name.setter
    def issue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_name", value)

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> pulumi.Input[str]:
        """
        The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')
        """
        return pulumi.get(self, "issue_type")

    @issue_type.setter
    def issue_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_type", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The type of the resource where the issue was detected (either 'package', 'file' or 'executable')
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        The user who acknowledged the issue.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time of the acknowledgment.
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="dockerId")
    def docker_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_id")

    @docker_id.setter
    def docker_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_id", value)

    @property
    @pulumi.getter(name="expirationConfiguredAt")
    def expiration_configured_at(self) -> Optional[pulumi.Input[str]]:
        """
        The current dat and time when the expiration was set
        """
        return pulumi.get(self, "expiration_configured_at")

    @expiration_configured_at.setter
    def expiration_configured_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_configured_at", value)

    @property
    @pulumi.getter(name="expirationConfiguredBy")
    def expiration_configured_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user who set the expiration of the issue.
        """
        return pulumi.get(self, "expiration_configured_by")

    @expiration_configured_by.setter
    def expiration_configured_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_configured_by", value)

    @property
    @pulumi.getter(name="expirationDays")
    def expiration_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
        """
        return pulumi.get(self, "expiration_days")

    @expiration_days.setter
    def expiration_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_days", value)

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the package that having a fix for the issue.
        """
        return pulumi.get(self, "fix_version")

    @fix_version.setter
    def fix_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fix_version", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        Only acknowledge the issue in the context of the specified image (also requires 'registry_name')
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource_type is 'package', the operating system version is required.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        """
        The permissions of the user who acknowledged the issue.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> Optional[pulumi.Input[str]]:
        """
        Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').
        """
        return pulumi.get(self, "registry_name")

    @registry_name.setter
    def registry_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_name", value)

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> Optional[pulumi.Input[str]]:
        """
        The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.
        """
        return pulumi.get(self, "resource_cpe")

    @resource_cpe.setter
    def resource_cpe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_cpe", value)

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the resource.
        """
        return pulumi.get(self, "resource_format")

    @resource_format.setter
    def resource_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_format", value)

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource_type is 'file', the hash of the file is required
        """
        return pulumi.get(self, "resource_hash")

    @resource_hash.setter
    def resource_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_hash", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource_type is 'package', the name of the package is required.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path of the resource. This is required for resources of type 'file' and 'executable'.
        """
        return pulumi.get(self, "resource_path")

    @resource_path.setter
    def resource_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_path", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource_type is 'package', the version of the package is required
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)


@pulumi.input_type
class ApplicationScopeCategoryArgs:
    def __init__(__self__, *,
                 artifacts: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactArgs']]]] = None,
                 entity_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeArgs']]]] = None,
                 infrastructures: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureArgs']]]] = None,
                 workloads: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactArgs']]] artifacts: An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureArgs']]] infrastructures: An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadArgs']]] workloads: A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
        """
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactArgs']]]]:
        """
        An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
        """
        return pulumi.get(self, "artifacts")

    @artifacts.setter
    def artifacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactArgs']]]]):
        pulumi.set(self, "artifacts", value)

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeArgs']]]]:
        return pulumi.get(self, "entity_scopes")

    @entity_scopes.setter
    def entity_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeArgs']]]]):
        pulumi.set(self, "entity_scopes", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureArgs']]]]:
        """
        An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
        """
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureArgs']]]]):
        pulumi.set(self, "infrastructures", value)

    @property
    @pulumi.getter
    def workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadArgs']]]]:
        """
        A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
        """
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadArgs']]]]):
        pulumi.set(self, "workloads", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactArgs:
    def __init__(__self__, *,
                 cfs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfArgs']]]] = None,
                 functions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionArgs']]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionArgs']]] functions: Function name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageArgs']]] images: Name of a registry as defined in Aqua
        """
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfArgs']]]]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfArgs']]]]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def functions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionArgs']]]]:
        """
        Function name
        """
        return pulumi.get(self, "functions")

    @functions.setter
    def functions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionArgs']]]]):
        pulumi.set(self, "functions", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageArgs']]]]:
        """
        Name of a registry as defined in Aqua
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageArgs']]]]):
        pulumi.set(self, "images", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactCfArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactCfVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactFunctionArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactFunctionVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactImageArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactImageVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryEntityScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryEntityScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureArgs:
    def __init__(__self__, *,
                 kubernetes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteArgs']]]] = None,
                 os: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOArgs']]]] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteArgs']]]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteArgs']]]]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOArgs']]]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOArgs']]]]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureKuberneteArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureOArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureOVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadArgs:
    def __init__(__self__, *,
                 cfs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfArgs']]]] = None,
                 kubernetes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteArgs']]]] = None,
                 os: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOArgs']]]] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfArgs']]]]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfArgs']]]]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteArgs']]]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteArgs']]]]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOArgs']]]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOArgs']]]]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadCfArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadCfVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadKuberneteArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadOArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadOVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContainerRuntimePolicyAllowedExecutableArgs:
    def __init__(__self__, *,
                 allow_executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_root_executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 separate_executables: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_executables: List of allowed executables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_root_executables: List of allowed root executables.
        :param pulumi.Input[bool] enabled: Whether allowed executables configuration is enabled.
        :param pulumi.Input[bool] separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @allow_executables.setter
    def allow_executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_executables", value)

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @allow_root_executables.setter
    def allow_root_executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_root_executables", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")

    @separate_executables.setter
    def separate_executables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "separate_executables", value)


@pulumi.input_type
class ContainerRuntimePolicyAllowedRegistryArgs:
    def __init__(__self__, *,
                 allowed_registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_registries: List of allowed registries.
        :param pulumi.Input[bool] enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @allowed_registries.setter
    def allowed_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_registries", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ContainerRuntimePolicyAuditingArgs:
    def __init__(__self__, *,
                 audit_all_network: Optional[pulumi.Input[bool]] = None,
                 audit_all_processes: Optional[pulumi.Input[bool]] = None,
                 audit_failed_login: Optional[pulumi.Input[bool]] = None,
                 audit_os_user_activity: Optional[pulumi.Input[bool]] = None,
                 audit_process_cmdline: Optional[pulumi.Input[bool]] = None,
                 audit_success_login: Optional[pulumi.Input[bool]] = None,
                 audit_user_account_management: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_all_network")

    @audit_all_network.setter
    def audit_all_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_all_network", value)

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_all_processes")

    @audit_all_processes.setter
    def audit_all_processes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_all_processes", value)

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_failed_login")

    @audit_failed_login.setter
    def audit_failed_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_failed_login", value)

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_os_user_activity")

    @audit_os_user_activity.setter
    def audit_os_user_activity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_os_user_activity", value)

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_process_cmdline")

    @audit_process_cmdline.setter
    def audit_process_cmdline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_process_cmdline", value)

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_success_login")

    @audit_success_login.setter
    def audit_success_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_success_login", value)

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_user_account_management")

    @audit_user_account_management.setter
    def audit_user_account_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_user_account_management", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ContainerRuntimePolicyBlacklistedOsUsersArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_black_lists is not None:
            pulumi.set(__self__, "group_black_lists", group_black_lists)
        if user_black_lists is not None:
            pulumi.set(__self__, "user_black_lists", user_black_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupBlackLists")
    def group_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_black_lists")

    @group_black_lists.setter
    def group_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_black_lists", value)

    @property
    @pulumi.getter(name="userBlackLists")
    def user_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_black_lists")

    @user_black_lists.setter
    def user_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_black_lists", value)


@pulumi.input_type
class ContainerRuntimePolicyBypassScopeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeArgs']]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether bypassing the scope is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeArgs']]] scopes: Scope configuration.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether bypassing the scope is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeArgs']]]]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeArgs']]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class ContainerRuntimePolicyBypassScopeScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeVariableArgs']]]] = None):
        """
        :param pulumi.Input[str] expression: Scope expression.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeVariableArgs']]] variables: List of variables in the scope.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeVariableArgs']]]]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyBypassScopeScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ContainerRuntimePolicyBypassScopeScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute: Variable attribute.
        :param pulumi.Input[str] value: Variable value.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Variable attribute.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContainerRuntimePolicyContainerExecArgs:
    def __init__(__self__, *,
                 block_container_exec: Optional[pulumi.Input[bool]] = None,
                 container_exec_proc_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 reverse_shell_ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_container_exec")

    @block_container_exec.setter
    def block_container_exec(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_container_exec", value)

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @container_exec_proc_white_lists.setter
    def container_exec_proc_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_exec_proc_white_lists", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @reverse_shell_ip_white_lists.setter
    def reverse_shell_ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_ip_white_lists", value)


@pulumi.input_type
class ContainerRuntimePolicyDriftPreventionArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exec_lockdown: Optional[pulumi.Input[bool]] = None,
                 exec_lockdown_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_lockdown: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether drift prevention is enabled.
        :param pulumi.Input[bool] exec_lockdown: Whether to lockdown execution drift.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param pulumi.Input[bool] image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @exec_lockdown.setter
    def exec_lockdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exec_lockdown", value)

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @exec_lockdown_white_lists.setter
    def exec_lockdown_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_lockdown_white_lists", value)

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")

    @image_lockdown.setter
    def image_lockdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_lockdown", value)


@pulumi.input_type
class ContainerRuntimePolicyExecutableBlacklistArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether the executable blacklist is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "executables", value)


@pulumi.input_type
class ContainerRuntimePolicyFailedKubernetesChecksArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 failed_checks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed_checks is not None:
            pulumi.set(__self__, "failed_checks", failed_checks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failedChecks")
    def failed_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "failed_checks")

    @failed_checks.setter
    def failed_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "failed_checks", value)


@pulumi.input_type
class ContainerRuntimePolicyFileBlockArgs:
    def __init__(__self__, *,
                 block_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_block_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filename_block_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_files_processes")

    @block_files_processes.setter
    def block_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_files_processes", value)

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_files_users")

    @block_files_users.setter
    def block_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_files_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files")

    @exceptional_block_files.setter
    def exceptional_block_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @exceptional_block_files_processes.setter
    def exceptional_block_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @exceptional_block_files_users.setter
    def exceptional_block_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files_users", value)

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filename_block_lists")

    @filename_block_lists.setter
    def filename_block_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filename_block_lists", value)


@pulumi.input_type
class ContainerRuntimePolicyFileIntegrityMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files_attributes: Optional[pulumi.Input[bool]] = None,
                 monitored_files_create: Optional[pulumi.Input[bool]] = None,
                 monitored_files_delete: Optional[pulumi.Input[bool]] = None,
                 monitored_files_modify: Optional[pulumi.Input[bool]] = None,
                 monitored_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files_read: Optional[pulumi.Input[bool]] = None,
                 monitored_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: If true, file integrity monitoring is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files: List of paths to be monitored.
        :param pulumi.Input[bool] monitored_files_attributes: Whether to monitor file attribute operations.
        :param pulumi.Input[bool] monitored_files_create: Whether to monitor file create operations.
        :param pulumi.Input[bool] monitored_files_delete: Whether to monitor file delete operations.
        :param pulumi.Input[bool] monitored_files_modify: Whether to monitor file modify operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files_processes: List of processes associated with monitored files.
        :param pulumi.Input[bool] monitored_files_read: Whether to monitor file read operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @exceptional_monitored_files.setter
    def exceptional_monitored_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @exceptional_monitored_files_processes.setter
    def exceptional_monitored_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @exceptional_monitored_files_users.setter
    def exceptional_monitored_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files_users", value)

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @monitored_files.setter
    def monitored_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files", value)

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @monitored_files_attributes.setter
    def monitored_files_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_attributes", value)

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @monitored_files_create.setter
    def monitored_files_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_create", value)

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @monitored_files_delete.setter
    def monitored_files_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_delete", value)

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @monitored_files_modify.setter
    def monitored_files_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_modify", value)

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @monitored_files_processes.setter
    def monitored_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files_processes", value)

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @monitored_files_read.setter
    def monitored_files_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_read", value)

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")

    @monitored_files_users.setter
    def monitored_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files_users", value)


@pulumi.input_type
class ContainerRuntimePolicyLimitContainerPrivilegeArgs:
    def __init__(__self__, *,
                 block_add_capabilities: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipcmode: Optional[pulumi.Input[bool]] = None,
                 netmode: Optional[pulumi.Input[bool]] = None,
                 pidmode: Optional[pulumi.Input[bool]] = None,
                 prevent_low_port_binding: Optional[pulumi.Input[bool]] = None,
                 prevent_root_user: Optional[pulumi.Input[bool]] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 use_host_user: Optional[pulumi.Input[bool]] = None,
                 usermode: Optional[pulumi.Input[bool]] = None,
                 utsmode: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] block_add_capabilities: Whether to block adding capabilities.
        :param pulumi.Input[bool] enabled: Whether container privilege limitations are enabled.
        :param pulumi.Input[bool] ipcmode: Whether to limit IPC-related capabilities.
        :param pulumi.Input[bool] netmode: Whether to limit network-related capabilities.
        :param pulumi.Input[bool] pidmode: Whether to limit process-related capabilities.
        :param pulumi.Input[bool] prevent_low_port_binding: Whether to prevent low port binding.
        :param pulumi.Input[bool] prevent_root_user: Whether to prevent the use of the root user.
        :param pulumi.Input[bool] privileged: Whether the container is run in privileged mode.
        :param pulumi.Input[bool] use_host_user: Whether to use the host user.
        :param pulumi.Input[bool] usermode: Whether to limit user-related capabilities.
        :param pulumi.Input[bool] utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @block_add_capabilities.setter
    def block_add_capabilities(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_add_capabilities", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @ipcmode.setter
    def ipcmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipcmode", value)

    @property
    @pulumi.getter
    def netmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @netmode.setter
    def netmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "netmode", value)

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @pidmode.setter
    def pidmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pidmode", value)

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @prevent_low_port_binding.setter
    def prevent_low_port_binding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_low_port_binding", value)

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @prevent_root_user.setter
    def prevent_root_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_root_user", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @use_host_user.setter
    def use_host_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_host_user", value)

    @property
    @pulumi.getter
    def usermode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @usermode.setter
    def usermode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usermode", value)

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")

    @utsmode.setter
    def utsmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "utsmode", value)


@pulumi.input_type
class ContainerRuntimePolicyLinuxCapabilitiesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 remove_linux_capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if remove_linux_capabilities is not None:
            pulumi.set(__self__, "remove_linux_capabilities", remove_linux_capabilities)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="removeLinuxCapabilities")
    def remove_linux_capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "remove_linux_capabilities")

    @remove_linux_capabilities.setter
    def remove_linux_capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove_linux_capabilities", value)


@pulumi.input_type
class ContainerRuntimePolicyMalwareScanOptionsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_directories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_directories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] action: Set Action, Defaults to 'Alert' when empty
        :param pulumi.Input[bool] enabled: Defines if enabled or not
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_directories: List of registry paths to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_processes: List of registry processes to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @exclude_directories.setter
    def exclude_directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_directories", value)

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @exclude_processes.setter
    def exclude_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_processes", value)

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")

    @include_directories.setter
    def include_directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_directories", value)


@pulumi.input_type
class ContainerRuntimePolicyPackageBlockArgs:
    def __init__(__self__, *,
                 block_packages_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_packages_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_block_packages_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_packages_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_packages_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_packages_processes")

    @block_packages_processes.setter
    def block_packages_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_packages_processes", value)

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_packages_users")

    @block_packages_users.setter
    def block_packages_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_packages_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @exceptional_block_packages_files.setter
    def exceptional_block_packages_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @exceptional_block_packages_processes.setter
    def exceptional_block_packages_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @exceptional_block_packages_users.setter
    def exceptional_block_packages_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_users", value)

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "packages_black_lists")

    @packages_black_lists.setter
    def packages_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "packages_black_lists", value)


@pulumi.input_type
class ContainerRuntimePolicyPortBlockArgs:
    def __init__(__self__, *,
                 block_inbound_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_outbound_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_inbound_ports")

    @block_inbound_ports.setter
    def block_inbound_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_inbound_ports", value)

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_outbound_ports")

    @block_outbound_ports.setter
    def block_outbound_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_outbound_ports", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ContainerRuntimePolicyReadonlyFilesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_readonly_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @exceptional_readonly_files.setter
    def exceptional_readonly_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @exceptional_readonly_files_processes.setter
    def exceptional_readonly_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @exceptional_readonly_files_users.setter
    def exceptional_readonly_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files_users", value)

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files")

    @readonly_files.setter
    def readonly_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files", value)

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files_processes")

    @readonly_files_processes.setter
    def readonly_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files_processes", value)

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files_users")

    @readonly_files_users.setter
    def readonly_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files_users", value)


@pulumi.input_type
class ContainerRuntimePolicyReadonlyRegistryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_readonly_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_registry_paths is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_paths", exceptional_readonly_registry_paths)
        if exceptional_readonly_registry_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_processes", exceptional_readonly_registry_processes)
        if exceptional_readonly_registry_users is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_users", exceptional_readonly_registry_users)
        if readonly_registry_paths is not None:
            pulumi.set(__self__, "readonly_registry_paths", readonly_registry_paths)
        if readonly_registry_processes is not None:
            pulumi.set(__self__, "readonly_registry_processes", readonly_registry_processes)
        if readonly_registry_users is not None:
            pulumi.set(__self__, "readonly_registry_users", readonly_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryPaths")
    def exceptional_readonly_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_paths")

    @exceptional_readonly_registry_paths.setter
    def exceptional_readonly_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_paths", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryProcesses")
    def exceptional_readonly_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_processes")

    @exceptional_readonly_registry_processes.setter
    def exceptional_readonly_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_processes", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryUsers")
    def exceptional_readonly_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_users")

    @exceptional_readonly_registry_users.setter
    def exceptional_readonly_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_users", value)

    @property
    @pulumi.getter(name="readonlyRegistryPaths")
    def readonly_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_paths")

    @readonly_registry_paths.setter
    def readonly_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_paths", value)

    @property
    @pulumi.getter(name="readonlyRegistryProcesses")
    def readonly_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_processes")

    @readonly_registry_processes.setter
    def readonly_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_processes", value)

    @property
    @pulumi.getter(name="readonlyRegistryUsers")
    def readonly_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_users")

    @readonly_registry_users.setter
    def readonly_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_users", value)


@pulumi.input_type
class ContainerRuntimePolicyRegistryAccessMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_attributes: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_create: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_delete: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_modify: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_read: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_registry_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_paths", exceptional_monitored_registry_paths)
        if exceptional_monitored_registry_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_processes", exceptional_monitored_registry_processes)
        if exceptional_monitored_registry_users is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_users", exceptional_monitored_registry_users)
        if monitored_registry_attributes is not None:
            pulumi.set(__self__, "monitored_registry_attributes", monitored_registry_attributes)
        if monitored_registry_create is not None:
            pulumi.set(__self__, "monitored_registry_create", monitored_registry_create)
        if monitored_registry_delete is not None:
            pulumi.set(__self__, "monitored_registry_delete", monitored_registry_delete)
        if monitored_registry_modify is not None:
            pulumi.set(__self__, "monitored_registry_modify", monitored_registry_modify)
        if monitored_registry_paths is not None:
            pulumi.set(__self__, "monitored_registry_paths", monitored_registry_paths)
        if monitored_registry_processes is not None:
            pulumi.set(__self__, "monitored_registry_processes", monitored_registry_processes)
        if monitored_registry_read is not None:
            pulumi.set(__self__, "monitored_registry_read", monitored_registry_read)
        if monitored_registry_users is not None:
            pulumi.set(__self__, "monitored_registry_users", monitored_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryPaths")
    def exceptional_monitored_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_paths")

    @exceptional_monitored_registry_paths.setter
    def exceptional_monitored_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_paths", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryProcesses")
    def exceptional_monitored_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_processes")

    @exceptional_monitored_registry_processes.setter
    def exceptional_monitored_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryUsers")
    def exceptional_monitored_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_users")

    @exceptional_monitored_registry_users.setter
    def exceptional_monitored_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_users", value)

    @property
    @pulumi.getter(name="monitoredRegistryAttributes")
    def monitored_registry_attributes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_attributes")

    @monitored_registry_attributes.setter
    def monitored_registry_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_attributes", value)

    @property
    @pulumi.getter(name="monitoredRegistryCreate")
    def monitored_registry_create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_create")

    @monitored_registry_create.setter
    def monitored_registry_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_create", value)

    @property
    @pulumi.getter(name="monitoredRegistryDelete")
    def monitored_registry_delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_delete")

    @monitored_registry_delete.setter
    def monitored_registry_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_delete", value)

    @property
    @pulumi.getter(name="monitoredRegistryModify")
    def monitored_registry_modify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_modify")

    @monitored_registry_modify.setter
    def monitored_registry_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_modify", value)

    @property
    @pulumi.getter(name="monitoredRegistryPaths")
    def monitored_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_paths")

    @monitored_registry_paths.setter
    def monitored_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_paths", value)

    @property
    @pulumi.getter(name="monitoredRegistryProcesses")
    def monitored_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_processes")

    @monitored_registry_processes.setter
    def monitored_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_processes", value)

    @property
    @pulumi.getter(name="monitoredRegistryRead")
    def monitored_registry_read(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_read")

    @monitored_registry_read.setter
    def monitored_registry_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_read", value)

    @property
    @pulumi.getter(name="monitoredRegistryUsers")
    def monitored_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_users")

    @monitored_registry_users.setter
    def monitored_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_users", value)


@pulumi.input_type
class ContainerRuntimePolicyRestrictedVolumeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether restricted volumes are enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ContainerRuntimePolicyReverseShellArgs:
    def __init__(__self__, *,
                 block_reverse_shell: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 reverse_shell_ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reverse_shell_proc_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_reverse_shell is not None:
            pulumi.set(__self__, "block_reverse_shell", block_reverse_shell)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)
        if reverse_shell_proc_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_proc_white_lists", reverse_shell_proc_white_lists)

    @property
    @pulumi.getter(name="blockReverseShell")
    def block_reverse_shell(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_reverse_shell")

    @block_reverse_shell.setter
    def block_reverse_shell(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_reverse_shell", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @reverse_shell_ip_white_lists.setter
    def reverse_shell_ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_ip_white_lists", value)

    @property
    @pulumi.getter(name="reverseShellProcWhiteLists")
    def reverse_shell_proc_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_proc_white_lists")

    @reverse_shell_proc_white_lists.setter
    def reverse_shell_proc_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_proc_white_lists", value)


@pulumi.input_type
class ContainerRuntimePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 variables: pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyScopeVariableArgs']]]):
        """
        :param pulumi.Input[str] expression: Scope expression.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyScopeVariableArgs']]] variables: List of variables in the scope.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyScopeVariableArgs']]]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerRuntimePolicyScopeVariableArgs']]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ContainerRuntimePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 value: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        :param pulumi.Input[str] name: Name assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ContainerRuntimePolicySystemIntegrityProtectionArgs:
    def __init__(__self__, *,
                 audit_systemtime_change: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 monitor_audit_log_integrity: Optional[pulumi.Input[bool]] = None,
                 windows_services_monitoring: Optional[pulumi.Input[bool]] = None):
        if audit_systemtime_change is not None:
            pulumi.set(__self__, "audit_systemtime_change", audit_systemtime_change)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monitor_audit_log_integrity is not None:
            pulumi.set(__self__, "monitor_audit_log_integrity", monitor_audit_log_integrity)
        if windows_services_monitoring is not None:
            pulumi.set(__self__, "windows_services_monitoring", windows_services_monitoring)

    @property
    @pulumi.getter(name="auditSystemtimeChange")
    def audit_systemtime_change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_systemtime_change")

    @audit_systemtime_change.setter
    def audit_systemtime_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_systemtime_change", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="monitorAuditLogIntegrity")
    def monitor_audit_log_integrity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitor_audit_log_integrity")

    @monitor_audit_log_integrity.setter
    def monitor_audit_log_integrity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_audit_log_integrity", value)

    @property
    @pulumi.getter(name="windowsServicesMonitoring")
    def windows_services_monitoring(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "windows_services_monitoring")

    @windows_services_monitoring.setter
    def windows_services_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "windows_services_monitoring", value)


@pulumi.input_type
class ContainerRuntimePolicyTripwireArgs:
    def __init__(__self__, *,
                 apply_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 serverless_app: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None):
        if apply_ons is not None:
            pulumi.set(__self__, "apply_ons", apply_ons)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if serverless_app is not None:
            pulumi.set(__self__, "serverless_app", serverless_app)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="applyOns")
    def apply_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "apply_ons")

    @apply_ons.setter
    def apply_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "apply_ons", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serverlessApp")
    def serverless_app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serverless_app")

    @serverless_app.setter
    def serverless_app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverless_app", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password", value)


@pulumi.input_type
class ContainerRuntimePolicyWhitelistedOsUsersArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_white_lists is not None:
            pulumi.set(__self__, "group_white_lists", group_white_lists)
        if user_white_lists is not None:
            pulumi.set(__self__, "user_white_lists", user_white_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupWhiteLists")
    def group_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_white_lists")

    @group_white_lists.setter
    def group_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_white_lists", value)

    @property
    @pulumi.getter(name="userWhiteLists")
    def user_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_white_lists")

    @user_white_lists.setter
    def user_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_white_lists", value)


@pulumi.input_type
class EnforcerGroupsCommandArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 kubernetes: Optional[pulumi.Input[str]] = None,
                 swarm: Optional[pulumi.Input[str]] = None,
                 windows: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if swarm is not None:
            pulumi.set(__self__, "swarm", swarm)
        if windows is not None:
            pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def swarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "swarm")

    @swarm.setter
    def swarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "swarm", value)

    @property
    @pulumi.getter
    def windows(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "windows")

    @windows.setter
    def windows(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows", value)


@pulumi.input_type
class EnforcerGroupsOrchestratorArgs:
    def __init__(__self__, *,
                 master: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] namespace: May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        :param pulumi.Input[str] service_account: May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        if master is not None:
            pulumi.set(__self__, "master", master)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FirewallPolicyInboundNetworkArgs:
    def __init__(__self__, *,
                 allow: pulumi.Input[bool],
                 port_range: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] allow: Indicates whether the specified resources are allowed to pass in data or requests.
        :param pulumi.Input[str] port_range: Range of ports affected by firewall.
        :param pulumi.Input[str] resource_type: Type of the resource
        :param pulumi.Input[str] resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> pulumi.Input[bool]:
        """
        Indicates whether the specified resources are allowed to pass in data or requests.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> pulumi.Input[str]:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class FirewallPolicyOutboundNetworkArgs:
    def __init__(__self__, *,
                 allow: pulumi.Input[bool],
                 port_range: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param pulumi.Input[str] port_range: Range of ports affected by firewall.
        :param pulumi.Input[str] resource_type: Type of the resource.
        :param pulumi.Input[str] resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> pulumi.Input[bool]:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> pulumi.Input[str]:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class FunctionAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class FunctionAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class FunctionAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionAssurancePolicyKubernetesControlArgs:
    def __init__(__self__, *,
                 avd_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ootb: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avd_id")

    @avd_id.setter
    def avd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avd_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ootb(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ootb")

    @ootb.setter
    def ootb(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ootb", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class FunctionAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class FunctionAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class FunctionAssurancePolicyPolicySettingsArgs:
    def __init__(__self__, *,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 is_audit_checked: Optional[pulumi.Input[bool]] = None,
                 warn: Optional[pulumi.Input[bool]] = None,
                 warning_message: Optional[pulumi.Input[str]] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_audit_checked")

    @is_audit_checked.setter
    def is_audit_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_audit_checked", value)

    @property
    @pulumi.getter
    def warn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "warn")

    @warn.setter
    def warn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "warn", value)

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_message")

    @warning_message.setter
    def warning_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_message", value)


@pulumi.input_type
class FunctionAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class FunctionAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class FunctionRuntimePolicyAllowedExecutableArgs:
    def __init__(__self__, *,
                 allow_executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_root_executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 separate_executables: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_executables: List of allowed executables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_root_executables: List of allowed root executables.
        :param pulumi.Input[bool] enabled: Whether allowed executables configuration is enabled.
        :param pulumi.Input[bool] separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @allow_executables.setter
    def allow_executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_executables", value)

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @allow_root_executables.setter
    def allow_root_executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_root_executables", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")

    @separate_executables.setter
    def separate_executables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "separate_executables", value)


@pulumi.input_type
class FunctionRuntimePolicyAllowedRegistryArgs:
    def __init__(__self__, *,
                 allowed_registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_registries: List of allowed registries.
        :param pulumi.Input[bool] enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @allowed_registries.setter
    def allowed_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_registries", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class FunctionRuntimePolicyAuditingArgs:
    def __init__(__self__, *,
                 audit_all_network: Optional[pulumi.Input[bool]] = None,
                 audit_all_processes: Optional[pulumi.Input[bool]] = None,
                 audit_failed_login: Optional[pulumi.Input[bool]] = None,
                 audit_os_user_activity: Optional[pulumi.Input[bool]] = None,
                 audit_process_cmdline: Optional[pulumi.Input[bool]] = None,
                 audit_success_login: Optional[pulumi.Input[bool]] = None,
                 audit_user_account_management: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_all_network")

    @audit_all_network.setter
    def audit_all_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_all_network", value)

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_all_processes")

    @audit_all_processes.setter
    def audit_all_processes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_all_processes", value)

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_failed_login")

    @audit_failed_login.setter
    def audit_failed_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_failed_login", value)

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_os_user_activity")

    @audit_os_user_activity.setter
    def audit_os_user_activity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_os_user_activity", value)

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_process_cmdline")

    @audit_process_cmdline.setter
    def audit_process_cmdline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_process_cmdline", value)

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_success_login")

    @audit_success_login.setter
    def audit_success_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_success_login", value)

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_user_account_management")

    @audit_user_account_management.setter
    def audit_user_account_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_user_account_management", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class FunctionRuntimePolicyBlacklistedOsUsersArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_black_lists is not None:
            pulumi.set(__self__, "group_black_lists", group_black_lists)
        if user_black_lists is not None:
            pulumi.set(__self__, "user_black_lists", user_black_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupBlackLists")
    def group_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_black_lists")

    @group_black_lists.setter
    def group_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_black_lists", value)

    @property
    @pulumi.getter(name="userBlackLists")
    def user_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_black_lists")

    @user_black_lists.setter
    def user_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_black_lists", value)


@pulumi.input_type
class FunctionRuntimePolicyBypassScopeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeArgs']]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether bypassing the scope is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeArgs']]] scopes: Scope configuration.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether bypassing the scope is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeArgs']]]]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeArgs']]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class FunctionRuntimePolicyBypassScopeScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeVariableArgs']]]] = None):
        """
        :param pulumi.Input[str] expression: Scope expression.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeVariableArgs']]] variables: List of variables in the scope.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeVariableArgs']]]]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyBypassScopeScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class FunctionRuntimePolicyBypassScopeScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute: Variable attribute.
        :param pulumi.Input[str] value: Variable value.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Variable attribute.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionRuntimePolicyContainerExecArgs:
    def __init__(__self__, *,
                 block_container_exec: Optional[pulumi.Input[bool]] = None,
                 container_exec_proc_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 reverse_shell_ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_container_exec")

    @block_container_exec.setter
    def block_container_exec(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_container_exec", value)

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @container_exec_proc_white_lists.setter
    def container_exec_proc_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_exec_proc_white_lists", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @reverse_shell_ip_white_lists.setter
    def reverse_shell_ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_ip_white_lists", value)


@pulumi.input_type
class FunctionRuntimePolicyDriftPreventionArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exec_lockdown: Optional[pulumi.Input[bool]] = None,
                 exec_lockdown_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_lockdown: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether drift prevention is enabled.
        :param pulumi.Input[bool] exec_lockdown: Whether to lockdown execution drift.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param pulumi.Input[bool] image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @exec_lockdown.setter
    def exec_lockdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exec_lockdown", value)

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @exec_lockdown_white_lists.setter
    def exec_lockdown_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_lockdown_white_lists", value)

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")

    @image_lockdown.setter
    def image_lockdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_lockdown", value)


@pulumi.input_type
class FunctionRuntimePolicyExecutableBlacklistArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether the executable blacklist is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "executables", value)


@pulumi.input_type
class FunctionRuntimePolicyFailedKubernetesChecksArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 failed_checks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed_checks is not None:
            pulumi.set(__self__, "failed_checks", failed_checks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failedChecks")
    def failed_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "failed_checks")

    @failed_checks.setter
    def failed_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "failed_checks", value)


@pulumi.input_type
class FunctionRuntimePolicyFileBlockArgs:
    def __init__(__self__, *,
                 block_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_block_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filename_block_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_files_processes")

    @block_files_processes.setter
    def block_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_files_processes", value)

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_files_users")

    @block_files_users.setter
    def block_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_files_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files")

    @exceptional_block_files.setter
    def exceptional_block_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @exceptional_block_files_processes.setter
    def exceptional_block_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @exceptional_block_files_users.setter
    def exceptional_block_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files_users", value)

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filename_block_lists")

    @filename_block_lists.setter
    def filename_block_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filename_block_lists", value)


@pulumi.input_type
class FunctionRuntimePolicyFileIntegrityMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files_attributes: Optional[pulumi.Input[bool]] = None,
                 monitored_files_create: Optional[pulumi.Input[bool]] = None,
                 monitored_files_delete: Optional[pulumi.Input[bool]] = None,
                 monitored_files_modify: Optional[pulumi.Input[bool]] = None,
                 monitored_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files_read: Optional[pulumi.Input[bool]] = None,
                 monitored_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: If true, file integrity monitoring is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files: List of paths to be monitored.
        :param pulumi.Input[bool] monitored_files_attributes: Whether to monitor file attribute operations.
        :param pulumi.Input[bool] monitored_files_create: Whether to monitor file create operations.
        :param pulumi.Input[bool] monitored_files_delete: Whether to monitor file delete operations.
        :param pulumi.Input[bool] monitored_files_modify: Whether to monitor file modify operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files_processes: List of processes associated with monitored files.
        :param pulumi.Input[bool] monitored_files_read: Whether to monitor file read operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @exceptional_monitored_files.setter
    def exceptional_monitored_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @exceptional_monitored_files_processes.setter
    def exceptional_monitored_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @exceptional_monitored_files_users.setter
    def exceptional_monitored_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files_users", value)

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @monitored_files.setter
    def monitored_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files", value)

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @monitored_files_attributes.setter
    def monitored_files_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_attributes", value)

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @monitored_files_create.setter
    def monitored_files_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_create", value)

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @monitored_files_delete.setter
    def monitored_files_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_delete", value)

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @monitored_files_modify.setter
    def monitored_files_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_modify", value)

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @monitored_files_processes.setter
    def monitored_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files_processes", value)

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @monitored_files_read.setter
    def monitored_files_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_read", value)

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")

    @monitored_files_users.setter
    def monitored_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files_users", value)


@pulumi.input_type
class FunctionRuntimePolicyLimitContainerPrivilegeArgs:
    def __init__(__self__, *,
                 block_add_capabilities: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipcmode: Optional[pulumi.Input[bool]] = None,
                 netmode: Optional[pulumi.Input[bool]] = None,
                 pidmode: Optional[pulumi.Input[bool]] = None,
                 prevent_low_port_binding: Optional[pulumi.Input[bool]] = None,
                 prevent_root_user: Optional[pulumi.Input[bool]] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 use_host_user: Optional[pulumi.Input[bool]] = None,
                 usermode: Optional[pulumi.Input[bool]] = None,
                 utsmode: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] block_add_capabilities: Whether to block adding capabilities.
        :param pulumi.Input[bool] enabled: Whether container privilege limitations are enabled.
        :param pulumi.Input[bool] ipcmode: Whether to limit IPC-related capabilities.
        :param pulumi.Input[bool] netmode: Whether to limit network-related capabilities.
        :param pulumi.Input[bool] pidmode: Whether to limit process-related capabilities.
        :param pulumi.Input[bool] prevent_low_port_binding: Whether to prevent low port binding.
        :param pulumi.Input[bool] prevent_root_user: Whether to prevent the use of the root user.
        :param pulumi.Input[bool] privileged: Whether the container is run in privileged mode.
        :param pulumi.Input[bool] use_host_user: Whether to use the host user.
        :param pulumi.Input[bool] usermode: Whether to limit user-related capabilities.
        :param pulumi.Input[bool] utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @block_add_capabilities.setter
    def block_add_capabilities(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_add_capabilities", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @ipcmode.setter
    def ipcmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipcmode", value)

    @property
    @pulumi.getter
    def netmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @netmode.setter
    def netmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "netmode", value)

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @pidmode.setter
    def pidmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pidmode", value)

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @prevent_low_port_binding.setter
    def prevent_low_port_binding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_low_port_binding", value)

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @prevent_root_user.setter
    def prevent_root_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_root_user", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @use_host_user.setter
    def use_host_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_host_user", value)

    @property
    @pulumi.getter
    def usermode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @usermode.setter
    def usermode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usermode", value)

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")

    @utsmode.setter
    def utsmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "utsmode", value)


@pulumi.input_type
class FunctionRuntimePolicyLinuxCapabilitiesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 remove_linux_capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if remove_linux_capabilities is not None:
            pulumi.set(__self__, "remove_linux_capabilities", remove_linux_capabilities)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="removeLinuxCapabilities")
    def remove_linux_capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "remove_linux_capabilities")

    @remove_linux_capabilities.setter
    def remove_linux_capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove_linux_capabilities", value)


@pulumi.input_type
class FunctionRuntimePolicyMalwareScanOptionsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_directories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_directories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] action: Set Action, Defaults to 'Alert' when empty
        :param pulumi.Input[bool] enabled: Defines if enabled or not
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_directories: List of registry paths to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_processes: List of registry processes to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @exclude_directories.setter
    def exclude_directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_directories", value)

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @exclude_processes.setter
    def exclude_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_processes", value)

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")

    @include_directories.setter
    def include_directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_directories", value)


@pulumi.input_type
class FunctionRuntimePolicyPackageBlockArgs:
    def __init__(__self__, *,
                 block_packages_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_packages_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_block_packages_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_packages_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_packages_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_packages_processes")

    @block_packages_processes.setter
    def block_packages_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_packages_processes", value)

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_packages_users")

    @block_packages_users.setter
    def block_packages_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_packages_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @exceptional_block_packages_files.setter
    def exceptional_block_packages_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @exceptional_block_packages_processes.setter
    def exceptional_block_packages_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @exceptional_block_packages_users.setter
    def exceptional_block_packages_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_users", value)

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "packages_black_lists")

    @packages_black_lists.setter
    def packages_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "packages_black_lists", value)


@pulumi.input_type
class FunctionRuntimePolicyPortBlockArgs:
    def __init__(__self__, *,
                 block_inbound_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_outbound_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_inbound_ports")

    @block_inbound_ports.setter
    def block_inbound_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_inbound_ports", value)

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_outbound_ports")

    @block_outbound_ports.setter
    def block_outbound_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_outbound_ports", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class FunctionRuntimePolicyReadonlyFilesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_readonly_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @exceptional_readonly_files.setter
    def exceptional_readonly_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @exceptional_readonly_files_processes.setter
    def exceptional_readonly_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @exceptional_readonly_files_users.setter
    def exceptional_readonly_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files_users", value)

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files")

    @readonly_files.setter
    def readonly_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files", value)

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files_processes")

    @readonly_files_processes.setter
    def readonly_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files_processes", value)

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files_users")

    @readonly_files_users.setter
    def readonly_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files_users", value)


@pulumi.input_type
class FunctionRuntimePolicyReadonlyRegistryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_readonly_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_registry_paths is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_paths", exceptional_readonly_registry_paths)
        if exceptional_readonly_registry_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_processes", exceptional_readonly_registry_processes)
        if exceptional_readonly_registry_users is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_users", exceptional_readonly_registry_users)
        if readonly_registry_paths is not None:
            pulumi.set(__self__, "readonly_registry_paths", readonly_registry_paths)
        if readonly_registry_processes is not None:
            pulumi.set(__self__, "readonly_registry_processes", readonly_registry_processes)
        if readonly_registry_users is not None:
            pulumi.set(__self__, "readonly_registry_users", readonly_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryPaths")
    def exceptional_readonly_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_paths")

    @exceptional_readonly_registry_paths.setter
    def exceptional_readonly_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_paths", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryProcesses")
    def exceptional_readonly_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_processes")

    @exceptional_readonly_registry_processes.setter
    def exceptional_readonly_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_processes", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryUsers")
    def exceptional_readonly_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_users")

    @exceptional_readonly_registry_users.setter
    def exceptional_readonly_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_users", value)

    @property
    @pulumi.getter(name="readonlyRegistryPaths")
    def readonly_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_paths")

    @readonly_registry_paths.setter
    def readonly_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_paths", value)

    @property
    @pulumi.getter(name="readonlyRegistryProcesses")
    def readonly_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_processes")

    @readonly_registry_processes.setter
    def readonly_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_processes", value)

    @property
    @pulumi.getter(name="readonlyRegistryUsers")
    def readonly_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_users")

    @readonly_registry_users.setter
    def readonly_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_users", value)


@pulumi.input_type
class FunctionRuntimePolicyRegistryAccessMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_attributes: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_create: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_delete: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_modify: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_read: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_registry_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_paths", exceptional_monitored_registry_paths)
        if exceptional_monitored_registry_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_processes", exceptional_monitored_registry_processes)
        if exceptional_monitored_registry_users is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_users", exceptional_monitored_registry_users)
        if monitored_registry_attributes is not None:
            pulumi.set(__self__, "monitored_registry_attributes", monitored_registry_attributes)
        if monitored_registry_create is not None:
            pulumi.set(__self__, "monitored_registry_create", monitored_registry_create)
        if monitored_registry_delete is not None:
            pulumi.set(__self__, "monitored_registry_delete", monitored_registry_delete)
        if monitored_registry_modify is not None:
            pulumi.set(__self__, "monitored_registry_modify", monitored_registry_modify)
        if monitored_registry_paths is not None:
            pulumi.set(__self__, "monitored_registry_paths", monitored_registry_paths)
        if monitored_registry_processes is not None:
            pulumi.set(__self__, "monitored_registry_processes", monitored_registry_processes)
        if monitored_registry_read is not None:
            pulumi.set(__self__, "monitored_registry_read", monitored_registry_read)
        if monitored_registry_users is not None:
            pulumi.set(__self__, "monitored_registry_users", monitored_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryPaths")
    def exceptional_monitored_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_paths")

    @exceptional_monitored_registry_paths.setter
    def exceptional_monitored_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_paths", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryProcesses")
    def exceptional_monitored_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_processes")

    @exceptional_monitored_registry_processes.setter
    def exceptional_monitored_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryUsers")
    def exceptional_monitored_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_users")

    @exceptional_monitored_registry_users.setter
    def exceptional_monitored_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_users", value)

    @property
    @pulumi.getter(name="monitoredRegistryAttributes")
    def monitored_registry_attributes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_attributes")

    @monitored_registry_attributes.setter
    def monitored_registry_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_attributes", value)

    @property
    @pulumi.getter(name="monitoredRegistryCreate")
    def monitored_registry_create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_create")

    @monitored_registry_create.setter
    def monitored_registry_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_create", value)

    @property
    @pulumi.getter(name="monitoredRegistryDelete")
    def monitored_registry_delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_delete")

    @monitored_registry_delete.setter
    def monitored_registry_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_delete", value)

    @property
    @pulumi.getter(name="monitoredRegistryModify")
    def monitored_registry_modify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_modify")

    @monitored_registry_modify.setter
    def monitored_registry_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_modify", value)

    @property
    @pulumi.getter(name="monitoredRegistryPaths")
    def monitored_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_paths")

    @monitored_registry_paths.setter
    def monitored_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_paths", value)

    @property
    @pulumi.getter(name="monitoredRegistryProcesses")
    def monitored_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_processes")

    @monitored_registry_processes.setter
    def monitored_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_processes", value)

    @property
    @pulumi.getter(name="monitoredRegistryRead")
    def monitored_registry_read(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_read")

    @monitored_registry_read.setter
    def monitored_registry_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_read", value)

    @property
    @pulumi.getter(name="monitoredRegistryUsers")
    def monitored_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_users")

    @monitored_registry_users.setter
    def monitored_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_users", value)


@pulumi.input_type
class FunctionRuntimePolicyRestrictedVolumeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether restricted volumes are enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class FunctionRuntimePolicyReverseShellArgs:
    def __init__(__self__, *,
                 block_reverse_shell: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 reverse_shell_ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reverse_shell_proc_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_reverse_shell is not None:
            pulumi.set(__self__, "block_reverse_shell", block_reverse_shell)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)
        if reverse_shell_proc_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_proc_white_lists", reverse_shell_proc_white_lists)

    @property
    @pulumi.getter(name="blockReverseShell")
    def block_reverse_shell(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_reverse_shell")

    @block_reverse_shell.setter
    def block_reverse_shell(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_reverse_shell", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @reverse_shell_ip_white_lists.setter
    def reverse_shell_ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_ip_white_lists", value)

    @property
    @pulumi.getter(name="reverseShellProcWhiteLists")
    def reverse_shell_proc_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_proc_white_lists")

    @reverse_shell_proc_white_lists.setter
    def reverse_shell_proc_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_proc_white_lists", value)


@pulumi.input_type
class FunctionRuntimePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 variables: pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyScopeVariableArgs']]]):
        """
        :param pulumi.Input[str] expression: Scope expression.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyScopeVariableArgs']]] variables: List of variables in the scope.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyScopeVariableArgs']]]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Sequence[pulumi.Input['FunctionRuntimePolicyScopeVariableArgs']]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class FunctionRuntimePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 value: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        :param pulumi.Input[str] name: Name assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FunctionRuntimePolicySystemIntegrityProtectionArgs:
    def __init__(__self__, *,
                 audit_systemtime_change: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 monitor_audit_log_integrity: Optional[pulumi.Input[bool]] = None,
                 windows_services_monitoring: Optional[pulumi.Input[bool]] = None):
        if audit_systemtime_change is not None:
            pulumi.set(__self__, "audit_systemtime_change", audit_systemtime_change)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monitor_audit_log_integrity is not None:
            pulumi.set(__self__, "monitor_audit_log_integrity", monitor_audit_log_integrity)
        if windows_services_monitoring is not None:
            pulumi.set(__self__, "windows_services_monitoring", windows_services_monitoring)

    @property
    @pulumi.getter(name="auditSystemtimeChange")
    def audit_systemtime_change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_systemtime_change")

    @audit_systemtime_change.setter
    def audit_systemtime_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_systemtime_change", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="monitorAuditLogIntegrity")
    def monitor_audit_log_integrity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitor_audit_log_integrity")

    @monitor_audit_log_integrity.setter
    def monitor_audit_log_integrity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_audit_log_integrity", value)

    @property
    @pulumi.getter(name="windowsServicesMonitoring")
    def windows_services_monitoring(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "windows_services_monitoring")

    @windows_services_monitoring.setter
    def windows_services_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "windows_services_monitoring", value)


@pulumi.input_type
class FunctionRuntimePolicyTripwireArgs:
    def __init__(__self__, *,
                 apply_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 serverless_app: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None):
        if apply_ons is not None:
            pulumi.set(__self__, "apply_ons", apply_ons)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if serverless_app is not None:
            pulumi.set(__self__, "serverless_app", serverless_app)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="applyOns")
    def apply_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "apply_ons")

    @apply_ons.setter
    def apply_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "apply_ons", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serverlessApp")
    def serverless_app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serverless_app")

    @serverless_app.setter
    def serverless_app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverless_app", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password", value)


@pulumi.input_type
class FunctionRuntimePolicyWhitelistedOsUsersArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_white_lists is not None:
            pulumi.set(__self__, "group_white_lists", group_white_lists)
        if user_white_lists is not None:
            pulumi.set(__self__, "user_white_lists", user_white_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupWhiteLists")
    def group_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_white_lists")

    @group_white_lists.setter
    def group_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_white_lists", value)

    @property
    @pulumi.getter(name="userWhiteLists")
    def user_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_white_lists")

    @user_white_lists.setter
    def user_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_white_lists", value)


@pulumi.input_type
class HostAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class HostAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class HostAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class HostAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class HostAssurancePolicyPolicySettingsArgs:
    def __init__(__self__, *,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 is_audit_checked: Optional[pulumi.Input[bool]] = None,
                 warn: Optional[pulumi.Input[bool]] = None,
                 warning_message: Optional[pulumi.Input[str]] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_audit_checked")

    @is_audit_checked.setter
    def is_audit_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_audit_checked", value)

    @property
    @pulumi.getter
    def warn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "warn")

    @warn.setter
    def warn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "warn", value)

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_message")

    @warning_message.setter
    def warning_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_message", value)


@pulumi.input_type
class HostAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['HostAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class HostAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class HostRuntimePolicyAllowedExecutableArgs:
    def __init__(__self__, *,
                 allow_executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_root_executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 separate_executables: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_executables: List of allowed executables.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_root_executables: List of allowed root executables.
        :param pulumi.Input[bool] enabled: Whether allowed executables configuration is enabled.
        :param pulumi.Input[bool] separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @allow_executables.setter
    def allow_executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_executables", value)

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @allow_root_executables.setter
    def allow_root_executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_root_executables", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")

    @separate_executables.setter
    def separate_executables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "separate_executables", value)


@pulumi.input_type
class HostRuntimePolicyAllowedRegistryArgs:
    def __init__(__self__, *,
                 allowed_registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_registries: List of allowed registries.
        :param pulumi.Input[bool] enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @allowed_registries.setter
    def allowed_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_registries", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class HostRuntimePolicyAuditingArgs:
    def __init__(__self__, *,
                 audit_all_network: Optional[pulumi.Input[bool]] = None,
                 audit_all_processes: Optional[pulumi.Input[bool]] = None,
                 audit_failed_login: Optional[pulumi.Input[bool]] = None,
                 audit_os_user_activity: Optional[pulumi.Input[bool]] = None,
                 audit_process_cmdline: Optional[pulumi.Input[bool]] = None,
                 audit_success_login: Optional[pulumi.Input[bool]] = None,
                 audit_user_account_management: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_all_network")

    @audit_all_network.setter
    def audit_all_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_all_network", value)

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_all_processes")

    @audit_all_processes.setter
    def audit_all_processes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_all_processes", value)

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_failed_login")

    @audit_failed_login.setter
    def audit_failed_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_failed_login", value)

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_os_user_activity")

    @audit_os_user_activity.setter
    def audit_os_user_activity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_os_user_activity", value)

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_process_cmdline")

    @audit_process_cmdline.setter
    def audit_process_cmdline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_process_cmdline", value)

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_success_login")

    @audit_success_login.setter
    def audit_success_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_success_login", value)

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_user_account_management")

    @audit_user_account_management.setter
    def audit_user_account_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_user_account_management", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class HostRuntimePolicyBlacklistedOsUsersArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_black_lists is not None:
            pulumi.set(__self__, "group_black_lists", group_black_lists)
        if user_black_lists is not None:
            pulumi.set(__self__, "user_black_lists", user_black_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupBlackLists")
    def group_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_black_lists")

    @group_black_lists.setter
    def group_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_black_lists", value)

    @property
    @pulumi.getter(name="userBlackLists")
    def user_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_black_lists")

    @user_black_lists.setter
    def user_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_black_lists", value)


@pulumi.input_type
class HostRuntimePolicyBypassScopeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeArgs']]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether bypassing the scope is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeArgs']]] scopes: Scope configuration.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether bypassing the scope is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeArgs']]]]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeArgs']]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class HostRuntimePolicyBypassScopeScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeVariableArgs']]]] = None):
        """
        :param pulumi.Input[str] expression: Scope expression.
        :param pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeVariableArgs']]] variables: List of variables in the scope.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeVariableArgs']]]]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyBypassScopeScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class HostRuntimePolicyBypassScopeScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute: Variable attribute.
        :param pulumi.Input[str] value: Variable value.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Variable attribute.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostRuntimePolicyContainerExecArgs:
    def __init__(__self__, *,
                 block_container_exec: Optional[pulumi.Input[bool]] = None,
                 container_exec_proc_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 reverse_shell_ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_container_exec")

    @block_container_exec.setter
    def block_container_exec(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_container_exec", value)

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @container_exec_proc_white_lists.setter
    def container_exec_proc_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_exec_proc_white_lists", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @reverse_shell_ip_white_lists.setter
    def reverse_shell_ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_ip_white_lists", value)


@pulumi.input_type
class HostRuntimePolicyDriftPreventionArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exec_lockdown: Optional[pulumi.Input[bool]] = None,
                 exec_lockdown_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_lockdown: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether drift prevention is enabled.
        :param pulumi.Input[bool] exec_lockdown: Whether to lockdown execution drift.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param pulumi.Input[bool] image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @exec_lockdown.setter
    def exec_lockdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exec_lockdown", value)

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @exec_lockdown_white_lists.setter
    def exec_lockdown_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_lockdown_white_lists", value)

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")

    @image_lockdown.setter
    def image_lockdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_lockdown", value)


@pulumi.input_type
class HostRuntimePolicyExecutableBlacklistArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 executables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether the executable blacklist is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "executables", value)


@pulumi.input_type
class HostRuntimePolicyFailedKubernetesChecksArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 failed_checks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed_checks is not None:
            pulumi.set(__self__, "failed_checks", failed_checks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failedChecks")
    def failed_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "failed_checks")

    @failed_checks.setter
    def failed_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "failed_checks", value)


@pulumi.input_type
class HostRuntimePolicyFileBlockArgs:
    def __init__(__self__, *,
                 block_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_block_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filename_block_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_files_processes")

    @block_files_processes.setter
    def block_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_files_processes", value)

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_files_users")

    @block_files_users.setter
    def block_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_files_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files")

    @exceptional_block_files.setter
    def exceptional_block_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @exceptional_block_files_processes.setter
    def exceptional_block_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @exceptional_block_files_users.setter
    def exceptional_block_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_files_users", value)

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filename_block_lists")

    @filename_block_lists.setter
    def filename_block_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filename_block_lists", value)


@pulumi.input_type
class HostRuntimePolicyFileIntegrityMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files_attributes: Optional[pulumi.Input[bool]] = None,
                 monitored_files_create: Optional[pulumi.Input[bool]] = None,
                 monitored_files_delete: Optional[pulumi.Input[bool]] = None,
                 monitored_files_modify: Optional[pulumi.Input[bool]] = None,
                 monitored_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_files_read: Optional[pulumi.Input[bool]] = None,
                 monitored_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: If true, file integrity monitoring is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files: List of paths to be monitored.
        :param pulumi.Input[bool] monitored_files_attributes: Whether to monitor file attribute operations.
        :param pulumi.Input[bool] monitored_files_create: Whether to monitor file create operations.
        :param pulumi.Input[bool] monitored_files_delete: Whether to monitor file delete operations.
        :param pulumi.Input[bool] monitored_files_modify: Whether to monitor file modify operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files_processes: List of processes associated with monitored files.
        :param pulumi.Input[bool] monitored_files_read: Whether to monitor file read operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @exceptional_monitored_files.setter
    def exceptional_monitored_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @exceptional_monitored_files_processes.setter
    def exceptional_monitored_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @exceptional_monitored_files_users.setter
    def exceptional_monitored_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_files_users", value)

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @monitored_files.setter
    def monitored_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files", value)

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @monitored_files_attributes.setter
    def monitored_files_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_attributes", value)

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @monitored_files_create.setter
    def monitored_files_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_create", value)

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @monitored_files_delete.setter
    def monitored_files_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_delete", value)

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @monitored_files_modify.setter
    def monitored_files_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_modify", value)

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @monitored_files_processes.setter
    def monitored_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files_processes", value)

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @monitored_files_read.setter
    def monitored_files_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_files_read", value)

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")

    @monitored_files_users.setter
    def monitored_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_files_users", value)


@pulumi.input_type
class HostRuntimePolicyLimitContainerPrivilegeArgs:
    def __init__(__self__, *,
                 block_add_capabilities: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipcmode: Optional[pulumi.Input[bool]] = None,
                 netmode: Optional[pulumi.Input[bool]] = None,
                 pidmode: Optional[pulumi.Input[bool]] = None,
                 prevent_low_port_binding: Optional[pulumi.Input[bool]] = None,
                 prevent_root_user: Optional[pulumi.Input[bool]] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 use_host_user: Optional[pulumi.Input[bool]] = None,
                 usermode: Optional[pulumi.Input[bool]] = None,
                 utsmode: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] block_add_capabilities: Whether to block adding capabilities.
        :param pulumi.Input[bool] enabled: Whether container privilege limitations are enabled.
        :param pulumi.Input[bool] ipcmode: Whether to limit IPC-related capabilities.
        :param pulumi.Input[bool] netmode: Whether to limit network-related capabilities.
        :param pulumi.Input[bool] pidmode: Whether to limit process-related capabilities.
        :param pulumi.Input[bool] prevent_low_port_binding: Whether to prevent low port binding.
        :param pulumi.Input[bool] prevent_root_user: Whether to prevent the use of the root user.
        :param pulumi.Input[bool] privileged: Whether the container is run in privileged mode.
        :param pulumi.Input[bool] use_host_user: Whether to use the host user.
        :param pulumi.Input[bool] usermode: Whether to limit user-related capabilities.
        :param pulumi.Input[bool] utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @block_add_capabilities.setter
    def block_add_capabilities(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_add_capabilities", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @ipcmode.setter
    def ipcmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipcmode", value)

    @property
    @pulumi.getter
    def netmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @netmode.setter
    def netmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "netmode", value)

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @pidmode.setter
    def pidmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pidmode", value)

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @prevent_low_port_binding.setter
    def prevent_low_port_binding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_low_port_binding", value)

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @prevent_root_user.setter
    def prevent_root_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_root_user", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @use_host_user.setter
    def use_host_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_host_user", value)

    @property
    @pulumi.getter
    def usermode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @usermode.setter
    def usermode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usermode", value)

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")

    @utsmode.setter
    def utsmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "utsmode", value)


@pulumi.input_type
class HostRuntimePolicyLinuxCapabilitiesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 remove_linux_capabilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if remove_linux_capabilities is not None:
            pulumi.set(__self__, "remove_linux_capabilities", remove_linux_capabilities)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="removeLinuxCapabilities")
    def remove_linux_capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "remove_linux_capabilities")

    @remove_linux_capabilities.setter
    def remove_linux_capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove_linux_capabilities", value)


@pulumi.input_type
class HostRuntimePolicyMalwareScanOptionsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_directories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include_directories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] action: Set Action, Defaults to 'Alert' when empty
        :param pulumi.Input[bool] enabled: Defines if enabled or not
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_directories: List of registry paths to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_processes: List of registry processes to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @exclude_directories.setter
    def exclude_directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_directories", value)

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @exclude_processes.setter
    def exclude_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_processes", value)

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")

    @include_directories.setter
    def include_directories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_directories", value)


@pulumi.input_type
class HostRuntimePolicyPackageBlockArgs:
    def __init__(__self__, *,
                 block_packages_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_packages_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_block_packages_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_packages_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_block_packages_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_packages_processes")

    @block_packages_processes.setter
    def block_packages_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_packages_processes", value)

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_packages_users")

    @block_packages_users.setter
    def block_packages_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_packages_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @exceptional_block_packages_files.setter
    def exceptional_block_packages_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @exceptional_block_packages_processes.setter
    def exceptional_block_packages_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @exceptional_block_packages_users.setter
    def exceptional_block_packages_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_block_packages_users", value)

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "packages_black_lists")

    @packages_black_lists.setter
    def packages_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "packages_black_lists", value)


@pulumi.input_type
class HostRuntimePolicyPortBlockArgs:
    def __init__(__self__, *,
                 block_inbound_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 block_outbound_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_inbound_ports")

    @block_inbound_ports.setter
    def block_inbound_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_inbound_ports", value)

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "block_outbound_ports")

    @block_outbound_ports.setter
    def block_outbound_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "block_outbound_ports", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class HostRuntimePolicyReadonlyFilesArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_readonly_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_files_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @exceptional_readonly_files.setter
    def exceptional_readonly_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @exceptional_readonly_files_processes.setter
    def exceptional_readonly_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @exceptional_readonly_files_users.setter
    def exceptional_readonly_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_files_users", value)

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files")

    @readonly_files.setter
    def readonly_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files", value)

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files_processes")

    @readonly_files_processes.setter
    def readonly_files_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files_processes", value)

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_files_users")

    @readonly_files_users.setter
    def readonly_files_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_files_users", value)


@pulumi.input_type
class HostRuntimePolicyReadonlyRegistryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_readonly_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_readonly_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 readonly_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_registry_paths is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_paths", exceptional_readonly_registry_paths)
        if exceptional_readonly_registry_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_processes", exceptional_readonly_registry_processes)
        if exceptional_readonly_registry_users is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_users", exceptional_readonly_registry_users)
        if readonly_registry_paths is not None:
            pulumi.set(__self__, "readonly_registry_paths", readonly_registry_paths)
        if readonly_registry_processes is not None:
            pulumi.set(__self__, "readonly_registry_processes", readonly_registry_processes)
        if readonly_registry_users is not None:
            pulumi.set(__self__, "readonly_registry_users", readonly_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryPaths")
    def exceptional_readonly_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_paths")

    @exceptional_readonly_registry_paths.setter
    def exceptional_readonly_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_paths", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryProcesses")
    def exceptional_readonly_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_processes")

    @exceptional_readonly_registry_processes.setter
    def exceptional_readonly_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_processes", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryUsers")
    def exceptional_readonly_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_readonly_registry_users")

    @exceptional_readonly_registry_users.setter
    def exceptional_readonly_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_readonly_registry_users", value)

    @property
    @pulumi.getter(name="readonlyRegistryPaths")
    def readonly_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_paths")

    @readonly_registry_paths.setter
    def readonly_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_paths", value)

    @property
    @pulumi.getter(name="readonlyRegistryProcesses")
    def readonly_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_processes")

    @readonly_registry_processes.setter
    def readonly_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_processes", value)

    @property
    @pulumi.getter(name="readonlyRegistryUsers")
    def readonly_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "readonly_registry_users")

    @readonly_registry_users.setter
    def readonly_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_registry_users", value)


@pulumi.input_type
class HostRuntimePolicyRegistryAccessMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptional_monitored_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_attributes: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_create: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_delete: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_modify: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_registry_read: Optional[pulumi.Input[bool]] = None,
                 monitored_registry_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_registry_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_paths", exceptional_monitored_registry_paths)
        if exceptional_monitored_registry_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_processes", exceptional_monitored_registry_processes)
        if exceptional_monitored_registry_users is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_users", exceptional_monitored_registry_users)
        if monitored_registry_attributes is not None:
            pulumi.set(__self__, "monitored_registry_attributes", monitored_registry_attributes)
        if monitored_registry_create is not None:
            pulumi.set(__self__, "monitored_registry_create", monitored_registry_create)
        if monitored_registry_delete is not None:
            pulumi.set(__self__, "monitored_registry_delete", monitored_registry_delete)
        if monitored_registry_modify is not None:
            pulumi.set(__self__, "monitored_registry_modify", monitored_registry_modify)
        if monitored_registry_paths is not None:
            pulumi.set(__self__, "monitored_registry_paths", monitored_registry_paths)
        if monitored_registry_processes is not None:
            pulumi.set(__self__, "monitored_registry_processes", monitored_registry_processes)
        if monitored_registry_read is not None:
            pulumi.set(__self__, "monitored_registry_read", monitored_registry_read)
        if monitored_registry_users is not None:
            pulumi.set(__self__, "monitored_registry_users", monitored_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryPaths")
    def exceptional_monitored_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_paths")

    @exceptional_monitored_registry_paths.setter
    def exceptional_monitored_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_paths", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryProcesses")
    def exceptional_monitored_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_processes")

    @exceptional_monitored_registry_processes.setter
    def exceptional_monitored_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryUsers")
    def exceptional_monitored_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_registry_users")

    @exceptional_monitored_registry_users.setter
    def exceptional_monitored_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_registry_users", value)

    @property
    @pulumi.getter(name="monitoredRegistryAttributes")
    def monitored_registry_attributes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_attributes")

    @monitored_registry_attributes.setter
    def monitored_registry_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_attributes", value)

    @property
    @pulumi.getter(name="monitoredRegistryCreate")
    def monitored_registry_create(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_create")

    @monitored_registry_create.setter
    def monitored_registry_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_create", value)

    @property
    @pulumi.getter(name="monitoredRegistryDelete")
    def monitored_registry_delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_delete")

    @monitored_registry_delete.setter
    def monitored_registry_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_delete", value)

    @property
    @pulumi.getter(name="monitoredRegistryModify")
    def monitored_registry_modify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_modify")

    @monitored_registry_modify.setter
    def monitored_registry_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_modify", value)

    @property
    @pulumi.getter(name="monitoredRegistryPaths")
    def monitored_registry_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_paths")

    @monitored_registry_paths.setter
    def monitored_registry_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_paths", value)

    @property
    @pulumi.getter(name="monitoredRegistryProcesses")
    def monitored_registry_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_processes")

    @monitored_registry_processes.setter
    def monitored_registry_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_processes", value)

    @property
    @pulumi.getter(name="monitoredRegistryRead")
    def monitored_registry_read(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitored_registry_read")

    @monitored_registry_read.setter
    def monitored_registry_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitored_registry_read", value)

    @property
    @pulumi.getter(name="monitoredRegistryUsers")
    def monitored_registry_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_registry_users")

    @monitored_registry_users.setter
    def monitored_registry_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_registry_users", value)


@pulumi.input_type
class HostRuntimePolicyRestrictedVolumeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether restricted volumes are enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class HostRuntimePolicyReverseShellArgs:
    def __init__(__self__, *,
                 block_reverse_shell: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 reverse_shell_ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reverse_shell_proc_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if block_reverse_shell is not None:
            pulumi.set(__self__, "block_reverse_shell", block_reverse_shell)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)
        if reverse_shell_proc_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_proc_white_lists", reverse_shell_proc_white_lists)

    @property
    @pulumi.getter(name="blockReverseShell")
    def block_reverse_shell(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_reverse_shell")

    @block_reverse_shell.setter
    def block_reverse_shell(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_reverse_shell", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @reverse_shell_ip_white_lists.setter
    def reverse_shell_ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_ip_white_lists", value)

    @property
    @pulumi.getter(name="reverseShellProcWhiteLists")
    def reverse_shell_proc_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_shell_proc_white_lists")

    @reverse_shell_proc_white_lists.setter
    def reverse_shell_proc_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_shell_proc_white_lists", value)


@pulumi.input_type
class HostRuntimePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 variables: pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyScopeVariableArgs']]]):
        """
        :param pulumi.Input[str] expression: Scope expression.
        :param pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyScopeVariableArgs']]] variables: List of variables in the scope.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyScopeVariableArgs']]]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Sequence[pulumi.Input['HostRuntimePolicyScopeVariableArgs']]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class HostRuntimePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 value: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        :param pulumi.Input[str] name: Name assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HostRuntimePolicySystemIntegrityProtectionArgs:
    def __init__(__self__, *,
                 audit_systemtime_change: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 monitor_audit_log_integrity: Optional[pulumi.Input[bool]] = None,
                 windows_services_monitoring: Optional[pulumi.Input[bool]] = None):
        if audit_systemtime_change is not None:
            pulumi.set(__self__, "audit_systemtime_change", audit_systemtime_change)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monitor_audit_log_integrity is not None:
            pulumi.set(__self__, "monitor_audit_log_integrity", monitor_audit_log_integrity)
        if windows_services_monitoring is not None:
            pulumi.set(__self__, "windows_services_monitoring", windows_services_monitoring)

    @property
    @pulumi.getter(name="auditSystemtimeChange")
    def audit_systemtime_change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_systemtime_change")

    @audit_systemtime_change.setter
    def audit_systemtime_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_systemtime_change", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="monitorAuditLogIntegrity")
    def monitor_audit_log_integrity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitor_audit_log_integrity")

    @monitor_audit_log_integrity.setter
    def monitor_audit_log_integrity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_audit_log_integrity", value)

    @property
    @pulumi.getter(name="windowsServicesMonitoring")
    def windows_services_monitoring(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "windows_services_monitoring")

    @windows_services_monitoring.setter
    def windows_services_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "windows_services_monitoring", value)


@pulumi.input_type
class HostRuntimePolicyTripwireArgs:
    def __init__(__self__, *,
                 apply_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 serverless_app: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_password: Optional[pulumi.Input[str]] = None):
        if apply_ons is not None:
            pulumi.set(__self__, "apply_ons", apply_ons)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if serverless_app is not None:
            pulumi.set(__self__, "serverless_app", serverless_app)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="applyOns")
    def apply_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "apply_ons")

    @apply_ons.setter
    def apply_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "apply_ons", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="serverlessApp")
    def serverless_app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serverless_app")

    @serverless_app.setter
    def serverless_app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverless_app", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_password")

    @user_password.setter
    def user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_password", value)


@pulumi.input_type
class HostRuntimePolicyWhitelistedOsUsersArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_white_lists is not None:
            pulumi.set(__self__, "group_white_lists", group_white_lists)
        if user_white_lists is not None:
            pulumi.set(__self__, "user_white_lists", user_white_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupWhiteLists")
    def group_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_white_lists")

    @group_white_lists.setter
    def group_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_white_lists", value)

    @property
    @pulumi.getter(name="userWhiteLists")
    def user_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_white_lists")

    @user_white_lists.setter
    def user_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_white_lists", value)


@pulumi.input_type
class ImageAssuranceChecksPerformedArgs:
    def __init__(__self__, *,
                 assurance_type: Optional[pulumi.Input[str]] = None,
                 blocking: Optional[pulumi.Input[bool]] = None,
                 control: Optional[pulumi.Input[str]] = None,
                 dta_skipped: Optional[pulumi.Input[bool]] = None,
                 dta_skipped_reason: Optional[pulumi.Input[str]] = None,
                 failed: Optional[pulumi.Input[bool]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] assurance_type: The type of the Assurance Policy the check originated from.
        :param pulumi.Input[bool] blocking: Whether the check is blocking (i.e. a failure should trigger a disallow).
        :param pulumi.Input[str] control: The name of the image assurance control.
        :param pulumi.Input[bool] dta_skipped: If DTA was skipped.
        :param pulumi.Input[str] dta_skipped_reason: The reason why DTA was skipped.
        :param pulumi.Input[bool] failed: Whether the image failed the check.
        :param pulumi.Input[str] policy_name: The name of the Image Assurance Policy the check originated from.
        """
        if assurance_type is not None:
            pulumi.set(__self__, "assurance_type", assurance_type)
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if dta_skipped is not None:
            pulumi.set(__self__, "dta_skipped", dta_skipped)
        if dta_skipped_reason is not None:
            pulumi.set(__self__, "dta_skipped_reason", dta_skipped_reason)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the Assurance Policy the check originated from.
        """
        return pulumi.get(self, "assurance_type")

    @assurance_type.setter
    def assurance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assurance_type", value)

    @property
    @pulumi.getter
    def blocking(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the check is blocking (i.e. a failure should trigger a disallow).
        """
        return pulumi.get(self, "blocking")

    @blocking.setter
    def blocking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocking", value)

    @property
    @pulumi.getter
    def control(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the image assurance control.
        """
        return pulumi.get(self, "control")

    @control.setter
    def control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control", value)

    @property
    @pulumi.getter(name="dtaSkipped")
    def dta_skipped(self) -> Optional[pulumi.Input[bool]]:
        """
        If DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped")

    @dta_skipped.setter
    def dta_skipped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dta_skipped", value)

    @property
    @pulumi.getter(name="dtaSkippedReason")
    def dta_skipped_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason why DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped_reason")

    @dta_skipped_reason.setter
    def dta_skipped_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dta_skipped_reason", value)

    @property
    @pulumi.getter
    def failed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the image failed the check.
        """
        return pulumi.get(self, "failed")

    @failed.setter
    def failed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Image Assurance Policy the check originated from.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class ImageAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class ImageAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class ImageAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageAssurancePolicyKubernetesControlsArgs:
    def __init__(__self__, *,
                 avd_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ootb: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avd_id")

    @avd_id.setter
    def avd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avd_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ootb(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ootb")

    @ootb.setter
    def ootb(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ootb", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class ImageAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class ImageAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class ImageAssurancePolicyPolicySettingsArgs:
    def __init__(__self__, *,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 is_audit_checked: Optional[pulumi.Input[bool]] = None,
                 warn: Optional[pulumi.Input[bool]] = None,
                 warning_message: Optional[pulumi.Input[str]] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_audit_checked")

    @is_audit_checked.setter
    def is_audit_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_audit_checked", value)

    @property
    @pulumi.getter
    def warn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "warn")

    @warn.setter
    def warn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "warn", value)

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_message")

    @warning_message.setter
    def warning_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_message", value)


@pulumi.input_type
class ImageAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ImageAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ImageAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class ImageHistoryArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] comment: The commit comment for the image, if any.
        :param pulumi.Input[str] created: The date of creation of the layer.
        :param pulumi.Input[str] created_by: The command that generated the layer.
        :param pulumi.Input[str] id: The image ID of the layer (if any).
        :param pulumi.Input[int] size: The size of the image.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        The commit comment for the image, if any.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        The date of creation of the layer.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The command that generated the layer.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The image ID of the layer (if any).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the image.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class ImageVulnerabilityArgs:
    def __init__(__self__, *,
                 ack_author: Optional[pulumi.Input[str]] = None,
                 ack_comment: Optional[pulumi.Input[str]] = None,
                 ack_expiration_configured_at: Optional[pulumi.Input[str]] = None,
                 ack_expiration_configured_by: Optional[pulumi.Input[str]] = None,
                 ack_expiration_days: Optional[pulumi.Input[int]] = None,
                 ack_scope: Optional[pulumi.Input[str]] = None,
                 acknowledge_date: Optional[pulumi.Input[str]] = None,
                 ancestor_pkg: Optional[pulumi.Input[str]] = None,
                 aqua_score: Optional[pulumi.Input[float]] = None,
                 aqua_score_classification: Optional[pulumi.Input[str]] = None,
                 aqua_scoring_system: Optional[pulumi.Input[str]] = None,
                 aqua_severity: Optional[pulumi.Input[str]] = None,
                 aqua_severity_classification: Optional[pulumi.Input[str]] = None,
                 aqua_vectors: Optional[pulumi.Input[str]] = None,
                 audit_events_count: Optional[pulumi.Input[int]] = None,
                 block_events_count: Optional[pulumi.Input[int]] = None,
                 classification: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 digest: Optional[pulumi.Input[str]] = None,
                 exploit_reference: Optional[pulumi.Input[str]] = None,
                 exploit_type: Optional[pulumi.Input[str]] = None,
                 first_found_date: Optional[pulumi.Input[str]] = None,
                 fix_version: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 last_found_date: Optional[pulumi.Input[str]] = None,
                 modification_date: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nvd_cvss2_score: Optional[pulumi.Input[float]] = None,
                 nvd_cvss2_vectors: Optional[pulumi.Input[str]] = None,
                 nvd_cvss3_score: Optional[pulumi.Input[float]] = None,
                 nvd_cvss3_severity: Optional[pulumi.Input[str]] = None,
                 nvd_cvss3_vectors: Optional[pulumi.Input[str]] = None,
                 nvd_severity: Optional[pulumi.Input[str]] = None,
                 nvd_url: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 publish_date: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 resource_architecture: Optional[pulumi.Input[str]] = None,
                 resource_cpe: Optional[pulumi.Input[str]] = None,
                 resource_format: Optional[pulumi.Input[str]] = None,
                 resource_hash: Optional[pulumi.Input[str]] = None,
                 resource_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_path: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 severity_classification: Optional[pulumi.Input[str]] = None,
                 solution: Optional[pulumi.Input[str]] = None,
                 temporal_vector: Optional[pulumi.Input[str]] = None,
                 v_patch_applied_by: Optional[pulumi.Input[str]] = None,
                 v_patch_applied_on: Optional[pulumi.Input[str]] = None,
                 v_patch_enforced_by: Optional[pulumi.Input[str]] = None,
                 v_patch_enforced_on: Optional[pulumi.Input[str]] = None,
                 v_patch_policy_enforce: Optional[pulumi.Input[bool]] = None,
                 v_patch_policy_name: Optional[pulumi.Input[str]] = None,
                 v_patch_reverted_by: Optional[pulumi.Input[str]] = None,
                 v_patch_reverted_on: Optional[pulumi.Input[str]] = None,
                 v_patch_status: Optional[pulumi.Input[str]] = None,
                 vendor_cvss2_score: Optional[pulumi.Input[float]] = None,
                 vendor_cvss2_vectors: Optional[pulumi.Input[str]] = None,
                 vendor_severity: Optional[pulumi.Input[str]] = None,
                 vendor_statement: Optional[pulumi.Input[str]] = None,
                 vendor_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ancestor_pkg: The ancestor of this package.
        :param pulumi.Input[float] aqua_score: The score generated for the vulnerability by Aqua.
        :param pulumi.Input[str] aqua_score_classification: Score classification by Aqua.
        :param pulumi.Input[str] aqua_scoring_system: The score system for the vulnerability by Aqua
        :param pulumi.Input[str] aqua_severity: The severity generated for the vulnerability by Aqua.
        :param pulumi.Input[str] aqua_severity_classification: Classification of the severity defined by Aqua.
        :param pulumi.Input[str] aqua_vectors: The vectors generated for the vulnerability by Aqua
        :param pulumi.Input[int] audit_events_count: Number of audit events.
        :param pulumi.Input[int] block_events_count: Number of blocked events.
        :param pulumi.Input[str] classification: Classification of the vulnerability.
        :param pulumi.Input[str] description: The description of the vulnerability.
        :param pulumi.Input[str] digest: The content digest of the image.
        :param pulumi.Input[str] exploit_reference: Reference of the exploit.
        :param pulumi.Input[str] exploit_type: Type of the exploit.
        :param pulumi.Input[str] first_found_date: The date when this vulnerability was first found.
        :param pulumi.Input[str] fix_version: Fixed version of the resource.
        :param pulumi.Input[str] image_name: Name of the image.
        :param pulumi.Input[str] last_found_date: The date when this vulnerability was last found.
        :param pulumi.Input[str] modification_date: Thhe date when this vulnerability was modified.
        :param pulumi.Input[str] name: The name of the vulnerability.
        :param pulumi.Input[float] nvd_cvss2_score: CVSS2 score by NVD
        :param pulumi.Input[str] nvd_cvss2_vectors: CVSS2 vectors by NVD
        :param pulumi.Input[float] nvd_cvss3_score: CVSS3 score by NVD
        :param pulumi.Input[str] nvd_cvss3_severity: CVSS3 severity by NVD
        :param pulumi.Input[str] nvd_cvss3_vectors: CVSS3 vectors by NVD
        :param pulumi.Input[str] nvd_severity: Type of the severity identified by NVD.
        :param pulumi.Input[str] nvd_url: URL of the details of this vulnerability by NVD.
        :param pulumi.Input[str] os: Name of the Operating System.
        :param pulumi.Input[str] os_version: The version of the OS.
        :param pulumi.Input[str] permission: permission on the image
        :param pulumi.Input[str] publish_date: The date this vulnerability was published.
        :param pulumi.Input[str] registry: Registry of the image.
        :param pulumi.Input[str] repository: Repository of the image.
        :param pulumi.Input[str] resource_architecture: Architecture of the resource.
        :param pulumi.Input[str] resource_cpe: Common Platform Enumeration (CPE) of the resource.
        :param pulumi.Input[str] resource_format: Code format of the resource (java, apk etc.).
        :param pulumi.Input[str] resource_hash: Hash of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_licenses: List of license supported by the resource.
        :param pulumi.Input[str] resource_name: Name of the resource.
        :param pulumi.Input[str] resource_path: Path of the resource.
        :param pulumi.Input[str] resource_type: Type of the resource
        :param pulumi.Input[str] resource_version: Version of the resource.
        :param pulumi.Input[str] severity_classification: Classification of the severity.
        :param pulumi.Input[str] solution: Solution for the vulnerability.
        """
        if ack_author is not None:
            pulumi.set(__self__, "ack_author", ack_author)
        if ack_comment is not None:
            pulumi.set(__self__, "ack_comment", ack_comment)
        if ack_expiration_configured_at is not None:
            pulumi.set(__self__, "ack_expiration_configured_at", ack_expiration_configured_at)
        if ack_expiration_configured_by is not None:
            pulumi.set(__self__, "ack_expiration_configured_by", ack_expiration_configured_by)
        if ack_expiration_days is not None:
            pulumi.set(__self__, "ack_expiration_days", ack_expiration_days)
        if ack_scope is not None:
            pulumi.set(__self__, "ack_scope", ack_scope)
        if acknowledge_date is not None:
            pulumi.set(__self__, "acknowledge_date", acknowledge_date)
        if ancestor_pkg is not None:
            pulumi.set(__self__, "ancestor_pkg", ancestor_pkg)
        if aqua_score is not None:
            pulumi.set(__self__, "aqua_score", aqua_score)
        if aqua_score_classification is not None:
            pulumi.set(__self__, "aqua_score_classification", aqua_score_classification)
        if aqua_scoring_system is not None:
            pulumi.set(__self__, "aqua_scoring_system", aqua_scoring_system)
        if aqua_severity is not None:
            pulumi.set(__self__, "aqua_severity", aqua_severity)
        if aqua_severity_classification is not None:
            pulumi.set(__self__, "aqua_severity_classification", aqua_severity_classification)
        if aqua_vectors is not None:
            pulumi.set(__self__, "aqua_vectors", aqua_vectors)
        if audit_events_count is not None:
            pulumi.set(__self__, "audit_events_count", audit_events_count)
        if block_events_count is not None:
            pulumi.set(__self__, "block_events_count", block_events_count)
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if exploit_reference is not None:
            pulumi.set(__self__, "exploit_reference", exploit_reference)
        if exploit_type is not None:
            pulumi.set(__self__, "exploit_type", exploit_type)
        if first_found_date is not None:
            pulumi.set(__self__, "first_found_date", first_found_date)
        if fix_version is not None:
            pulumi.set(__self__, "fix_version", fix_version)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if last_found_date is not None:
            pulumi.set(__self__, "last_found_date", last_found_date)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nvd_cvss2_score is not None:
            pulumi.set(__self__, "nvd_cvss2_score", nvd_cvss2_score)
        if nvd_cvss2_vectors is not None:
            pulumi.set(__self__, "nvd_cvss2_vectors", nvd_cvss2_vectors)
        if nvd_cvss3_score is not None:
            pulumi.set(__self__, "nvd_cvss3_score", nvd_cvss3_score)
        if nvd_cvss3_severity is not None:
            pulumi.set(__self__, "nvd_cvss3_severity", nvd_cvss3_severity)
        if nvd_cvss3_vectors is not None:
            pulumi.set(__self__, "nvd_cvss3_vectors", nvd_cvss3_vectors)
        if nvd_severity is not None:
            pulumi.set(__self__, "nvd_severity", nvd_severity)
        if nvd_url is not None:
            pulumi.set(__self__, "nvd_url", nvd_url)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if publish_date is not None:
            pulumi.set(__self__, "publish_date", publish_date)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if resource_architecture is not None:
            pulumi.set(__self__, "resource_architecture", resource_architecture)
        if resource_cpe is not None:
            pulumi.set(__self__, "resource_cpe", resource_cpe)
        if resource_format is not None:
            pulumi.set(__self__, "resource_format", resource_format)
        if resource_hash is not None:
            pulumi.set(__self__, "resource_hash", resource_hash)
        if resource_licenses is not None:
            pulumi.set(__self__, "resource_licenses", resource_licenses)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if severity_classification is not None:
            pulumi.set(__self__, "severity_classification", severity_classification)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)
        if temporal_vector is not None:
            pulumi.set(__self__, "temporal_vector", temporal_vector)
        if v_patch_applied_by is not None:
            pulumi.set(__self__, "v_patch_applied_by", v_patch_applied_by)
        if v_patch_applied_on is not None:
            pulumi.set(__self__, "v_patch_applied_on", v_patch_applied_on)
        if v_patch_enforced_by is not None:
            pulumi.set(__self__, "v_patch_enforced_by", v_patch_enforced_by)
        if v_patch_enforced_on is not None:
            pulumi.set(__self__, "v_patch_enforced_on", v_patch_enforced_on)
        if v_patch_policy_enforce is not None:
            pulumi.set(__self__, "v_patch_policy_enforce", v_patch_policy_enforce)
        if v_patch_policy_name is not None:
            pulumi.set(__self__, "v_patch_policy_name", v_patch_policy_name)
        if v_patch_reverted_by is not None:
            pulumi.set(__self__, "v_patch_reverted_by", v_patch_reverted_by)
        if v_patch_reverted_on is not None:
            pulumi.set(__self__, "v_patch_reverted_on", v_patch_reverted_on)
        if v_patch_status is not None:
            pulumi.set(__self__, "v_patch_status", v_patch_status)
        if vendor_cvss2_score is not None:
            pulumi.set(__self__, "vendor_cvss2_score", vendor_cvss2_score)
        if vendor_cvss2_vectors is not None:
            pulumi.set(__self__, "vendor_cvss2_vectors", vendor_cvss2_vectors)
        if vendor_severity is not None:
            pulumi.set(__self__, "vendor_severity", vendor_severity)
        if vendor_statement is not None:
            pulumi.set(__self__, "vendor_statement", vendor_statement)
        if vendor_url is not None:
            pulumi.set(__self__, "vendor_url", vendor_url)

    @property
    @pulumi.getter(name="ackAuthor")
    def ack_author(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_author")

    @ack_author.setter
    def ack_author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_author", value)

    @property
    @pulumi.getter(name="ackComment")
    def ack_comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_comment")

    @ack_comment.setter
    def ack_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_comment", value)

    @property
    @pulumi.getter(name="ackExpirationConfiguredAt")
    def ack_expiration_configured_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_expiration_configured_at")

    @ack_expiration_configured_at.setter
    def ack_expiration_configured_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_expiration_configured_at", value)

    @property
    @pulumi.getter(name="ackExpirationConfiguredBy")
    def ack_expiration_configured_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_expiration_configured_by")

    @ack_expiration_configured_by.setter
    def ack_expiration_configured_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_expiration_configured_by", value)

    @property
    @pulumi.getter(name="ackExpirationDays")
    def ack_expiration_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ack_expiration_days")

    @ack_expiration_days.setter
    def ack_expiration_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_expiration_days", value)

    @property
    @pulumi.getter(name="ackScope")
    def ack_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_scope")

    @ack_scope.setter
    def ack_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_scope", value)

    @property
    @pulumi.getter(name="acknowledgeDate")
    def acknowledge_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acknowledge_date")

    @acknowledge_date.setter
    def acknowledge_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acknowledge_date", value)

    @property
    @pulumi.getter(name="ancestorPkg")
    def ancestor_pkg(self) -> Optional[pulumi.Input[str]]:
        """
        The ancestor of this package.
        """
        return pulumi.get(self, "ancestor_pkg")

    @ancestor_pkg.setter
    def ancestor_pkg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ancestor_pkg", value)

    @property
    @pulumi.getter(name="aquaScore")
    def aqua_score(self) -> Optional[pulumi.Input[float]]:
        """
        The score generated for the vulnerability by Aqua.
        """
        return pulumi.get(self, "aqua_score")

    @aqua_score.setter
    def aqua_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "aqua_score", value)

    @property
    @pulumi.getter(name="aquaScoreClassification")
    def aqua_score_classification(self) -> Optional[pulumi.Input[str]]:
        """
        Score classification by Aqua.
        """
        return pulumi.get(self, "aqua_score_classification")

    @aqua_score_classification.setter
    def aqua_score_classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_score_classification", value)

    @property
    @pulumi.getter(name="aquaScoringSystem")
    def aqua_scoring_system(self) -> Optional[pulumi.Input[str]]:
        """
        The score system for the vulnerability by Aqua
        """
        return pulumi.get(self, "aqua_scoring_system")

    @aqua_scoring_system.setter
    def aqua_scoring_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_scoring_system", value)

    @property
    @pulumi.getter(name="aquaSeverity")
    def aqua_severity(self) -> Optional[pulumi.Input[str]]:
        """
        The severity generated for the vulnerability by Aqua.
        """
        return pulumi.get(self, "aqua_severity")

    @aqua_severity.setter
    def aqua_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_severity", value)

    @property
    @pulumi.getter(name="aquaSeverityClassification")
    def aqua_severity_classification(self) -> Optional[pulumi.Input[str]]:
        """
        Classification of the severity defined by Aqua.
        """
        return pulumi.get(self, "aqua_severity_classification")

    @aqua_severity_classification.setter
    def aqua_severity_classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_severity_classification", value)

    @property
    @pulumi.getter(name="aquaVectors")
    def aqua_vectors(self) -> Optional[pulumi.Input[str]]:
        """
        The vectors generated for the vulnerability by Aqua
        """
        return pulumi.get(self, "aqua_vectors")

    @aqua_vectors.setter
    def aqua_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_vectors", value)

    @property
    @pulumi.getter(name="auditEventsCount")
    def audit_events_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of audit events.
        """
        return pulumi.get(self, "audit_events_count")

    @audit_events_count.setter
    def audit_events_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_events_count", value)

    @property
    @pulumi.getter(name="blockEventsCount")
    def block_events_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of blocked events.
        """
        return pulumi.get(self, "block_events_count")

    @block_events_count.setter
    def block_events_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_events_count", value)

    @property
    @pulumi.getter
    def classification(self) -> Optional[pulumi.Input[str]]:
        """
        Classification of the vulnerability.
        """
        return pulumi.get(self, "classification")

    @classification.setter
    def classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classification", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the vulnerability.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        """
        The content digest of the image.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter(name="exploitReference")
    def exploit_reference(self) -> Optional[pulumi.Input[str]]:
        """
        Reference of the exploit.
        """
        return pulumi.get(self, "exploit_reference")

    @exploit_reference.setter
    def exploit_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exploit_reference", value)

    @property
    @pulumi.getter(name="exploitType")
    def exploit_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the exploit.
        """
        return pulumi.get(self, "exploit_type")

    @exploit_type.setter
    def exploit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exploit_type", value)

    @property
    @pulumi.getter(name="firstFoundDate")
    def first_found_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date when this vulnerability was first found.
        """
        return pulumi.get(self, "first_found_date")

    @first_found_date.setter
    def first_found_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_found_date", value)

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> Optional[pulumi.Input[str]]:
        """
        Fixed version of the resource.
        """
        return pulumi.get(self, "fix_version")

    @fix_version.setter
    def fix_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fix_version", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="lastFoundDate")
    def last_found_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date when this vulnerability was last found.
        """
        return pulumi.get(self, "last_found_date")

    @last_found_date.setter
    def last_found_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_found_date", value)

    @property
    @pulumi.getter(name="modificationDate")
    def modification_date(self) -> Optional[pulumi.Input[str]]:
        """
        Thhe date when this vulnerability was modified.
        """
        return pulumi.get(self, "modification_date")

    @modification_date.setter
    def modification_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modification_date", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the vulnerability.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nvdCvss2Score")
    def nvd_cvss2_score(self) -> Optional[pulumi.Input[float]]:
        """
        CVSS2 score by NVD
        """
        return pulumi.get(self, "nvd_cvss2_score")

    @nvd_cvss2_score.setter
    def nvd_cvss2_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nvd_cvss2_score", value)

    @property
    @pulumi.getter(name="nvdCvss2Vectors")
    def nvd_cvss2_vectors(self) -> Optional[pulumi.Input[str]]:
        """
        CVSS2 vectors by NVD
        """
        return pulumi.get(self, "nvd_cvss2_vectors")

    @nvd_cvss2_vectors.setter
    def nvd_cvss2_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_cvss2_vectors", value)

    @property
    @pulumi.getter(name="nvdCvss3Score")
    def nvd_cvss3_score(self) -> Optional[pulumi.Input[float]]:
        """
        CVSS3 score by NVD
        """
        return pulumi.get(self, "nvd_cvss3_score")

    @nvd_cvss3_score.setter
    def nvd_cvss3_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nvd_cvss3_score", value)

    @property
    @pulumi.getter(name="nvdCvss3Severity")
    def nvd_cvss3_severity(self) -> Optional[pulumi.Input[str]]:
        """
        CVSS3 severity by NVD
        """
        return pulumi.get(self, "nvd_cvss3_severity")

    @nvd_cvss3_severity.setter
    def nvd_cvss3_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_cvss3_severity", value)

    @property
    @pulumi.getter(name="nvdCvss3Vectors")
    def nvd_cvss3_vectors(self) -> Optional[pulumi.Input[str]]:
        """
        CVSS3 vectors by NVD
        """
        return pulumi.get(self, "nvd_cvss3_vectors")

    @nvd_cvss3_vectors.setter
    def nvd_cvss3_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_cvss3_vectors", value)

    @property
    @pulumi.getter(name="nvdSeverity")
    def nvd_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the severity identified by NVD.
        """
        return pulumi.get(self, "nvd_severity")

    @nvd_severity.setter
    def nvd_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_severity", value)

    @property
    @pulumi.getter(name="nvdUrl")
    def nvd_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the details of this vulnerability by NVD.
        """
        return pulumi.get(self, "nvd_url")

    @nvd_url.setter
    def nvd_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_url", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Operating System.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the OS.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        """
        permission on the image
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="publishDate")
    def publish_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date this vulnerability was published.
        """
        return pulumi.get(self, "publish_date")

    @publish_date.setter
    def publish_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_date", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        """
        Registry of the image.
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Repository of the image.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="resourceArchitecture")
    def resource_architecture(self) -> Optional[pulumi.Input[str]]:
        """
        Architecture of the resource.
        """
        return pulumi.get(self, "resource_architecture")

    @resource_architecture.setter
    def resource_architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_architecture", value)

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> Optional[pulumi.Input[str]]:
        """
        Common Platform Enumeration (CPE) of the resource.
        """
        return pulumi.get(self, "resource_cpe")

    @resource_cpe.setter
    def resource_cpe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_cpe", value)

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> Optional[pulumi.Input[str]]:
        """
        Code format of the resource (java, apk etc.).
        """
        return pulumi.get(self, "resource_format")

    @resource_format.setter
    def resource_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_format", value)

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Hash of the resource.
        """
        return pulumi.get(self, "resource_hash")

    @resource_hash.setter
    def resource_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_hash", value)

    @property
    @pulumi.getter(name="resourceLicenses")
    def resource_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of license supported by the resource.
        """
        return pulumi.get(self, "resource_licenses")

    @resource_licenses.setter
    def resource_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_licenses", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the resource.
        """
        return pulumi.get(self, "resource_path")

    @resource_path.setter
    def resource_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_path", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the resource.
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter(name="severityClassification")
    def severity_classification(self) -> Optional[pulumi.Input[str]]:
        """
        Classification of the severity.
        """
        return pulumi.get(self, "severity_classification")

    @severity_classification.setter
    def severity_classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity_classification", value)

    @property
    @pulumi.getter
    def solution(self) -> Optional[pulumi.Input[str]]:
        """
        Solution for the vulnerability.
        """
        return pulumi.get(self, "solution")

    @solution.setter
    def solution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solution", value)

    @property
    @pulumi.getter(name="temporalVector")
    def temporal_vector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "temporal_vector")

    @temporal_vector.setter
    def temporal_vector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temporal_vector", value)

    @property
    @pulumi.getter(name="vPatchAppliedBy")
    def v_patch_applied_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_applied_by")

    @v_patch_applied_by.setter
    def v_patch_applied_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_applied_by", value)

    @property
    @pulumi.getter(name="vPatchAppliedOn")
    def v_patch_applied_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_applied_on")

    @v_patch_applied_on.setter
    def v_patch_applied_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_applied_on", value)

    @property
    @pulumi.getter(name="vPatchEnforcedBy")
    def v_patch_enforced_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_enforced_by")

    @v_patch_enforced_by.setter
    def v_patch_enforced_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_enforced_by", value)

    @property
    @pulumi.getter(name="vPatchEnforcedOn")
    def v_patch_enforced_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_enforced_on")

    @v_patch_enforced_on.setter
    def v_patch_enforced_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_enforced_on", value)

    @property
    @pulumi.getter(name="vPatchPolicyEnforce")
    def v_patch_policy_enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "v_patch_policy_enforce")

    @v_patch_policy_enforce.setter
    def v_patch_policy_enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "v_patch_policy_enforce", value)

    @property
    @pulumi.getter(name="vPatchPolicyName")
    def v_patch_policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_policy_name")

    @v_patch_policy_name.setter
    def v_patch_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_policy_name", value)

    @property
    @pulumi.getter(name="vPatchRevertedBy")
    def v_patch_reverted_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_reverted_by")

    @v_patch_reverted_by.setter
    def v_patch_reverted_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_reverted_by", value)

    @property
    @pulumi.getter(name="vPatchRevertedOn")
    def v_patch_reverted_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_reverted_on")

    @v_patch_reverted_on.setter
    def v_patch_reverted_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_reverted_on", value)

    @property
    @pulumi.getter(name="vPatchStatus")
    def v_patch_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_status")

    @v_patch_status.setter
    def v_patch_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_status", value)

    @property
    @pulumi.getter(name="vendorCvss2Score")
    def vendor_cvss2_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "vendor_cvss2_score")

    @vendor_cvss2_score.setter
    def vendor_cvss2_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "vendor_cvss2_score", value)

    @property
    @pulumi.getter(name="vendorCvss2Vectors")
    def vendor_cvss2_vectors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_cvss2_vectors")

    @vendor_cvss2_vectors.setter
    def vendor_cvss2_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_cvss2_vectors", value)

    @property
    @pulumi.getter(name="vendorSeverity")
    def vendor_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_severity")

    @vendor_severity.setter
    def vendor_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_severity", value)

    @property
    @pulumi.getter(name="vendorStatement")
    def vendor_statement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_statement")

    @vendor_statement.setter
    def vendor_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_statement", value)

    @property
    @pulumi.getter(name="vendorUrl")
    def vendor_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_url")

    @vendor_url.setter
    def vendor_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_url", value)


@pulumi.input_type
class IntegrationRegistryOptionArgs:
    def __init__(__self__, *,
                 option: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRegistryWebhookArgs:
    def __init__(__self__, *,
                 auth_token: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 un_quarantine: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if un_quarantine is not None:
            pulumi.set(__self__, "un_quarantine", un_quarantine)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="unQuarantine")
    def un_quarantine(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "un_quarantine")

    @un_quarantine.setter
    def un_quarantine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "un_quarantine", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class KubernetesAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class KubernetesAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class KubernetesAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KubernetesAssurancePolicyKubernetesControlArgs:
    def __init__(__self__, *,
                 avd_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ootb: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] avd_id: AVD ID.
        :param pulumi.Input[str] description: Description of the control.
        :param pulumi.Input[bool] enabled: Is the control enabled?
        :param pulumi.Input[str] kind: Kind of the control.
        :param pulumi.Input[str] name: Name of the control.
        :param pulumi.Input[bool] ootb: Out-of-the-box status of the control.
        :param pulumi.Input[int] script_id: Script ID.
        :param pulumi.Input[str] severity: Severity of the control.
        """
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[pulumi.Input[str]]:
        """
        AVD ID.
        """
        return pulumi.get(self, "avd_id")

    @avd_id.setter
    def avd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avd_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the control.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the control enabled?
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the control.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the control.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ootb(self) -> Optional[pulumi.Input[bool]]:
        """
        Out-of-the-box status of the control.
        """
        return pulumi.get(self, "ootb")

    @ootb.setter
    def ootb(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ootb", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[int]]:
        """
        Script ID.
        """
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity of the control.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class KubernetesAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class KubernetesAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class KubernetesAssurancePolicyPolicySettingsArgs:
    def __init__(__self__, *,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 is_audit_checked: Optional[pulumi.Input[bool]] = None,
                 warn: Optional[pulumi.Input[bool]] = None,
                 warning_message: Optional[pulumi.Input[str]] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_audit_checked")

    @is_audit_checked.setter
    def is_audit_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_audit_checked", value)

    @property
    @pulumi.getter
    def warn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "warn")

    @warn.setter
    def warn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "warn", value)

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_message")

    @warning_message.setter
    def warning_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_message", value)


@pulumi.input_type
class KubernetesAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KubernetesAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class KubernetesAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KubernetesAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class RoleMappingLdapArgs:
    def __init__(__self__, *,
                 role_mapping: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")

    @role_mapping.setter
    def role_mapping(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "role_mapping", value)


@pulumi.input_type
class RoleMappingOauth2Args:
    def __init__(__self__, *,
                 role_mapping: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")

    @role_mapping.setter
    def role_mapping(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "role_mapping", value)


@pulumi.input_type
class RoleMappingOpenidArgs:
    def __init__(__self__, *,
                 role_mapping: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")

    @role_mapping.setter
    def role_mapping(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "role_mapping", value)


@pulumi.input_type
class RoleMappingSamlArgs:
    def __init__(__self__, *,
                 role_mapping: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")

    @role_mapping.setter
    def role_mapping(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "role_mapping", value)


@pulumi.input_type
class ServiceScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] name: Name assigned to the attribute.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UserSaasGroupArgs:
    def __init__(__self__, *,
                 group_admin: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if group_admin is not None:
            pulumi.set(__self__, "group_admin", group_admin)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="groupAdmin")
    def group_admin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "group_admin")

    @group_admin.setter
    def group_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_admin", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSaasLoginArgs:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[int]] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class VmwareAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class VmwareAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class VmwareAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VmwareAssurancePolicyKubernetesControlArgs:
    def __init__(__self__, *,
                 avd_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ootb: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avd_id")

    @avd_id.setter
    def avd_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avd_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ootb(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ootb")

    @ootb.setter
    def ootb(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ootb", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class VmwareAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class VmwareAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class VmwareAssurancePolicyPolicySettingsArgs:
    def __init__(__self__, *,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 is_audit_checked: Optional[pulumi.Input[bool]] = None,
                 warn: Optional[pulumi.Input[bool]] = None,
                 warning_message: Optional[pulumi.Input[str]] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_audit_checked")

    @is_audit_checked.setter
    def is_audit_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_audit_checked", value)

    @property
    @pulumi.getter
    def warn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "warn")

    @warn.setter
    def warn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "warn", value)

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_message")

    @warning_message.setter
    def warning_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_message", value)


@pulumi.input_type
class VmwareAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VmwareAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class VmwareAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VmwareAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class GetApplicationScopeCategoryArgs:
    def __init__(__self__, *,
                 artifacts: Optional[Sequence['GetApplicationScopeCategoryArtifactArgs']] = None,
                 entity_scopes: Optional[Sequence['GetApplicationScopeCategoryEntityScopeArgs']] = None,
                 infrastructures: Optional[Sequence['GetApplicationScopeCategoryInfrastructureArgs']] = None,
                 workloads: Optional[Sequence['GetApplicationScopeCategoryWorkloadArgs']] = None):
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactArgs']]:
        return pulumi.get(self, "artifacts")

    @artifacts.setter
    def artifacts(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactArgs']]):
        pulumi.set(self, "artifacts", value)

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[Sequence['GetApplicationScopeCategoryEntityScopeArgs']]:
        return pulumi.get(self, "entity_scopes")

    @entity_scopes.setter
    def entity_scopes(self, value: Optional[Sequence['GetApplicationScopeCategoryEntityScopeArgs']]):
        pulumi.set(self, "entity_scopes", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureArgs']]:
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureArgs']]):
        pulumi.set(self, "infrastructures", value)

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadArgs']]:
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadArgs']]):
        pulumi.set(self, "workloads", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactArgs:
    def __init__(__self__, *,
                 cfs: Optional[Sequence['GetApplicationScopeCategoryArtifactCfArgs']] = None,
                 functions: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionArgs']] = None,
                 images: Optional[Sequence['GetApplicationScopeCategoryArtifactImageArgs']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactCfArgs']]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactCfArgs']]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionArgs']]:
        return pulumi.get(self, "functions")

    @functions.setter
    def functions(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionArgs']]):
        pulumi.set(self, "functions", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactImageArgs']]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactImageArgs']]):
        pulumi.set(self, "images", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactCfArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryArtifactCfVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactCfVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactCfVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactCfVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactFunctionArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactFunctionVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactImageArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryArtifactImageVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactImageVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactImageVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactImageVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryEntityScopeArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryEntityScopeVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryEntityScopeVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryEntityScopeVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryEntityScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureArgs:
    def __init__(__self__, *,
                 kubernetes: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteArgs']] = None,
                 os: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOArgs']] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteArgs']]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureOArgs']]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOArgs']]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureKuberneteArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureOArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureOVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureOVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadArgs:
    def __init__(__self__, *,
                 cfs: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfArgs']] = None,
                 kubernetes: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteArgs']] = None,
                 os: Optional[Sequence['GetApplicationScopeCategoryWorkloadOArgs']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadCfArgs']]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfArgs']]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteArgs']]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadOArgs']]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadOArgs']]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadCfArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadCfVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadCfVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadKuberneteArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadOArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryWorkloadOVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadOVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadOVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadOVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetContainerRuntimePolicyAllowedExecutableArgs:
    def __init__(__self__, *,
                 allow_executables: Optional[Sequence[str]] = None,
                 allow_root_executables: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 separate_executables: Optional[bool] = None):
        """
        :param Sequence[str] allow_executables: List of allowed executables.
        :param Sequence[str] allow_root_executables: List of allowed root executables.
        :param bool enabled: Whether allowed executables configuration is enabled.
        :param bool separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @allow_executables.setter
    def allow_executables(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allow_executables", value)

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @allow_root_executables.setter
    def allow_root_executables(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allow_root_executables", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[bool]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")

    @separate_executables.setter
    def separate_executables(self, value: Optional[bool]):
        pulumi.set(self, "separate_executables", value)


@pulumi.input_type
class GetContainerRuntimePolicyAllowedRegistryArgs:
    def __init__(__self__, *,
                 allowed_registries: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[str] allowed_registries: List of allowed registries.
        :param bool enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[Sequence[str]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @allowed_registries.setter
    def allowed_registries(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "allowed_registries", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GetContainerRuntimePolicyAuditingArgs:
    def __init__(__self__, *,
                 audit_all_network: Optional[bool] = None,
                 audit_all_processes: Optional[bool] = None,
                 audit_failed_login: Optional[bool] = None,
                 audit_os_user_activity: Optional[bool] = None,
                 audit_process_cmdline: Optional[bool] = None,
                 audit_success_login: Optional[bool] = None,
                 audit_user_account_management: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_network")

    @audit_all_network.setter
    def audit_all_network(self, value: Optional[bool]):
        pulumi.set(self, "audit_all_network", value)

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_processes")

    @audit_all_processes.setter
    def audit_all_processes(self, value: Optional[bool]):
        pulumi.set(self, "audit_all_processes", value)

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_failed_login")

    @audit_failed_login.setter
    def audit_failed_login(self, value: Optional[bool]):
        pulumi.set(self, "audit_failed_login", value)

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[bool]:
        return pulumi.get(self, "audit_os_user_activity")

    @audit_os_user_activity.setter
    def audit_os_user_activity(self, value: Optional[bool]):
        pulumi.set(self, "audit_os_user_activity", value)

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[bool]:
        return pulumi.get(self, "audit_process_cmdline")

    @audit_process_cmdline.setter
    def audit_process_cmdline(self, value: Optional[bool]):
        pulumi.set(self, "audit_process_cmdline", value)

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_success_login")

    @audit_success_login.setter
    def audit_success_login(self, value: Optional[bool]):
        pulumi.set(self, "audit_success_login", value)

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[bool]:
        return pulumi.get(self, "audit_user_account_management")

    @audit_user_account_management.setter
    def audit_user_account_management(self, value: Optional[bool]):
        pulumi.set(self, "audit_user_account_management", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GetContainerRuntimePolicyContainerExecArgs:
    def __init__(__self__, *,
                 block_container_exec: Optional[bool] = None,
                 container_exec_proc_white_lists: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[bool]:
        return pulumi.get(self, "block_container_exec")

    @block_container_exec.setter
    def block_container_exec(self, value: Optional[bool]):
        pulumi.set(self, "block_container_exec", value)

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @container_exec_proc_white_lists.setter
    def container_exec_proc_white_lists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "container_exec_proc_white_lists", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @reverse_shell_ip_white_lists.setter
    def reverse_shell_ip_white_lists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "reverse_shell_ip_white_lists", value)


@pulumi.input_type
class GetContainerRuntimePolicyFileBlockArgs:
    def __init__(__self__, *,
                 block_files_processes: Optional[Sequence[str]] = None,
                 block_files_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_files: Optional[Sequence[str]] = None,
                 exceptional_block_files_processes: Optional[Sequence[str]] = None,
                 exceptional_block_files_users: Optional[Sequence[str]] = None,
                 filename_block_lists: Optional[Sequence[str]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_processes")

    @block_files_processes.setter
    def block_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "block_files_processes", value)

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_users")

    @block_files_users.setter
    def block_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "block_files_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files")

    @exceptional_block_files.setter
    def exceptional_block_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_block_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @exceptional_block_files_processes.setter
    def exceptional_block_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_block_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @exceptional_block_files_users.setter
    def exceptional_block_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_block_files_users", value)

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filename_block_lists")

    @filename_block_lists.setter
    def filename_block_lists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "filename_block_lists", value)


@pulumi.input_type
class GetContainerRuntimePolicyFileIntegrityMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_files: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_users: Optional[Sequence[str]] = None,
                 monitored_files: Optional[Sequence[str]] = None,
                 monitored_files_attributes: Optional[bool] = None,
                 monitored_files_create: Optional[bool] = None,
                 monitored_files_delete: Optional[bool] = None,
                 monitored_files_modify: Optional[bool] = None,
                 monitored_files_processes: Optional[Sequence[str]] = None,
                 monitored_files_read: Optional[bool] = None,
                 monitored_files_users: Optional[Sequence[str]] = None):
        """
        :param bool enabled: If true, file integrity monitoring is enabled.
        :param Sequence[str] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param Sequence[str] monitored_files: List of paths to be monitored.
        :param bool monitored_files_attributes: Whether to monitor file attribute operations.
        :param bool monitored_files_create: Whether to monitor file create operations.
        :param bool monitored_files_delete: Whether to monitor file delete operations.
        :param bool monitored_files_modify: Whether to monitor file modify operations.
        :param Sequence[str] monitored_files_processes: List of processes associated with monitored files.
        :param bool monitored_files_read: Whether to monitor file read operations.
        :param Sequence[str] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @exceptional_monitored_files.setter
    def exceptional_monitored_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_monitored_files", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @exceptional_monitored_files_processes.setter
    def exceptional_monitored_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_monitored_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @exceptional_monitored_files_users.setter
    def exceptional_monitored_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_monitored_files_users", value)

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @monitored_files.setter
    def monitored_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitored_files", value)

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[bool]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @monitored_files_attributes.setter
    def monitored_files_attributes(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_attributes", value)

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[bool]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @monitored_files_create.setter
    def monitored_files_create(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_create", value)

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[bool]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @monitored_files_delete.setter
    def monitored_files_delete(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_delete", value)

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[bool]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @monitored_files_modify.setter
    def monitored_files_modify(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_modify", value)

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @monitored_files_processes.setter
    def monitored_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitored_files_processes", value)

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[bool]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @monitored_files_read.setter
    def monitored_files_read(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_read", value)

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")

    @monitored_files_users.setter
    def monitored_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitored_files_users", value)


@pulumi.input_type
class GetContainerRuntimePolicyLimitContainerPrivilegeArgs:
    def __init__(__self__, *,
                 block_add_capabilities: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ipcmode: Optional[bool] = None,
                 netmode: Optional[bool] = None,
                 pidmode: Optional[bool] = None,
                 prevent_low_port_binding: Optional[bool] = None,
                 prevent_root_user: Optional[bool] = None,
                 privileged: Optional[bool] = None,
                 use_host_user: Optional[bool] = None,
                 usermode: Optional[bool] = None,
                 utsmode: Optional[bool] = None):
        """
        :param bool block_add_capabilities: Whether to block adding capabilities.
        :param bool enabled: Whether container privilege limitations are enabled.
        :param bool ipcmode: Whether to limit IPC-related capabilities.
        :param bool netmode: Whether to limit network-related capabilities.
        :param bool pidmode: Whether to limit process-related capabilities.
        :param bool prevent_low_port_binding: Whether to prevent low port binding.
        :param bool prevent_root_user: Whether to prevent the use of the root user.
        :param bool privileged: Whether the container is run in privileged mode.
        :param bool use_host_user: Whether to use the host user.
        :param bool usermode: Whether to limit user-related capabilities.
        :param bool utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[bool]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @block_add_capabilities.setter
    def block_add_capabilities(self, value: Optional[bool]):
        pulumi.set(self, "block_add_capabilities", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[bool]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @ipcmode.setter
    def ipcmode(self, value: Optional[bool]):
        pulumi.set(self, "ipcmode", value)

    @property
    @pulumi.getter
    def netmode(self) -> Optional[bool]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @netmode.setter
    def netmode(self, value: Optional[bool]):
        pulumi.set(self, "netmode", value)

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[bool]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @pidmode.setter
    def pidmode(self, value: Optional[bool]):
        pulumi.set(self, "pidmode", value)

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[bool]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @prevent_low_port_binding.setter
    def prevent_low_port_binding(self, value: Optional[bool]):
        pulumi.set(self, "prevent_low_port_binding", value)

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[bool]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @prevent_root_user.setter
    def prevent_root_user(self, value: Optional[bool]):
        pulumi.set(self, "prevent_root_user", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[bool]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[bool]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @use_host_user.setter
    def use_host_user(self, value: Optional[bool]):
        pulumi.set(self, "use_host_user", value)

    @property
    @pulumi.getter
    def usermode(self) -> Optional[bool]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @usermode.setter
    def usermode(self, value: Optional[bool]):
        pulumi.set(self, "usermode", value)

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[bool]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")

    @utsmode.setter
    def utsmode(self, value: Optional[bool]):
        pulumi.set(self, "utsmode", value)


@pulumi.input_type
class GetContainerRuntimePolicyMalwareScanOptionArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exclude_directories: Optional[Sequence[str]] = None,
                 exclude_processes: Optional[Sequence[str]] = None,
                 include_directories: Optional[Sequence[str]] = None):
        """
        :param str action: Set Action, Defaults to 'Alert' when empty
        :param bool enabled: Defines if enabled or not
        :param Sequence[str] exclude_directories: List of registry paths to be excluded from being protected.
        :param Sequence[str] exclude_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @exclude_directories.setter
    def exclude_directories(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exclude_directories", value)

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @exclude_processes.setter
    def exclude_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exclude_processes", value)

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")

    @include_directories.setter
    def include_directories(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "include_directories", value)


@pulumi.input_type
class GetContainerRuntimePolicyPortBlockArgs:
    def __init__(__self__, *,
                 block_inbound_ports: Optional[Sequence[str]] = None,
                 block_outbound_ports: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_inbound_ports")

    @block_inbound_ports.setter
    def block_inbound_ports(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "block_inbound_ports", value)

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_outbound_ports")

    @block_outbound_ports.setter
    def block_outbound_ports(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "block_outbound_ports", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GetContainerRuntimePolicyReadonlyFilesArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_files: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_users: Optional[Sequence[str]] = None,
                 readonly_files: Optional[Sequence[str]] = None,
                 readonly_files_processes: Optional[Sequence[str]] = None,
                 readonly_files_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @exceptional_readonly_files.setter
    def exceptional_readonly_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_readonly_files", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @exceptional_readonly_files_processes.setter
    def exceptional_readonly_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_readonly_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @exceptional_readonly_files_users.setter
    def exceptional_readonly_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_readonly_files_users", value)

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files")

    @readonly_files.setter
    def readonly_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "readonly_files", value)

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_processes")

    @readonly_files_processes.setter
    def readonly_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "readonly_files_processes", value)

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_users")

    @readonly_files_users.setter
    def readonly_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "readonly_files_users", value)


@pulumi.input_type
class GetContainerRuntimePolicyRestrictedVolumeArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 volumes: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether restricted volumes are enabled.
        :param Sequence[str] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[str]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class GetFirewallPolicyOutboundNetworkArgs:
    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource: str,
                 resource_type: str):
        """
        :param bool allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource: Information of the resource.
        :param str resource_type: Type of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: bool):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: str):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: str):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: str):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class GetFunctionRuntimePolicyDriftPreventionArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exec_lockdown: Optional[bool] = None,
                 exec_lockdown_white_lists: Optional[Sequence[str]] = None,
                 image_lockdown: Optional[bool] = None):
        """
        :param bool enabled: Whether drift prevention is enabled.
        :param bool exec_lockdown: Whether to lockdown execution drift.
        :param Sequence[str] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param bool image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @exec_lockdown.setter
    def exec_lockdown(self, value: Optional[bool]):
        pulumi.set(self, "exec_lockdown", value)

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[Sequence[str]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @exec_lockdown_white_lists.setter
    def exec_lockdown_white_lists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exec_lockdown_white_lists", value)

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")

    @image_lockdown.setter
    def image_lockdown(self, value: Optional[bool]):
        pulumi.set(self, "image_lockdown", value)


@pulumi.input_type
class GetFunctionRuntimePolicyExecutableBlacklistArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 executables: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether the executable blacklist is enabled.
        :param Sequence[str] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[Sequence[str]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "executables", value)


@pulumi.input_type
class GetHostRuntimePolicyAuditingArgs:
    def __init__(__self__, *,
                 audit_all_network: Optional[bool] = None,
                 audit_all_processes: Optional[bool] = None,
                 audit_failed_login: Optional[bool] = None,
                 audit_os_user_activity: Optional[bool] = None,
                 audit_process_cmdline: Optional[bool] = None,
                 audit_success_login: Optional[bool] = None,
                 audit_user_account_management: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_network")

    @audit_all_network.setter
    def audit_all_network(self, value: Optional[bool]):
        pulumi.set(self, "audit_all_network", value)

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_processes")

    @audit_all_processes.setter
    def audit_all_processes(self, value: Optional[bool]):
        pulumi.set(self, "audit_all_processes", value)

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_failed_login")

    @audit_failed_login.setter
    def audit_failed_login(self, value: Optional[bool]):
        pulumi.set(self, "audit_failed_login", value)

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[bool]:
        return pulumi.get(self, "audit_os_user_activity")

    @audit_os_user_activity.setter
    def audit_os_user_activity(self, value: Optional[bool]):
        pulumi.set(self, "audit_os_user_activity", value)

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[bool]:
        return pulumi.get(self, "audit_process_cmdline")

    @audit_process_cmdline.setter
    def audit_process_cmdline(self, value: Optional[bool]):
        pulumi.set(self, "audit_process_cmdline", value)

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_success_login")

    @audit_success_login.setter
    def audit_success_login(self, value: Optional[bool]):
        pulumi.set(self, "audit_success_login", value)

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[bool]:
        return pulumi.get(self, "audit_user_account_management")

    @audit_user_account_management.setter
    def audit_user_account_management(self, value: Optional[bool]):
        pulumi.set(self, "audit_user_account_management", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GetHostRuntimePolicyFileIntegrityMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_files: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_users: Optional[Sequence[str]] = None,
                 monitored_files: Optional[Sequence[str]] = None,
                 monitored_files_attributes: Optional[bool] = None,
                 monitored_files_create: Optional[bool] = None,
                 monitored_files_delete: Optional[bool] = None,
                 monitored_files_modify: Optional[bool] = None,
                 monitored_files_processes: Optional[Sequence[str]] = None,
                 monitored_files_read: Optional[bool] = None,
                 monitored_files_users: Optional[Sequence[str]] = None):
        """
        :param bool enabled: If true, file integrity monitoring is enabled.
        :param Sequence[str] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param Sequence[str] monitored_files: List of paths to be monitored.
        :param bool monitored_files_attributes: Whether to monitor file attribute operations.
        :param bool monitored_files_create: Whether to monitor file create operations.
        :param bool monitored_files_delete: Whether to monitor file delete operations.
        :param bool monitored_files_modify: Whether to monitor file modify operations.
        :param Sequence[str] monitored_files_processes: List of processes associated with monitored files.
        :param bool monitored_files_read: Whether to monitor file read operations.
        :param Sequence[str] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @exceptional_monitored_files.setter
    def exceptional_monitored_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_monitored_files", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @exceptional_monitored_files_processes.setter
    def exceptional_monitored_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_monitored_files_processes", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @exceptional_monitored_files_users.setter
    def exceptional_monitored_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_monitored_files_users", value)

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @monitored_files.setter
    def monitored_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitored_files", value)

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[bool]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @monitored_files_attributes.setter
    def monitored_files_attributes(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_attributes", value)

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[bool]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @monitored_files_create.setter
    def monitored_files_create(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_create", value)

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[bool]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @monitored_files_delete.setter
    def monitored_files_delete(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_delete", value)

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[bool]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @monitored_files_modify.setter
    def monitored_files_modify(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_modify", value)

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @monitored_files_processes.setter
    def monitored_files_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitored_files_processes", value)

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[bool]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @monitored_files_read.setter
    def monitored_files_read(self, value: Optional[bool]):
        pulumi.set(self, "monitored_files_read", value)

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")

    @monitored_files_users.setter
    def monitored_files_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "monitored_files_users", value)


@pulumi.input_type
class GetHostRuntimePolicyMalwareScanOptionArgs:
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exclude_directories: Optional[Sequence[str]] = None,
                 exclude_processes: Optional[Sequence[str]] = None,
                 include_directories: Optional[Sequence[str]] = None):
        """
        :param str action: Set Action, Defaults to 'Alert' when empty
        :param bool enabled: Defines if enabled or not
        :param Sequence[str] exclude_directories: List of registry paths to be excluded from being protected.
        :param Sequence[str] exclude_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @exclude_directories.setter
    def exclude_directories(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exclude_directories", value)

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @exclude_processes.setter
    def exclude_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exclude_processes", value)

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")

    @include_directories.setter
    def include_directories(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "include_directories", value)


@pulumi.input_type
class GetHostRuntimePolicyPackageBlockArgs:
    def __init__(__self__, *,
                 block_packages_processes: Optional[Sequence[str]] = None,
                 block_packages_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_packages_files: Optional[Sequence[str]] = None,
                 exceptional_block_packages_processes: Optional[Sequence[str]] = None,
                 exceptional_block_packages_users: Optional[Sequence[str]] = None,
                 packages_black_lists: Optional[Sequence[str]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_processes")

    @block_packages_processes.setter
    def block_packages_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "block_packages_processes", value)

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_users")

    @block_packages_users.setter
    def block_packages_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "block_packages_users", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @exceptional_block_packages_files.setter
    def exceptional_block_packages_files(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_block_packages_files", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @exceptional_block_packages_processes.setter
    def exceptional_block_packages_processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_block_packages_processes", value)

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @exceptional_block_packages_users.setter
    def exceptional_block_packages_users(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "exceptional_block_packages_users", value)

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages_black_lists")

    @packages_black_lists.setter
    def packages_black_lists(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "packages_black_lists", value)


@pulumi.input_type
class GetIntegrationRegistriesOptionArgs:
    def __init__(__self__, *,
                 option: Optional[str] = None,
                 value: Optional[str] = None):
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[str]:
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[str]):
        pulumi.set(self, "option", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetIntegrationRegistriesWebhookArgs:
    def __init__(__self__, *,
                 auth_token: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 un_quarantine: Optional[bool] = None,
                 url: Optional[str] = None):
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if un_quarantine is not None:
            pulumi.set(__self__, "un_quarantine", un_quarantine)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="unQuarantine")
    def un_quarantine(self) -> Optional[bool]:
        return pulumi.get(self, "un_quarantine")

    @un_quarantine.setter
    def un_quarantine(self, value: Optional[bool]):
        pulumi.set(self, "un_quarantine", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GetIntegrationRegistryOptionArgs:
    def __init__(__self__, *,
                 option: Optional[str] = None,
                 value: Optional[str] = None):
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[str]:
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[str]):
        pulumi.set(self, "option", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetIntegrationRegistryWebhookArgs:
    def __init__(__self__, *,
                 auth_token: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 un_quarantine: Optional[bool] = None,
                 url: Optional[str] = None):
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if un_quarantine is not None:
            pulumi.set(__self__, "un_quarantine", un_quarantine)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: Optional[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="unQuarantine")
    def un_quarantine(self) -> Optional[bool]:
        return pulumi.get(self, "un_quarantine")

    @un_quarantine.setter
    def un_quarantine(self, value: Optional[bool]):
        pulumi.set(self, "un_quarantine", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


