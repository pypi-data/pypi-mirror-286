# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRolesMappingResult',
    'AwaitableGetRolesMappingResult',
    'get_roles_mapping',
    'get_roles_mapping_output',
]

@pulumi.output_type
class GetRolesMappingResult:
    """
    A collection of values returned by getRolesMapping.
    """
    def __init__(__self__, id=None, ldaps=None, oauth2s=None, openids=None, samls=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ldaps and not isinstance(ldaps, list):
            raise TypeError("Expected argument 'ldaps' to be a list")
        pulumi.set(__self__, "ldaps", ldaps)
        if oauth2s and not isinstance(oauth2s, list):
            raise TypeError("Expected argument 'oauth2s' to be a list")
        pulumi.set(__self__, "oauth2s", oauth2s)
        if openids and not isinstance(openids, list):
            raise TypeError("Expected argument 'openids' to be a list")
        pulumi.set(__self__, "openids", openids)
        if samls and not isinstance(samls, list):
            raise TypeError("Expected argument 'samls' to be a list")
        pulumi.set(__self__, "samls", samls)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ldaps(self) -> Sequence['outputs.GetRolesMappingLdapResult']:
        """
        LDAP Authentication
        """
        return pulumi.get(self, "ldaps")

    @property
    @pulumi.getter
    def oauth2s(self) -> Sequence['outputs.GetRolesMappingOauth2Result']:
        """
        Oauth2 Authentication
        """
        return pulumi.get(self, "oauth2s")

    @property
    @pulumi.getter
    def openids(self) -> Sequence['outputs.GetRolesMappingOpenidResult']:
        """
        OpenId Authentication
        """
        return pulumi.get(self, "openids")

    @property
    @pulumi.getter
    def samls(self) -> Sequence['outputs.GetRolesMappingSamlResult']:
        """
        SAML Authentication
        """
        return pulumi.get(self, "samls")


class AwaitableGetRolesMappingResult(GetRolesMappingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRolesMappingResult(
            id=self.id,
            ldaps=self.ldaps,
            oauth2s=self.oauth2s,
            openids=self.openids,
            samls=self.samls)


def get_roles_mapping(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRolesMappingResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_aquasec as aquasec

    roles_mapping = aquasec.get_roles_mapping()
    pulumi.export("roleMappingAll", roles_mapping)
    pulumi.export("roleMappingSaml", roles_mapping.samls)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aquasec:index/getRolesMapping:getRolesMapping', __args__, opts=opts, typ=GetRolesMappingResult).value

    return AwaitableGetRolesMappingResult(
        id=pulumi.get(__ret__, 'id'),
        ldaps=pulumi.get(__ret__, 'ldaps'),
        oauth2s=pulumi.get(__ret__, 'oauth2s'),
        openids=pulumi.get(__ret__, 'openids'),
        samls=pulumi.get(__ret__, 'samls'))


@_utilities.lift_output_func(get_roles_mapping)
def get_roles_mapping_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRolesMappingResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_aquasec as aquasec

    roles_mapping = aquasec.get_roles_mapping()
    pulumi.export("roleMappingAll", roles_mapping)
    pulumi.export("roleMappingSaml", roles_mapping.samls)
    ```
    """
    ...
