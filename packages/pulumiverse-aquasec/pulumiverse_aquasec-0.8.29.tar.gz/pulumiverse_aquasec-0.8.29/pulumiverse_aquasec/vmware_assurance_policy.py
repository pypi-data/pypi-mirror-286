# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmwareAssurancePolicyArgs', 'VmwareAssurancePolicy']

@pulumi.input_type
class VmwareAssurancePolicyArgs:
    def __init__(__self__, *,
                 application_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 aggregated_vulnerability: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 allowed_images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 assurance_type: Optional[pulumi.Input[str]] = None,
                 audit_on_failure: Optional[pulumi.Input[bool]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 auto_scan_configured: Optional[pulumi.Input[bool]] = None,
                 auto_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_scan_times: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyAutoScanTimeArgs']]]] = None,
                 blacklist_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklist_permissions_enabled: Optional[pulumi.Input[bool]] = None,
                 blacklisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklisted_licenses_enabled: Optional[pulumi.Input[bool]] = None,
                 block_failed: Optional[pulumi.Input[bool]] = None,
                 control_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 custom_checks: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]]] = None,
                 custom_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 custom_severity: Optional[pulumi.Input[str]] = None,
                 custom_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cves_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cvss_severity: Optional[pulumi.Input[str]] = None,
                 cvss_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cvss_severity_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disallow_exploit_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disallow_malware: Optional[pulumi.Input[bool]] = None,
                 docker_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dta_enabled: Optional[pulumi.Input[bool]] = None,
                 dta_severity: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 enforce_after_days: Optional[pulumi.Input[int]] = None,
                 enforce_excessive_permissions: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_cicd: Optional[pulumi.Input[bool]] = None,
                 forbidden_labels: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyForbiddenLabelArgs']]]] = None,
                 forbidden_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 force_microenforcer: Optional[pulumi.Input[bool]] = None,
                 function_integrity_enabled: Optional[pulumi.Input[bool]] = None,
                 ignore_base_image_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln_period: Optional[pulumi.Input[int]] = None,
                 ignore_risk_resources_enabled: Optional[pulumi.Input[bool]] = None,
                 ignored_risk_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignored_sensitive_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_controls: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]]] = None,
                 kubernetes_controls_avd_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_controls_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lastupdate: Optional[pulumi.Input[str]] = None,
                 linux_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 malware_action: Optional[pulumi.Input[str]] = None,
                 maximum_score: Optional[pulumi.Input[float]] = None,
                 maximum_score_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_score_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_none_root_users: Optional[pulumi.Input[bool]] = None,
                 openshift_hardening_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]]] = None,
                 packages_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]]] = None,
                 partial_results_image_fail: Optional[pulumi.Input[bool]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 policy_settings: Optional[pulumi.Input['VmwareAssurancePolicyPolicySettingsArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 required_labels: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyRequiredLabelArgs']]]] = None,
                 required_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 scan_malware_in_archives: Optional[pulumi.Input[bool]] = None,
                 scan_nfs_mounts: Optional[pulumi.Input[bool]] = None,
                 scan_process_memory: Optional[pulumi.Input[bool]] = None,
                 scan_sensitive_data: Optional[pulumi.Input[bool]] = None,
                 scan_windows_registry: Optional[pulumi.Input[bool]] = None,
                 scap_enabled: Optional[pulumi.Input[bool]] = None,
                 scap_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeArgs']]]] = None,
                 trusted_base_images: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]]] = None,
                 trusted_base_images_enabled: Optional[pulumi.Input[bool]] = None,
                 vulnerability_exploitability: Optional[pulumi.Input[bool]] = None,
                 vulnerability_score_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 whitelisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 whitelisted_licenses_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a VmwareAssurancePolicy resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] aggregated_vulnerability: Aggregated vulnerability information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_images: List of explicitly allowed images.
        :param pulumi.Input[str] assurance_type: What type of assurance policy is described.
        :param pulumi.Input[bool] audit_on_failure: Indicates if auditing for failures.
        :param pulumi.Input[str] author: Name of user account that created the policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklist_permissions: List of function's forbidden permissions.
        :param pulumi.Input[bool] blacklist_permissions_enabled: Indicates if blacklist permissions is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklisted_licenses: List of blacklisted licenses.
        :param pulumi.Input[bool] blacklisted_licenses_enabled: Indicates if license blacklist is relevant.
        :param pulumi.Input[bool] block_failed: Indicates if failed images are blocked.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]] custom_checks: List of Custom user scripts for checks.
        :param pulumi.Input[bool] custom_checks_enabled: Indicates if scanning should include custom checks.
        :param pulumi.Input[bool] cves_black_list_enabled: Indicates if CVEs blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_black_lists: List of cves blacklisted items.
        :param pulumi.Input[bool] cves_white_list_enabled: Indicates if cves whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_white_lists: List of cves whitelisted licenses
        :param pulumi.Input[str] cvss_severity: Identifier of the cvss severity.
        :param pulumi.Input[bool] cvss_severity_enabled: Indicates if the cvss severity is scanned.
        :param pulumi.Input[bool] cvss_severity_exclude_no_fix: Indicates that policy should ignore cvss cases that do not have a known fix.
        :param pulumi.Input[bool] disallow_malware: Indicates if malware should block the image.
        :param pulumi.Input[bool] docker_cis_enabled: Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        :param pulumi.Input[str] domain: Name of the container image.
        :param pulumi.Input[bool] fail_cicd: Indicates if cicd failures will fail the image.
        :param pulumi.Input[bool] ignore_risk_resources_enabled: Indicates if risk resources are ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignored_risk_resources: List of ignored risk resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List of images.
        :param pulumi.Input[bool] kube_cis_enabled: Performs a Kubernetes CIS benchmark check for the host.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]] kubernetes_controls: List of Kubernetes controls.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: List of labels.
        :param pulumi.Input[float] maximum_score: Value of allowed maximum score.
        :param pulumi.Input[bool] maximum_score_enabled: Indicates if exceeding the maximum score is scanned.
        :param pulumi.Input[bool] only_none_root_users: Indicates if raise a warning for images that should only be run as root.
        :param pulumi.Input[bool] packages_black_list_enabled: Indicates if packages blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]] packages_black_lists: List of blacklisted images.
        :param pulumi.Input[bool] packages_white_list_enabled: Indicates if packages whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]] packages_white_lists: List of whitelisted images.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] registries: List of registries.
        :param pulumi.Input[bool] scan_sensitive_data: Indicates if scan should include sensitive data in the image.
        :param pulumi.Input[bool] scap_enabled: Indicates if scanning should include scap.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scap_files: List of SCAP user scripts for checks.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]] trusted_base_images: List of trusted images.
        :param pulumi.Input[bool] trusted_base_images_enabled: Indicates if list of trusted base images is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelisted_licenses: List of whitelisted licenses.
        :param pulumi.Input[bool] whitelisted_licenses_enabled: Indicates if license blacklist is relevant.
        """
        pulumi.set(__self__, "application_scopes", application_scopes)
        if aggregated_vulnerability is not None:
            pulumi.set(__self__, "aggregated_vulnerability", aggregated_vulnerability)
        if allowed_images is not None:
            pulumi.set(__self__, "allowed_images", allowed_images)
        if assurance_type is not None:
            pulumi.set(__self__, "assurance_type", assurance_type)
        if audit_on_failure is not None:
            pulumi.set(__self__, "audit_on_failure", audit_on_failure)
        if author is not None:
            pulumi.set(__self__, "author", author)
        if auto_scan_configured is not None:
            pulumi.set(__self__, "auto_scan_configured", auto_scan_configured)
        if auto_scan_enabled is not None:
            pulumi.set(__self__, "auto_scan_enabled", auto_scan_enabled)
        if auto_scan_times is not None:
            pulumi.set(__self__, "auto_scan_times", auto_scan_times)
        if blacklist_permissions is not None:
            pulumi.set(__self__, "blacklist_permissions", blacklist_permissions)
        if blacklist_permissions_enabled is not None:
            pulumi.set(__self__, "blacklist_permissions_enabled", blacklist_permissions_enabled)
        if blacklisted_licenses is not None:
            pulumi.set(__self__, "blacklisted_licenses", blacklisted_licenses)
        if blacklisted_licenses_enabled is not None:
            pulumi.set(__self__, "blacklisted_licenses_enabled", blacklisted_licenses_enabled)
        if block_failed is not None:
            pulumi.set(__self__, "block_failed", block_failed)
        if control_exclude_no_fix is not None:
            pulumi.set(__self__, "control_exclude_no_fix", control_exclude_no_fix)
        if custom_checks is not None:
            pulumi.set(__self__, "custom_checks", custom_checks)
        if custom_checks_enabled is not None:
            pulumi.set(__self__, "custom_checks_enabled", custom_checks_enabled)
        if custom_severity is not None:
            pulumi.set(__self__, "custom_severity", custom_severity)
        if custom_severity_enabled is not None:
            pulumi.set(__self__, "custom_severity_enabled", custom_severity_enabled)
        if cves_black_list_enabled is not None:
            pulumi.set(__self__, "cves_black_list_enabled", cves_black_list_enabled)
        if cves_black_lists is not None:
            pulumi.set(__self__, "cves_black_lists", cves_black_lists)
        if cves_white_list_enabled is not None:
            pulumi.set(__self__, "cves_white_list_enabled", cves_white_list_enabled)
        if cves_white_lists is not None:
            pulumi.set(__self__, "cves_white_lists", cves_white_lists)
        if cvss_severity is not None:
            pulumi.set(__self__, "cvss_severity", cvss_severity)
        if cvss_severity_enabled is not None:
            pulumi.set(__self__, "cvss_severity_enabled", cvss_severity_enabled)
        if cvss_severity_exclude_no_fix is not None:
            pulumi.set(__self__, "cvss_severity_exclude_no_fix", cvss_severity_exclude_no_fix)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disallow_exploit_types is not None:
            pulumi.set(__self__, "disallow_exploit_types", disallow_exploit_types)
        if disallow_malware is not None:
            pulumi.set(__self__, "disallow_malware", disallow_malware)
        if docker_cis_enabled is not None:
            pulumi.set(__self__, "docker_cis_enabled", docker_cis_enabled)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dta_enabled is not None:
            pulumi.set(__self__, "dta_enabled", dta_enabled)
        if dta_severity is not None:
            pulumi.set(__self__, "dta_severity", dta_severity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if enforce_after_days is not None:
            pulumi.set(__self__, "enforce_after_days", enforce_after_days)
        if enforce_excessive_permissions is not None:
            pulumi.set(__self__, "enforce_excessive_permissions", enforce_excessive_permissions)
        if exceptional_monitored_malware_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_malware_paths", exceptional_monitored_malware_paths)
        if exclude_application_scopes is not None:
            pulumi.set(__self__, "exclude_application_scopes", exclude_application_scopes)
        if fail_cicd is not None:
            pulumi.set(__self__, "fail_cicd", fail_cicd)
        if forbidden_labels is not None:
            pulumi.set(__self__, "forbidden_labels", forbidden_labels)
        if forbidden_labels_enabled is not None:
            pulumi.set(__self__, "forbidden_labels_enabled", forbidden_labels_enabled)
        if force_microenforcer is not None:
            pulumi.set(__self__, "force_microenforcer", force_microenforcer)
        if function_integrity_enabled is not None:
            pulumi.set(__self__, "function_integrity_enabled", function_integrity_enabled)
        if ignore_base_image_vln is not None:
            pulumi.set(__self__, "ignore_base_image_vln", ignore_base_image_vln)
        if ignore_recently_published_vln is not None:
            pulumi.set(__self__, "ignore_recently_published_vln", ignore_recently_published_vln)
        if ignore_recently_published_vln_period is not None:
            pulumi.set(__self__, "ignore_recently_published_vln_period", ignore_recently_published_vln_period)
        if ignore_risk_resources_enabled is not None:
            pulumi.set(__self__, "ignore_risk_resources_enabled", ignore_risk_resources_enabled)
        if ignored_risk_resources is not None:
            pulumi.set(__self__, "ignored_risk_resources", ignored_risk_resources)
        if ignored_sensitive_resources is not None:
            pulumi.set(__self__, "ignored_sensitive_resources", ignored_sensitive_resources)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if kube_cis_enabled is not None:
            pulumi.set(__self__, "kube_cis_enabled", kube_cis_enabled)
        if kubernetes_controls is not None:
            pulumi.set(__self__, "kubernetes_controls", kubernetes_controls)
        if kubernetes_controls_avd_ids is not None:
            pulumi.set(__self__, "kubernetes_controls_avd_ids", kubernetes_controls_avd_ids)
        if kubernetes_controls_names is not None:
            pulumi.set(__self__, "kubernetes_controls_names", kubernetes_controls_names)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lastupdate is not None:
            pulumi.set(__self__, "lastupdate", lastupdate)
        if linux_cis_enabled is not None:
            pulumi.set(__self__, "linux_cis_enabled", linux_cis_enabled)
        if malware_action is not None:
            pulumi.set(__self__, "malware_action", malware_action)
        if maximum_score is not None:
            pulumi.set(__self__, "maximum_score", maximum_score)
        if maximum_score_enabled is not None:
            pulumi.set(__self__, "maximum_score_enabled", maximum_score_enabled)
        if maximum_score_exclude_no_fix is not None:
            pulumi.set(__self__, "maximum_score_exclude_no_fix", maximum_score_exclude_no_fix)
        if monitored_malware_paths is not None:
            pulumi.set(__self__, "monitored_malware_paths", monitored_malware_paths)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if only_none_root_users is not None:
            pulumi.set(__self__, "only_none_root_users", only_none_root_users)
        if openshift_hardening_enabled is not None:
            pulumi.set(__self__, "openshift_hardening_enabled", openshift_hardening_enabled)
        if packages_black_list_enabled is not None:
            pulumi.set(__self__, "packages_black_list_enabled", packages_black_list_enabled)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)
        if packages_white_list_enabled is not None:
            pulumi.set(__self__, "packages_white_list_enabled", packages_white_list_enabled)
        if packages_white_lists is not None:
            pulumi.set(__self__, "packages_white_lists", packages_white_lists)
        if partial_results_image_fail is not None:
            pulumi.set(__self__, "partial_results_image_fail", partial_results_image_fail)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if policy_settings is not None:
            pulumi.set(__self__, "policy_settings", policy_settings)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if registries is not None:
            pulumi.set(__self__, "registries", registries)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if required_labels is not None:
            pulumi.set(__self__, "required_labels", required_labels)
        if required_labels_enabled is not None:
            pulumi.set(__self__, "required_labels_enabled", required_labels_enabled)
        if scan_malware_in_archives is not None:
            pulumi.set(__self__, "scan_malware_in_archives", scan_malware_in_archives)
        if scan_nfs_mounts is not None:
            pulumi.set(__self__, "scan_nfs_mounts", scan_nfs_mounts)
        if scan_process_memory is not None:
            pulumi.set(__self__, "scan_process_memory", scan_process_memory)
        if scan_sensitive_data is not None:
            pulumi.set(__self__, "scan_sensitive_data", scan_sensitive_data)
        if scan_windows_registry is not None:
            pulumi.set(__self__, "scan_windows_registry", scan_windows_registry)
        if scap_enabled is not None:
            pulumi.set(__self__, "scap_enabled", scap_enabled)
        if scap_files is not None:
            pulumi.set(__self__, "scap_files", scap_files)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if trusted_base_images is not None:
            pulumi.set(__self__, "trusted_base_images", trusted_base_images)
        if trusted_base_images_enabled is not None:
            pulumi.set(__self__, "trusted_base_images_enabled", trusted_base_images_enabled)
        if vulnerability_exploitability is not None:
            pulumi.set(__self__, "vulnerability_exploitability", vulnerability_exploitability)
        if vulnerability_score_ranges is not None:
            pulumi.set(__self__, "vulnerability_score_ranges", vulnerability_score_ranges)
        if whitelisted_licenses is not None:
            pulumi.set(__self__, "whitelisted_licenses", whitelisted_licenses)
        if whitelisted_licenses_enabled is not None:
            pulumi.set(__self__, "whitelisted_licenses_enabled", whitelisted_licenses_enabled)

    @property
    @pulumi.getter(name="applicationScopes")
    def application_scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "application_scopes")

    @application_scopes.setter
    def application_scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "application_scopes", value)

    @property
    @pulumi.getter(name="aggregatedVulnerability")
    def aggregated_vulnerability(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Aggregated vulnerability information.
        """
        return pulumi.get(self, "aggregated_vulnerability")

    @aggregated_vulnerability.setter
    def aggregated_vulnerability(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "aggregated_vulnerability", value)

    @property
    @pulumi.getter(name="allowedImages")
    def allowed_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of explicitly allowed images.
        """
        return pulumi.get(self, "allowed_images")

    @allowed_images.setter
    def allowed_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_images", value)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> Optional[pulumi.Input[str]]:
        """
        What type of assurance policy is described.
        """
        return pulumi.get(self, "assurance_type")

    @assurance_type.setter
    def assurance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assurance_type", value)

    @property
    @pulumi.getter(name="auditOnFailure")
    def audit_on_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if auditing for failures.
        """
        return pulumi.get(self, "audit_on_failure")

    @audit_on_failure.setter
    def audit_on_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_on_failure", value)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter(name="autoScanConfigured")
    def auto_scan_configured(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_scan_configured")

    @auto_scan_configured.setter
    def auto_scan_configured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scan_configured", value)

    @property
    @pulumi.getter(name="autoScanEnabled")
    def auto_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_scan_enabled")

    @auto_scan_enabled.setter
    def auto_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scan_enabled", value)

    @property
    @pulumi.getter(name="autoScanTimes")
    def auto_scan_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyAutoScanTimeArgs']]]]:
        return pulumi.get(self, "auto_scan_times")

    @auto_scan_times.setter
    def auto_scan_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyAutoScanTimeArgs']]]]):
        pulumi.set(self, "auto_scan_times", value)

    @property
    @pulumi.getter(name="blacklistPermissions")
    def blacklist_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of function's forbidden permissions.
        """
        return pulumi.get(self, "blacklist_permissions")

    @blacklist_permissions.setter
    def blacklist_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blacklist_permissions", value)

    @property
    @pulumi.getter(name="blacklistPermissionsEnabled")
    def blacklist_permissions_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if blacklist permissions is relevant.
        """
        return pulumi.get(self, "blacklist_permissions_enabled")

    @blacklist_permissions_enabled.setter
    def blacklist_permissions_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacklist_permissions_enabled", value)

    @property
    @pulumi.getter(name="blacklistedLicenses")
    def blacklisted_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of blacklisted licenses.
        """
        return pulumi.get(self, "blacklisted_licenses")

    @blacklisted_licenses.setter
    def blacklisted_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blacklisted_licenses", value)

    @property
    @pulumi.getter(name="blacklistedLicensesEnabled")
    def blacklisted_licenses_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if license blacklist is relevant.
        """
        return pulumi.get(self, "blacklisted_licenses_enabled")

    @blacklisted_licenses_enabled.setter
    def blacklisted_licenses_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacklisted_licenses_enabled", value)

    @property
    @pulumi.getter(name="blockFailed")
    def block_failed(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if failed images are blocked.
        """
        return pulumi.get(self, "block_failed")

    @block_failed.setter
    def block_failed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_failed", value)

    @property
    @pulumi.getter(name="controlExcludeNoFix")
    def control_exclude_no_fix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "control_exclude_no_fix")

    @control_exclude_no_fix.setter
    def control_exclude_no_fix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "control_exclude_no_fix", value)

    @property
    @pulumi.getter(name="customChecks")
    def custom_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]]]:
        """
        List of Custom user scripts for checks.
        """
        return pulumi.get(self, "custom_checks")

    @custom_checks.setter
    def custom_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]]]):
        pulumi.set(self, "custom_checks", value)

    @property
    @pulumi.getter(name="customChecksEnabled")
    def custom_checks_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if scanning should include custom checks.
        """
        return pulumi.get(self, "custom_checks_enabled")

    @custom_checks_enabled.setter
    def custom_checks_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_checks_enabled", value)

    @property
    @pulumi.getter(name="customSeverity")
    def custom_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_severity")

    @custom_severity.setter
    def custom_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_severity", value)

    @property
    @pulumi.getter(name="customSeverityEnabled")
    def custom_severity_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_severity_enabled")

    @custom_severity_enabled.setter
    def custom_severity_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_severity_enabled", value)

    @property
    @pulumi.getter(name="cvesBlackListEnabled")
    def cves_black_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if CVEs blacklist is relevant.
        """
        return pulumi.get(self, "cves_black_list_enabled")

    @cves_black_list_enabled.setter
    def cves_black_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cves_black_list_enabled", value)

    @property
    @pulumi.getter(name="cvesBlackLists")
    def cves_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cves blacklisted items.
        """
        return pulumi.get(self, "cves_black_lists")

    @cves_black_lists.setter
    def cves_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cves_black_lists", value)

    @property
    @pulumi.getter(name="cvesWhiteListEnabled")
    def cves_white_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if cves whitelist is relevant.
        """
        return pulumi.get(self, "cves_white_list_enabled")

    @cves_white_list_enabled.setter
    def cves_white_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cves_white_list_enabled", value)

    @property
    @pulumi.getter(name="cvesWhiteLists")
    def cves_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cves whitelisted licenses
        """
        return pulumi.get(self, "cves_white_lists")

    @cves_white_lists.setter
    def cves_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cves_white_lists", value)

    @property
    @pulumi.getter(name="cvssSeverity")
    def cvss_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the cvss severity.
        """
        return pulumi.get(self, "cvss_severity")

    @cvss_severity.setter
    def cvss_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvss_severity", value)

    @property
    @pulumi.getter(name="cvssSeverityEnabled")
    def cvss_severity_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the cvss severity is scanned.
        """
        return pulumi.get(self, "cvss_severity_enabled")

    @cvss_severity_enabled.setter
    def cvss_severity_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cvss_severity_enabled", value)

    @property
    @pulumi.getter(name="cvssSeverityExcludeNoFix")
    def cvss_severity_exclude_no_fix(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that policy should ignore cvss cases that do not have a known fix.
        """
        return pulumi.get(self, "cvss_severity_exclude_no_fix")

    @cvss_severity_exclude_no_fix.setter
    def cvss_severity_exclude_no_fix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cvss_severity_exclude_no_fix", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disallowExploitTypes")
    def disallow_exploit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "disallow_exploit_types")

    @disallow_exploit_types.setter
    def disallow_exploit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disallow_exploit_types", value)

    @property
    @pulumi.getter(name="disallowMalware")
    def disallow_malware(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if malware should block the image.
        """
        return pulumi.get(self, "disallow_malware")

    @disallow_malware.setter
    def disallow_malware(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disallow_malware", value)

    @property
    @pulumi.getter(name="dockerCisEnabled")
    def docker_cis_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        """
        return pulumi.get(self, "docker_cis_enabled")

    @docker_cis_enabled.setter
    def docker_cis_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "docker_cis_enabled", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the container image.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dtaEnabled")
    def dta_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dta_enabled")

    @dta_enabled.setter
    def dta_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dta_enabled", value)

    @property
    @pulumi.getter(name="dtaSeverity")
    def dta_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dta_severity")

    @dta_severity.setter
    def dta_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dta_severity", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="enforceAfterDays")
    def enforce_after_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "enforce_after_days")

    @enforce_after_days.setter
    def enforce_after_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enforce_after_days", value)

    @property
    @pulumi.getter(name="enforceExcessivePermissions")
    def enforce_excessive_permissions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce_excessive_permissions")

    @enforce_excessive_permissions.setter
    def enforce_excessive_permissions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_excessive_permissions", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredMalwarePaths")
    def exceptional_monitored_malware_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_malware_paths")

    @exceptional_monitored_malware_paths.setter
    def exceptional_monitored_malware_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_malware_paths", value)

    @property
    @pulumi.getter(name="excludeApplicationScopes")
    def exclude_application_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_application_scopes")

    @exclude_application_scopes.setter
    def exclude_application_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_application_scopes", value)

    @property
    @pulumi.getter(name="failCicd")
    def fail_cicd(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if cicd failures will fail the image.
        """
        return pulumi.get(self, "fail_cicd")

    @fail_cicd.setter
    def fail_cicd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_cicd", value)

    @property
    @pulumi.getter(name="forbiddenLabels")
    def forbidden_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyForbiddenLabelArgs']]]]:
        return pulumi.get(self, "forbidden_labels")

    @forbidden_labels.setter
    def forbidden_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyForbiddenLabelArgs']]]]):
        pulumi.set(self, "forbidden_labels", value)

    @property
    @pulumi.getter(name="forbiddenLabelsEnabled")
    def forbidden_labels_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "forbidden_labels_enabled")

    @forbidden_labels_enabled.setter
    def forbidden_labels_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forbidden_labels_enabled", value)

    @property
    @pulumi.getter(name="forceMicroenforcer")
    def force_microenforcer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_microenforcer")

    @force_microenforcer.setter
    def force_microenforcer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_microenforcer", value)

    @property
    @pulumi.getter(name="functionIntegrityEnabled")
    def function_integrity_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "function_integrity_enabled")

    @function_integrity_enabled.setter
    def function_integrity_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "function_integrity_enabled", value)

    @property
    @pulumi.getter(name="ignoreBaseImageVln")
    def ignore_base_image_vln(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_base_image_vln")

    @ignore_base_image_vln.setter
    def ignore_base_image_vln(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_base_image_vln", value)

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVln")
    def ignore_recently_published_vln(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_recently_published_vln")

    @ignore_recently_published_vln.setter
    def ignore_recently_published_vln(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_recently_published_vln", value)

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVlnPeriod")
    def ignore_recently_published_vln_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ignore_recently_published_vln_period")

    @ignore_recently_published_vln_period.setter
    def ignore_recently_published_vln_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ignore_recently_published_vln_period", value)

    @property
    @pulumi.getter(name="ignoreRiskResourcesEnabled")
    def ignore_risk_resources_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if risk resources are ignored.
        """
        return pulumi.get(self, "ignore_risk_resources_enabled")

    @ignore_risk_resources_enabled.setter
    def ignore_risk_resources_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_risk_resources_enabled", value)

    @property
    @pulumi.getter(name="ignoredRiskResources")
    def ignored_risk_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of ignored risk resources.
        """
        return pulumi.get(self, "ignored_risk_resources")

    @ignored_risk_resources.setter
    def ignored_risk_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignored_risk_resources", value)

    @property
    @pulumi.getter(name="ignoredSensitiveResources")
    def ignored_sensitive_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignored_sensitive_resources")

    @ignored_sensitive_resources.setter
    def ignored_sensitive_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignored_sensitive_resources", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of images.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="kubeCisEnabled")
    def kube_cis_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Performs a Kubernetes CIS benchmark check for the host.
        """
        return pulumi.get(self, "kube_cis_enabled")

    @kube_cis_enabled.setter
    def kube_cis_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kube_cis_enabled", value)

    @property
    @pulumi.getter(name="kubernetesControls")
    def kubernetes_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]]]:
        """
        List of Kubernetes controls.
        """
        return pulumi.get(self, "kubernetes_controls")

    @kubernetes_controls.setter
    def kubernetes_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]]]):
        pulumi.set(self, "kubernetes_controls", value)

    @property
    @pulumi.getter(name="kubernetesControlsAvdIds")
    def kubernetes_controls_avd_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kubernetes_controls_avd_ids")

    @kubernetes_controls_avd_ids.setter
    def kubernetes_controls_avd_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubernetes_controls_avd_ids", value)

    @property
    @pulumi.getter(name="kubernetesControlsNames")
    def kubernetes_controls_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kubernetes_controls_names")

    @kubernetes_controls_names.setter
    def kubernetes_controls_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubernetes_controls_names", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def lastupdate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lastupdate")

    @lastupdate.setter
    def lastupdate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lastupdate", value)

    @property
    @pulumi.getter(name="linuxCisEnabled")
    def linux_cis_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "linux_cis_enabled")

    @linux_cis_enabled.setter
    def linux_cis_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "linux_cis_enabled", value)

    @property
    @pulumi.getter(name="malwareAction")
    def malware_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malware_action")

    @malware_action.setter
    def malware_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malware_action", value)

    @property
    @pulumi.getter(name="maximumScore")
    def maximum_score(self) -> Optional[pulumi.Input[float]]:
        """
        Value of allowed maximum score.
        """
        return pulumi.get(self, "maximum_score")

    @maximum_score.setter
    def maximum_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_score", value)

    @property
    @pulumi.getter(name="maximumScoreEnabled")
    def maximum_score_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if exceeding the maximum score is scanned.
        """
        return pulumi.get(self, "maximum_score_enabled")

    @maximum_score_enabled.setter
    def maximum_score_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maximum_score_enabled", value)

    @property
    @pulumi.getter(name="maximumScoreExcludeNoFix")
    def maximum_score_exclude_no_fix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "maximum_score_exclude_no_fix")

    @maximum_score_exclude_no_fix.setter
    def maximum_score_exclude_no_fix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maximum_score_exclude_no_fix", value)

    @property
    @pulumi.getter(name="monitoredMalwarePaths")
    def monitored_malware_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_malware_paths")

    @monitored_malware_paths.setter
    def monitored_malware_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_malware_paths", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onlyNoneRootUsers")
    def only_none_root_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if raise a warning for images that should only be run as root.
        """
        return pulumi.get(self, "only_none_root_users")

    @only_none_root_users.setter
    def only_none_root_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_none_root_users", value)

    @property
    @pulumi.getter(name="openshiftHardeningEnabled")
    def openshift_hardening_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "openshift_hardening_enabled")

    @openshift_hardening_enabled.setter
    def openshift_hardening_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "openshift_hardening_enabled", value)

    @property
    @pulumi.getter(name="packagesBlackListEnabled")
    def packages_black_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if packages blacklist is relevant.
        """
        return pulumi.get(self, "packages_black_list_enabled")

    @packages_black_list_enabled.setter
    def packages_black_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "packages_black_list_enabled", value)

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]]]:
        """
        List of blacklisted images.
        """
        return pulumi.get(self, "packages_black_lists")

    @packages_black_lists.setter
    def packages_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]]]):
        pulumi.set(self, "packages_black_lists", value)

    @property
    @pulumi.getter(name="packagesWhiteListEnabled")
    def packages_white_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if packages whitelist is relevant.
        """
        return pulumi.get(self, "packages_white_list_enabled")

    @packages_white_list_enabled.setter
    def packages_white_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "packages_white_list_enabled", value)

    @property
    @pulumi.getter(name="packagesWhiteLists")
    def packages_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]]]:
        """
        List of whitelisted images.
        """
        return pulumi.get(self, "packages_white_lists")

    @packages_white_lists.setter
    def packages_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]]]):
        pulumi.set(self, "packages_white_lists", value)

    @property
    @pulumi.getter(name="partialResultsImageFail")
    def partial_results_image_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "partial_results_image_fail")

    @partial_results_image_fail.setter
    def partial_results_image_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "partial_results_image_fail", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="policySettings")
    def policy_settings(self) -> Optional[pulumi.Input['VmwareAssurancePolicyPolicySettingsArgs']]:
        return pulumi.get(self, "policy_settings")

    @policy_settings.setter
    def policy_settings(self, value: Optional[pulumi.Input['VmwareAssurancePolicyPolicySettingsArgs']]):
        pulumi.set(self, "policy_settings", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registries.
        """
        return pulumi.get(self, "registries")

    @registries.setter
    def registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "registries", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter(name="requiredLabels")
    def required_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyRequiredLabelArgs']]]]:
        return pulumi.get(self, "required_labels")

    @required_labels.setter
    def required_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyRequiredLabelArgs']]]]):
        pulumi.set(self, "required_labels", value)

    @property
    @pulumi.getter(name="requiredLabelsEnabled")
    def required_labels_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required_labels_enabled")

    @required_labels_enabled.setter
    def required_labels_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required_labels_enabled", value)

    @property
    @pulumi.getter(name="scanMalwareInArchives")
    def scan_malware_in_archives(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_malware_in_archives")

    @scan_malware_in_archives.setter
    def scan_malware_in_archives(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_malware_in_archives", value)

    @property
    @pulumi.getter(name="scanNfsMounts")
    def scan_nfs_mounts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_nfs_mounts")

    @scan_nfs_mounts.setter
    def scan_nfs_mounts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_nfs_mounts", value)

    @property
    @pulumi.getter(name="scanProcessMemory")
    def scan_process_memory(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_process_memory")

    @scan_process_memory.setter
    def scan_process_memory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_process_memory", value)

    @property
    @pulumi.getter(name="scanSensitiveData")
    def scan_sensitive_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if scan should include sensitive data in the image.
        """
        return pulumi.get(self, "scan_sensitive_data")

    @scan_sensitive_data.setter
    def scan_sensitive_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_sensitive_data", value)

    @property
    @pulumi.getter(name="scanWindowsRegistry")
    def scan_windows_registry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_windows_registry")

    @scan_windows_registry.setter
    def scan_windows_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_windows_registry", value)

    @property
    @pulumi.getter(name="scapEnabled")
    def scap_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if scanning should include scap.
        """
        return pulumi.get(self, "scap_enabled")

    @scap_enabled.setter
    def scap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scap_enabled", value)

    @property
    @pulumi.getter(name="scapFiles")
    def scap_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of SCAP user scripts for checks.
        """
        return pulumi.get(self, "scap_files")

    @scap_files.setter
    def scap_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scap_files", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeArgs']]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="trustedBaseImages")
    def trusted_base_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]]]:
        """
        List of trusted images.
        """
        return pulumi.get(self, "trusted_base_images")

    @trusted_base_images.setter
    def trusted_base_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]]]):
        pulumi.set(self, "trusted_base_images", value)

    @property
    @pulumi.getter(name="trustedBaseImagesEnabled")
    def trusted_base_images_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if list of trusted base images is relevant.
        """
        return pulumi.get(self, "trusted_base_images_enabled")

    @trusted_base_images_enabled.setter
    def trusted_base_images_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trusted_base_images_enabled", value)

    @property
    @pulumi.getter(name="vulnerabilityExploitability")
    def vulnerability_exploitability(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "vulnerability_exploitability")

    @vulnerability_exploitability.setter
    def vulnerability_exploitability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vulnerability_exploitability", value)

    @property
    @pulumi.getter(name="vulnerabilityScoreRanges")
    def vulnerability_score_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "vulnerability_score_ranges")

    @vulnerability_score_ranges.setter
    def vulnerability_score_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "vulnerability_score_ranges", value)

    @property
    @pulumi.getter(name="whitelistedLicenses")
    def whitelisted_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of whitelisted licenses.
        """
        return pulumi.get(self, "whitelisted_licenses")

    @whitelisted_licenses.setter
    def whitelisted_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelisted_licenses", value)

    @property
    @pulumi.getter(name="whitelistedLicensesEnabled")
    def whitelisted_licenses_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if license blacklist is relevant.
        """
        return pulumi.get(self, "whitelisted_licenses_enabled")

    @whitelisted_licenses_enabled.setter
    def whitelisted_licenses_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "whitelisted_licenses_enabled", value)


@pulumi.input_type
class _VmwareAssurancePolicyState:
    def __init__(__self__, *,
                 aggregated_vulnerability: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 allowed_images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 assurance_type: Optional[pulumi.Input[str]] = None,
                 audit_on_failure: Optional[pulumi.Input[bool]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 auto_scan_configured: Optional[pulumi.Input[bool]] = None,
                 auto_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_scan_times: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyAutoScanTimeArgs']]]] = None,
                 blacklist_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklist_permissions_enabled: Optional[pulumi.Input[bool]] = None,
                 blacklisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklisted_licenses_enabled: Optional[pulumi.Input[bool]] = None,
                 block_failed: Optional[pulumi.Input[bool]] = None,
                 control_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 custom_checks: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]]] = None,
                 custom_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 custom_severity: Optional[pulumi.Input[str]] = None,
                 custom_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cves_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cvss_severity: Optional[pulumi.Input[str]] = None,
                 cvss_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cvss_severity_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disallow_exploit_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disallow_malware: Optional[pulumi.Input[bool]] = None,
                 docker_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dta_enabled: Optional[pulumi.Input[bool]] = None,
                 dta_severity: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 enforce_after_days: Optional[pulumi.Input[int]] = None,
                 enforce_excessive_permissions: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_cicd: Optional[pulumi.Input[bool]] = None,
                 forbidden_labels: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyForbiddenLabelArgs']]]] = None,
                 forbidden_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 force_microenforcer: Optional[pulumi.Input[bool]] = None,
                 function_integrity_enabled: Optional[pulumi.Input[bool]] = None,
                 ignore_base_image_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln_period: Optional[pulumi.Input[int]] = None,
                 ignore_risk_resources_enabled: Optional[pulumi.Input[bool]] = None,
                 ignored_risk_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignored_sensitive_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_controls: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]]] = None,
                 kubernetes_controls_avd_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_controls_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lastupdate: Optional[pulumi.Input[str]] = None,
                 linux_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 malware_action: Optional[pulumi.Input[str]] = None,
                 maximum_score: Optional[pulumi.Input[float]] = None,
                 maximum_score_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_score_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_none_root_users: Optional[pulumi.Input[bool]] = None,
                 openshift_hardening_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]]] = None,
                 packages_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]]] = None,
                 partial_results_image_fail: Optional[pulumi.Input[bool]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 policy_settings: Optional[pulumi.Input['VmwareAssurancePolicyPolicySettingsArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 required_labels: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyRequiredLabelArgs']]]] = None,
                 required_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 scan_malware_in_archives: Optional[pulumi.Input[bool]] = None,
                 scan_nfs_mounts: Optional[pulumi.Input[bool]] = None,
                 scan_process_memory: Optional[pulumi.Input[bool]] = None,
                 scan_sensitive_data: Optional[pulumi.Input[bool]] = None,
                 scan_windows_registry: Optional[pulumi.Input[bool]] = None,
                 scap_enabled: Optional[pulumi.Input[bool]] = None,
                 scap_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeArgs']]]] = None,
                 trusted_base_images: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]]] = None,
                 trusted_base_images_enabled: Optional[pulumi.Input[bool]] = None,
                 vulnerability_exploitability: Optional[pulumi.Input[bool]] = None,
                 vulnerability_score_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 whitelisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 whitelisted_licenses_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering VmwareAssurancePolicy resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] aggregated_vulnerability: Aggregated vulnerability information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_images: List of explicitly allowed images.
        :param pulumi.Input[str] assurance_type: What type of assurance policy is described.
        :param pulumi.Input[bool] audit_on_failure: Indicates if auditing for failures.
        :param pulumi.Input[str] author: Name of user account that created the policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklist_permissions: List of function's forbidden permissions.
        :param pulumi.Input[bool] blacklist_permissions_enabled: Indicates if blacklist permissions is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklisted_licenses: List of blacklisted licenses.
        :param pulumi.Input[bool] blacklisted_licenses_enabled: Indicates if license blacklist is relevant.
        :param pulumi.Input[bool] block_failed: Indicates if failed images are blocked.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]] custom_checks: List of Custom user scripts for checks.
        :param pulumi.Input[bool] custom_checks_enabled: Indicates if scanning should include custom checks.
        :param pulumi.Input[bool] cves_black_list_enabled: Indicates if CVEs blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_black_lists: List of cves blacklisted items.
        :param pulumi.Input[bool] cves_white_list_enabled: Indicates if cves whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_white_lists: List of cves whitelisted licenses
        :param pulumi.Input[str] cvss_severity: Identifier of the cvss severity.
        :param pulumi.Input[bool] cvss_severity_enabled: Indicates if the cvss severity is scanned.
        :param pulumi.Input[bool] cvss_severity_exclude_no_fix: Indicates that policy should ignore cvss cases that do not have a known fix.
        :param pulumi.Input[bool] disallow_malware: Indicates if malware should block the image.
        :param pulumi.Input[bool] docker_cis_enabled: Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        :param pulumi.Input[str] domain: Name of the container image.
        :param pulumi.Input[bool] fail_cicd: Indicates if cicd failures will fail the image.
        :param pulumi.Input[bool] ignore_risk_resources_enabled: Indicates if risk resources are ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignored_risk_resources: List of ignored risk resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List of images.
        :param pulumi.Input[bool] kube_cis_enabled: Performs a Kubernetes CIS benchmark check for the host.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]] kubernetes_controls: List of Kubernetes controls.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: List of labels.
        :param pulumi.Input[float] maximum_score: Value of allowed maximum score.
        :param pulumi.Input[bool] maximum_score_enabled: Indicates if exceeding the maximum score is scanned.
        :param pulumi.Input[bool] only_none_root_users: Indicates if raise a warning for images that should only be run as root.
        :param pulumi.Input[bool] packages_black_list_enabled: Indicates if packages blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]] packages_black_lists: List of blacklisted images.
        :param pulumi.Input[bool] packages_white_list_enabled: Indicates if packages whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]] packages_white_lists: List of whitelisted images.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] registries: List of registries.
        :param pulumi.Input[bool] scan_sensitive_data: Indicates if scan should include sensitive data in the image.
        :param pulumi.Input[bool] scap_enabled: Indicates if scanning should include scap.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scap_files: List of SCAP user scripts for checks.
        :param pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]] trusted_base_images: List of trusted images.
        :param pulumi.Input[bool] trusted_base_images_enabled: Indicates if list of trusted base images is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelisted_licenses: List of whitelisted licenses.
        :param pulumi.Input[bool] whitelisted_licenses_enabled: Indicates if license blacklist is relevant.
        """
        if aggregated_vulnerability is not None:
            pulumi.set(__self__, "aggregated_vulnerability", aggregated_vulnerability)
        if allowed_images is not None:
            pulumi.set(__self__, "allowed_images", allowed_images)
        if application_scopes is not None:
            pulumi.set(__self__, "application_scopes", application_scopes)
        if assurance_type is not None:
            pulumi.set(__self__, "assurance_type", assurance_type)
        if audit_on_failure is not None:
            pulumi.set(__self__, "audit_on_failure", audit_on_failure)
        if author is not None:
            pulumi.set(__self__, "author", author)
        if auto_scan_configured is not None:
            pulumi.set(__self__, "auto_scan_configured", auto_scan_configured)
        if auto_scan_enabled is not None:
            pulumi.set(__self__, "auto_scan_enabled", auto_scan_enabled)
        if auto_scan_times is not None:
            pulumi.set(__self__, "auto_scan_times", auto_scan_times)
        if blacklist_permissions is not None:
            pulumi.set(__self__, "blacklist_permissions", blacklist_permissions)
        if blacklist_permissions_enabled is not None:
            pulumi.set(__self__, "blacklist_permissions_enabled", blacklist_permissions_enabled)
        if blacklisted_licenses is not None:
            pulumi.set(__self__, "blacklisted_licenses", blacklisted_licenses)
        if blacklisted_licenses_enabled is not None:
            pulumi.set(__self__, "blacklisted_licenses_enabled", blacklisted_licenses_enabled)
        if block_failed is not None:
            pulumi.set(__self__, "block_failed", block_failed)
        if control_exclude_no_fix is not None:
            pulumi.set(__self__, "control_exclude_no_fix", control_exclude_no_fix)
        if custom_checks is not None:
            pulumi.set(__self__, "custom_checks", custom_checks)
        if custom_checks_enabled is not None:
            pulumi.set(__self__, "custom_checks_enabled", custom_checks_enabled)
        if custom_severity is not None:
            pulumi.set(__self__, "custom_severity", custom_severity)
        if custom_severity_enabled is not None:
            pulumi.set(__self__, "custom_severity_enabled", custom_severity_enabled)
        if cves_black_list_enabled is not None:
            pulumi.set(__self__, "cves_black_list_enabled", cves_black_list_enabled)
        if cves_black_lists is not None:
            pulumi.set(__self__, "cves_black_lists", cves_black_lists)
        if cves_white_list_enabled is not None:
            pulumi.set(__self__, "cves_white_list_enabled", cves_white_list_enabled)
        if cves_white_lists is not None:
            pulumi.set(__self__, "cves_white_lists", cves_white_lists)
        if cvss_severity is not None:
            pulumi.set(__self__, "cvss_severity", cvss_severity)
        if cvss_severity_enabled is not None:
            pulumi.set(__self__, "cvss_severity_enabled", cvss_severity_enabled)
        if cvss_severity_exclude_no_fix is not None:
            pulumi.set(__self__, "cvss_severity_exclude_no_fix", cvss_severity_exclude_no_fix)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disallow_exploit_types is not None:
            pulumi.set(__self__, "disallow_exploit_types", disallow_exploit_types)
        if disallow_malware is not None:
            pulumi.set(__self__, "disallow_malware", disallow_malware)
        if docker_cis_enabled is not None:
            pulumi.set(__self__, "docker_cis_enabled", docker_cis_enabled)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dta_enabled is not None:
            pulumi.set(__self__, "dta_enabled", dta_enabled)
        if dta_severity is not None:
            pulumi.set(__self__, "dta_severity", dta_severity)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if enforce_after_days is not None:
            pulumi.set(__self__, "enforce_after_days", enforce_after_days)
        if enforce_excessive_permissions is not None:
            pulumi.set(__self__, "enforce_excessive_permissions", enforce_excessive_permissions)
        if exceptional_monitored_malware_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_malware_paths", exceptional_monitored_malware_paths)
        if exclude_application_scopes is not None:
            pulumi.set(__self__, "exclude_application_scopes", exclude_application_scopes)
        if fail_cicd is not None:
            pulumi.set(__self__, "fail_cicd", fail_cicd)
        if forbidden_labels is not None:
            pulumi.set(__self__, "forbidden_labels", forbidden_labels)
        if forbidden_labels_enabled is not None:
            pulumi.set(__self__, "forbidden_labels_enabled", forbidden_labels_enabled)
        if force_microenforcer is not None:
            pulumi.set(__self__, "force_microenforcer", force_microenforcer)
        if function_integrity_enabled is not None:
            pulumi.set(__self__, "function_integrity_enabled", function_integrity_enabled)
        if ignore_base_image_vln is not None:
            pulumi.set(__self__, "ignore_base_image_vln", ignore_base_image_vln)
        if ignore_recently_published_vln is not None:
            pulumi.set(__self__, "ignore_recently_published_vln", ignore_recently_published_vln)
        if ignore_recently_published_vln_period is not None:
            pulumi.set(__self__, "ignore_recently_published_vln_period", ignore_recently_published_vln_period)
        if ignore_risk_resources_enabled is not None:
            pulumi.set(__self__, "ignore_risk_resources_enabled", ignore_risk_resources_enabled)
        if ignored_risk_resources is not None:
            pulumi.set(__self__, "ignored_risk_resources", ignored_risk_resources)
        if ignored_sensitive_resources is not None:
            pulumi.set(__self__, "ignored_sensitive_resources", ignored_sensitive_resources)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if kube_cis_enabled is not None:
            pulumi.set(__self__, "kube_cis_enabled", kube_cis_enabled)
        if kubernetes_controls is not None:
            pulumi.set(__self__, "kubernetes_controls", kubernetes_controls)
        if kubernetes_controls_avd_ids is not None:
            pulumi.set(__self__, "kubernetes_controls_avd_ids", kubernetes_controls_avd_ids)
        if kubernetes_controls_names is not None:
            pulumi.set(__self__, "kubernetes_controls_names", kubernetes_controls_names)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if lastupdate is not None:
            pulumi.set(__self__, "lastupdate", lastupdate)
        if linux_cis_enabled is not None:
            pulumi.set(__self__, "linux_cis_enabled", linux_cis_enabled)
        if malware_action is not None:
            pulumi.set(__self__, "malware_action", malware_action)
        if maximum_score is not None:
            pulumi.set(__self__, "maximum_score", maximum_score)
        if maximum_score_enabled is not None:
            pulumi.set(__self__, "maximum_score_enabled", maximum_score_enabled)
        if maximum_score_exclude_no_fix is not None:
            pulumi.set(__self__, "maximum_score_exclude_no_fix", maximum_score_exclude_no_fix)
        if monitored_malware_paths is not None:
            pulumi.set(__self__, "monitored_malware_paths", monitored_malware_paths)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if only_none_root_users is not None:
            pulumi.set(__self__, "only_none_root_users", only_none_root_users)
        if openshift_hardening_enabled is not None:
            pulumi.set(__self__, "openshift_hardening_enabled", openshift_hardening_enabled)
        if packages_black_list_enabled is not None:
            pulumi.set(__self__, "packages_black_list_enabled", packages_black_list_enabled)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)
        if packages_white_list_enabled is not None:
            pulumi.set(__self__, "packages_white_list_enabled", packages_white_list_enabled)
        if packages_white_lists is not None:
            pulumi.set(__self__, "packages_white_lists", packages_white_lists)
        if partial_results_image_fail is not None:
            pulumi.set(__self__, "partial_results_image_fail", partial_results_image_fail)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if policy_settings is not None:
            pulumi.set(__self__, "policy_settings", policy_settings)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if registries is not None:
            pulumi.set(__self__, "registries", registries)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if required_labels is not None:
            pulumi.set(__self__, "required_labels", required_labels)
        if required_labels_enabled is not None:
            pulumi.set(__self__, "required_labels_enabled", required_labels_enabled)
        if scan_malware_in_archives is not None:
            pulumi.set(__self__, "scan_malware_in_archives", scan_malware_in_archives)
        if scan_nfs_mounts is not None:
            pulumi.set(__self__, "scan_nfs_mounts", scan_nfs_mounts)
        if scan_process_memory is not None:
            pulumi.set(__self__, "scan_process_memory", scan_process_memory)
        if scan_sensitive_data is not None:
            pulumi.set(__self__, "scan_sensitive_data", scan_sensitive_data)
        if scan_windows_registry is not None:
            pulumi.set(__self__, "scan_windows_registry", scan_windows_registry)
        if scap_enabled is not None:
            pulumi.set(__self__, "scap_enabled", scap_enabled)
        if scap_files is not None:
            pulumi.set(__self__, "scap_files", scap_files)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if trusted_base_images is not None:
            pulumi.set(__self__, "trusted_base_images", trusted_base_images)
        if trusted_base_images_enabled is not None:
            pulumi.set(__self__, "trusted_base_images_enabled", trusted_base_images_enabled)
        if vulnerability_exploitability is not None:
            pulumi.set(__self__, "vulnerability_exploitability", vulnerability_exploitability)
        if vulnerability_score_ranges is not None:
            pulumi.set(__self__, "vulnerability_score_ranges", vulnerability_score_ranges)
        if whitelisted_licenses is not None:
            pulumi.set(__self__, "whitelisted_licenses", whitelisted_licenses)
        if whitelisted_licenses_enabled is not None:
            pulumi.set(__self__, "whitelisted_licenses_enabled", whitelisted_licenses_enabled)

    @property
    @pulumi.getter(name="aggregatedVulnerability")
    def aggregated_vulnerability(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Aggregated vulnerability information.
        """
        return pulumi.get(self, "aggregated_vulnerability")

    @aggregated_vulnerability.setter
    def aggregated_vulnerability(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "aggregated_vulnerability", value)

    @property
    @pulumi.getter(name="allowedImages")
    def allowed_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of explicitly allowed images.
        """
        return pulumi.get(self, "allowed_images")

    @allowed_images.setter
    def allowed_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_images", value)

    @property
    @pulumi.getter(name="applicationScopes")
    def application_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "application_scopes")

    @application_scopes.setter
    def application_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "application_scopes", value)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> Optional[pulumi.Input[str]]:
        """
        What type of assurance policy is described.
        """
        return pulumi.get(self, "assurance_type")

    @assurance_type.setter
    def assurance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assurance_type", value)

    @property
    @pulumi.getter(name="auditOnFailure")
    def audit_on_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if auditing for failures.
        """
        return pulumi.get(self, "audit_on_failure")

    @audit_on_failure.setter
    def audit_on_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_on_failure", value)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter(name="autoScanConfigured")
    def auto_scan_configured(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_scan_configured")

    @auto_scan_configured.setter
    def auto_scan_configured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scan_configured", value)

    @property
    @pulumi.getter(name="autoScanEnabled")
    def auto_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_scan_enabled")

    @auto_scan_enabled.setter
    def auto_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scan_enabled", value)

    @property
    @pulumi.getter(name="autoScanTimes")
    def auto_scan_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyAutoScanTimeArgs']]]]:
        return pulumi.get(self, "auto_scan_times")

    @auto_scan_times.setter
    def auto_scan_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyAutoScanTimeArgs']]]]):
        pulumi.set(self, "auto_scan_times", value)

    @property
    @pulumi.getter(name="blacklistPermissions")
    def blacklist_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of function's forbidden permissions.
        """
        return pulumi.get(self, "blacklist_permissions")

    @blacklist_permissions.setter
    def blacklist_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blacklist_permissions", value)

    @property
    @pulumi.getter(name="blacklistPermissionsEnabled")
    def blacklist_permissions_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if blacklist permissions is relevant.
        """
        return pulumi.get(self, "blacklist_permissions_enabled")

    @blacklist_permissions_enabled.setter
    def blacklist_permissions_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacklist_permissions_enabled", value)

    @property
    @pulumi.getter(name="blacklistedLicenses")
    def blacklisted_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of blacklisted licenses.
        """
        return pulumi.get(self, "blacklisted_licenses")

    @blacklisted_licenses.setter
    def blacklisted_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blacklisted_licenses", value)

    @property
    @pulumi.getter(name="blacklistedLicensesEnabled")
    def blacklisted_licenses_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if license blacklist is relevant.
        """
        return pulumi.get(self, "blacklisted_licenses_enabled")

    @blacklisted_licenses_enabled.setter
    def blacklisted_licenses_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blacklisted_licenses_enabled", value)

    @property
    @pulumi.getter(name="blockFailed")
    def block_failed(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if failed images are blocked.
        """
        return pulumi.get(self, "block_failed")

    @block_failed.setter
    def block_failed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_failed", value)

    @property
    @pulumi.getter(name="controlExcludeNoFix")
    def control_exclude_no_fix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "control_exclude_no_fix")

    @control_exclude_no_fix.setter
    def control_exclude_no_fix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "control_exclude_no_fix", value)

    @property
    @pulumi.getter(name="customChecks")
    def custom_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]]]:
        """
        List of Custom user scripts for checks.
        """
        return pulumi.get(self, "custom_checks")

    @custom_checks.setter
    def custom_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyCustomCheckArgs']]]]):
        pulumi.set(self, "custom_checks", value)

    @property
    @pulumi.getter(name="customChecksEnabled")
    def custom_checks_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if scanning should include custom checks.
        """
        return pulumi.get(self, "custom_checks_enabled")

    @custom_checks_enabled.setter
    def custom_checks_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_checks_enabled", value)

    @property
    @pulumi.getter(name="customSeverity")
    def custom_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_severity")

    @custom_severity.setter
    def custom_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_severity", value)

    @property
    @pulumi.getter(name="customSeverityEnabled")
    def custom_severity_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_severity_enabled")

    @custom_severity_enabled.setter
    def custom_severity_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_severity_enabled", value)

    @property
    @pulumi.getter(name="cvesBlackListEnabled")
    def cves_black_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if CVEs blacklist is relevant.
        """
        return pulumi.get(self, "cves_black_list_enabled")

    @cves_black_list_enabled.setter
    def cves_black_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cves_black_list_enabled", value)

    @property
    @pulumi.getter(name="cvesBlackLists")
    def cves_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cves blacklisted items.
        """
        return pulumi.get(self, "cves_black_lists")

    @cves_black_lists.setter
    def cves_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cves_black_lists", value)

    @property
    @pulumi.getter(name="cvesWhiteListEnabled")
    def cves_white_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if cves whitelist is relevant.
        """
        return pulumi.get(self, "cves_white_list_enabled")

    @cves_white_list_enabled.setter
    def cves_white_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cves_white_list_enabled", value)

    @property
    @pulumi.getter(name="cvesWhiteLists")
    def cves_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of cves whitelisted licenses
        """
        return pulumi.get(self, "cves_white_lists")

    @cves_white_lists.setter
    def cves_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cves_white_lists", value)

    @property
    @pulumi.getter(name="cvssSeverity")
    def cvss_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the cvss severity.
        """
        return pulumi.get(self, "cvss_severity")

    @cvss_severity.setter
    def cvss_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvss_severity", value)

    @property
    @pulumi.getter(name="cvssSeverityEnabled")
    def cvss_severity_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the cvss severity is scanned.
        """
        return pulumi.get(self, "cvss_severity_enabled")

    @cvss_severity_enabled.setter
    def cvss_severity_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cvss_severity_enabled", value)

    @property
    @pulumi.getter(name="cvssSeverityExcludeNoFix")
    def cvss_severity_exclude_no_fix(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that policy should ignore cvss cases that do not have a known fix.
        """
        return pulumi.get(self, "cvss_severity_exclude_no_fix")

    @cvss_severity_exclude_no_fix.setter
    def cvss_severity_exclude_no_fix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cvss_severity_exclude_no_fix", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disallowExploitTypes")
    def disallow_exploit_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "disallow_exploit_types")

    @disallow_exploit_types.setter
    def disallow_exploit_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disallow_exploit_types", value)

    @property
    @pulumi.getter(name="disallowMalware")
    def disallow_malware(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if malware should block the image.
        """
        return pulumi.get(self, "disallow_malware")

    @disallow_malware.setter
    def disallow_malware(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disallow_malware", value)

    @property
    @pulumi.getter(name="dockerCisEnabled")
    def docker_cis_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        """
        return pulumi.get(self, "docker_cis_enabled")

    @docker_cis_enabled.setter
    def docker_cis_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "docker_cis_enabled", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the container image.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dtaEnabled")
    def dta_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dta_enabled")

    @dta_enabled.setter
    def dta_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dta_enabled", value)

    @property
    @pulumi.getter(name="dtaSeverity")
    def dta_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dta_severity")

    @dta_severity.setter
    def dta_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dta_severity", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="enforceAfterDays")
    def enforce_after_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "enforce_after_days")

    @enforce_after_days.setter
    def enforce_after_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enforce_after_days", value)

    @property
    @pulumi.getter(name="enforceExcessivePermissions")
    def enforce_excessive_permissions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce_excessive_permissions")

    @enforce_excessive_permissions.setter
    def enforce_excessive_permissions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_excessive_permissions", value)

    @property
    @pulumi.getter(name="exceptionalMonitoredMalwarePaths")
    def exceptional_monitored_malware_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exceptional_monitored_malware_paths")

    @exceptional_monitored_malware_paths.setter
    def exceptional_monitored_malware_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exceptional_monitored_malware_paths", value)

    @property
    @pulumi.getter(name="excludeApplicationScopes")
    def exclude_application_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_application_scopes")

    @exclude_application_scopes.setter
    def exclude_application_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_application_scopes", value)

    @property
    @pulumi.getter(name="failCicd")
    def fail_cicd(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if cicd failures will fail the image.
        """
        return pulumi.get(self, "fail_cicd")

    @fail_cicd.setter
    def fail_cicd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_cicd", value)

    @property
    @pulumi.getter(name="forbiddenLabels")
    def forbidden_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyForbiddenLabelArgs']]]]:
        return pulumi.get(self, "forbidden_labels")

    @forbidden_labels.setter
    def forbidden_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyForbiddenLabelArgs']]]]):
        pulumi.set(self, "forbidden_labels", value)

    @property
    @pulumi.getter(name="forbiddenLabelsEnabled")
    def forbidden_labels_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "forbidden_labels_enabled")

    @forbidden_labels_enabled.setter
    def forbidden_labels_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forbidden_labels_enabled", value)

    @property
    @pulumi.getter(name="forceMicroenforcer")
    def force_microenforcer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_microenforcer")

    @force_microenforcer.setter
    def force_microenforcer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_microenforcer", value)

    @property
    @pulumi.getter(name="functionIntegrityEnabled")
    def function_integrity_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "function_integrity_enabled")

    @function_integrity_enabled.setter
    def function_integrity_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "function_integrity_enabled", value)

    @property
    @pulumi.getter(name="ignoreBaseImageVln")
    def ignore_base_image_vln(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_base_image_vln")

    @ignore_base_image_vln.setter
    def ignore_base_image_vln(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_base_image_vln", value)

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVln")
    def ignore_recently_published_vln(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_recently_published_vln")

    @ignore_recently_published_vln.setter
    def ignore_recently_published_vln(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_recently_published_vln", value)

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVlnPeriod")
    def ignore_recently_published_vln_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ignore_recently_published_vln_period")

    @ignore_recently_published_vln_period.setter
    def ignore_recently_published_vln_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ignore_recently_published_vln_period", value)

    @property
    @pulumi.getter(name="ignoreRiskResourcesEnabled")
    def ignore_risk_resources_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if risk resources are ignored.
        """
        return pulumi.get(self, "ignore_risk_resources_enabled")

    @ignore_risk_resources_enabled.setter
    def ignore_risk_resources_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_risk_resources_enabled", value)

    @property
    @pulumi.getter(name="ignoredRiskResources")
    def ignored_risk_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of ignored risk resources.
        """
        return pulumi.get(self, "ignored_risk_resources")

    @ignored_risk_resources.setter
    def ignored_risk_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignored_risk_resources", value)

    @property
    @pulumi.getter(name="ignoredSensitiveResources")
    def ignored_sensitive_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignored_sensitive_resources")

    @ignored_sensitive_resources.setter
    def ignored_sensitive_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignored_sensitive_resources", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of images.
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="kubeCisEnabled")
    def kube_cis_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Performs a Kubernetes CIS benchmark check for the host.
        """
        return pulumi.get(self, "kube_cis_enabled")

    @kube_cis_enabled.setter
    def kube_cis_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kube_cis_enabled", value)

    @property
    @pulumi.getter(name="kubernetesControls")
    def kubernetes_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]]]:
        """
        List of Kubernetes controls.
        """
        return pulumi.get(self, "kubernetes_controls")

    @kubernetes_controls.setter
    def kubernetes_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyKubernetesControlArgs']]]]):
        pulumi.set(self, "kubernetes_controls", value)

    @property
    @pulumi.getter(name="kubernetesControlsAvdIds")
    def kubernetes_controls_avd_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kubernetes_controls_avd_ids")

    @kubernetes_controls_avd_ids.setter
    def kubernetes_controls_avd_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubernetes_controls_avd_ids", value)

    @property
    @pulumi.getter(name="kubernetesControlsNames")
    def kubernetes_controls_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kubernetes_controls_names")

    @kubernetes_controls_names.setter
    def kubernetes_controls_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubernetes_controls_names", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def lastupdate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lastupdate")

    @lastupdate.setter
    def lastupdate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lastupdate", value)

    @property
    @pulumi.getter(name="linuxCisEnabled")
    def linux_cis_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "linux_cis_enabled")

    @linux_cis_enabled.setter
    def linux_cis_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "linux_cis_enabled", value)

    @property
    @pulumi.getter(name="malwareAction")
    def malware_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "malware_action")

    @malware_action.setter
    def malware_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malware_action", value)

    @property
    @pulumi.getter(name="maximumScore")
    def maximum_score(self) -> Optional[pulumi.Input[float]]:
        """
        Value of allowed maximum score.
        """
        return pulumi.get(self, "maximum_score")

    @maximum_score.setter
    def maximum_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_score", value)

    @property
    @pulumi.getter(name="maximumScoreEnabled")
    def maximum_score_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if exceeding the maximum score is scanned.
        """
        return pulumi.get(self, "maximum_score_enabled")

    @maximum_score_enabled.setter
    def maximum_score_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maximum_score_enabled", value)

    @property
    @pulumi.getter(name="maximumScoreExcludeNoFix")
    def maximum_score_exclude_no_fix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "maximum_score_exclude_no_fix")

    @maximum_score_exclude_no_fix.setter
    def maximum_score_exclude_no_fix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maximum_score_exclude_no_fix", value)

    @property
    @pulumi.getter(name="monitoredMalwarePaths")
    def monitored_malware_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "monitored_malware_paths")

    @monitored_malware_paths.setter
    def monitored_malware_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_malware_paths", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onlyNoneRootUsers")
    def only_none_root_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if raise a warning for images that should only be run as root.
        """
        return pulumi.get(self, "only_none_root_users")

    @only_none_root_users.setter
    def only_none_root_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_none_root_users", value)

    @property
    @pulumi.getter(name="openshiftHardeningEnabled")
    def openshift_hardening_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "openshift_hardening_enabled")

    @openshift_hardening_enabled.setter
    def openshift_hardening_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "openshift_hardening_enabled", value)

    @property
    @pulumi.getter(name="packagesBlackListEnabled")
    def packages_black_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if packages blacklist is relevant.
        """
        return pulumi.get(self, "packages_black_list_enabled")

    @packages_black_list_enabled.setter
    def packages_black_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "packages_black_list_enabled", value)

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]]]:
        """
        List of blacklisted images.
        """
        return pulumi.get(self, "packages_black_lists")

    @packages_black_lists.setter
    def packages_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesBlackListArgs']]]]):
        pulumi.set(self, "packages_black_lists", value)

    @property
    @pulumi.getter(name="packagesWhiteListEnabled")
    def packages_white_list_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if packages whitelist is relevant.
        """
        return pulumi.get(self, "packages_white_list_enabled")

    @packages_white_list_enabled.setter
    def packages_white_list_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "packages_white_list_enabled", value)

    @property
    @pulumi.getter(name="packagesWhiteLists")
    def packages_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]]]:
        """
        List of whitelisted images.
        """
        return pulumi.get(self, "packages_white_lists")

    @packages_white_lists.setter
    def packages_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyPackagesWhiteListArgs']]]]):
        pulumi.set(self, "packages_white_lists", value)

    @property
    @pulumi.getter(name="partialResultsImageFail")
    def partial_results_image_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "partial_results_image_fail")

    @partial_results_image_fail.setter
    def partial_results_image_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "partial_results_image_fail", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="policySettings")
    def policy_settings(self) -> Optional[pulumi.Input['VmwareAssurancePolicyPolicySettingsArgs']]:
        return pulumi.get(self, "policy_settings")

    @policy_settings.setter
    def policy_settings(self, value: Optional[pulumi.Input['VmwareAssurancePolicyPolicySettingsArgs']]):
        pulumi.set(self, "policy_settings", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registries.
        """
        return pulumi.get(self, "registries")

    @registries.setter
    def registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "registries", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter(name="requiredLabels")
    def required_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyRequiredLabelArgs']]]]:
        return pulumi.get(self, "required_labels")

    @required_labels.setter
    def required_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyRequiredLabelArgs']]]]):
        pulumi.set(self, "required_labels", value)

    @property
    @pulumi.getter(name="requiredLabelsEnabled")
    def required_labels_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required_labels_enabled")

    @required_labels_enabled.setter
    def required_labels_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required_labels_enabled", value)

    @property
    @pulumi.getter(name="scanMalwareInArchives")
    def scan_malware_in_archives(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_malware_in_archives")

    @scan_malware_in_archives.setter
    def scan_malware_in_archives(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_malware_in_archives", value)

    @property
    @pulumi.getter(name="scanNfsMounts")
    def scan_nfs_mounts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_nfs_mounts")

    @scan_nfs_mounts.setter
    def scan_nfs_mounts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_nfs_mounts", value)

    @property
    @pulumi.getter(name="scanProcessMemory")
    def scan_process_memory(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_process_memory")

    @scan_process_memory.setter
    def scan_process_memory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_process_memory", value)

    @property
    @pulumi.getter(name="scanSensitiveData")
    def scan_sensitive_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if scan should include sensitive data in the image.
        """
        return pulumi.get(self, "scan_sensitive_data")

    @scan_sensitive_data.setter
    def scan_sensitive_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_sensitive_data", value)

    @property
    @pulumi.getter(name="scanWindowsRegistry")
    def scan_windows_registry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_windows_registry")

    @scan_windows_registry.setter
    def scan_windows_registry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_windows_registry", value)

    @property
    @pulumi.getter(name="scapEnabled")
    def scap_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if scanning should include scap.
        """
        return pulumi.get(self, "scap_enabled")

    @scap_enabled.setter
    def scap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scap_enabled", value)

    @property
    @pulumi.getter(name="scapFiles")
    def scap_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of SCAP user scripts for checks.
        """
        return pulumi.get(self, "scap_files")

    @scap_files.setter
    def scap_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scap_files", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeArgs']]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="trustedBaseImages")
    def trusted_base_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]]]:
        """
        List of trusted images.
        """
        return pulumi.get(self, "trusted_base_images")

    @trusted_base_images.setter
    def trusted_base_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmwareAssurancePolicyTrustedBaseImageArgs']]]]):
        pulumi.set(self, "trusted_base_images", value)

    @property
    @pulumi.getter(name="trustedBaseImagesEnabled")
    def trusted_base_images_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if list of trusted base images is relevant.
        """
        return pulumi.get(self, "trusted_base_images_enabled")

    @trusted_base_images_enabled.setter
    def trusted_base_images_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trusted_base_images_enabled", value)

    @property
    @pulumi.getter(name="vulnerabilityExploitability")
    def vulnerability_exploitability(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "vulnerability_exploitability")

    @vulnerability_exploitability.setter
    def vulnerability_exploitability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vulnerability_exploitability", value)

    @property
    @pulumi.getter(name="vulnerabilityScoreRanges")
    def vulnerability_score_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "vulnerability_score_ranges")

    @vulnerability_score_ranges.setter
    def vulnerability_score_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "vulnerability_score_ranges", value)

    @property
    @pulumi.getter(name="whitelistedLicenses")
    def whitelisted_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of whitelisted licenses.
        """
        return pulumi.get(self, "whitelisted_licenses")

    @whitelisted_licenses.setter
    def whitelisted_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelisted_licenses", value)

    @property
    @pulumi.getter(name="whitelistedLicensesEnabled")
    def whitelisted_licenses_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if license blacklist is relevant.
        """
        return pulumi.get(self, "whitelisted_licenses_enabled")

    @whitelisted_licenses_enabled.setter
    def whitelisted_licenses_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "whitelisted_licenses_enabled", value)


class VmwareAssurancePolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregated_vulnerability: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 allowed_images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 assurance_type: Optional[pulumi.Input[str]] = None,
                 audit_on_failure: Optional[pulumi.Input[bool]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 auto_scan_configured: Optional[pulumi.Input[bool]] = None,
                 auto_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_scan_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyAutoScanTimeArgs']]]]] = None,
                 blacklist_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklist_permissions_enabled: Optional[pulumi.Input[bool]] = None,
                 blacklisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklisted_licenses_enabled: Optional[pulumi.Input[bool]] = None,
                 block_failed: Optional[pulumi.Input[bool]] = None,
                 control_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 custom_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyCustomCheckArgs']]]]] = None,
                 custom_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 custom_severity: Optional[pulumi.Input[str]] = None,
                 custom_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cves_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cvss_severity: Optional[pulumi.Input[str]] = None,
                 cvss_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cvss_severity_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disallow_exploit_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disallow_malware: Optional[pulumi.Input[bool]] = None,
                 docker_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dta_enabled: Optional[pulumi.Input[bool]] = None,
                 dta_severity: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 enforce_after_days: Optional[pulumi.Input[int]] = None,
                 enforce_excessive_permissions: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_cicd: Optional[pulumi.Input[bool]] = None,
                 forbidden_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyForbiddenLabelArgs']]]]] = None,
                 forbidden_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 force_microenforcer: Optional[pulumi.Input[bool]] = None,
                 function_integrity_enabled: Optional[pulumi.Input[bool]] = None,
                 ignore_base_image_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln_period: Optional[pulumi.Input[int]] = None,
                 ignore_risk_resources_enabled: Optional[pulumi.Input[bool]] = None,
                 ignored_risk_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignored_sensitive_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_controls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyKubernetesControlArgs']]]]] = None,
                 kubernetes_controls_avd_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_controls_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lastupdate: Optional[pulumi.Input[str]] = None,
                 linux_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 malware_action: Optional[pulumi.Input[str]] = None,
                 maximum_score: Optional[pulumi.Input[float]] = None,
                 maximum_score_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_score_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_none_root_users: Optional[pulumi.Input[bool]] = None,
                 openshift_hardening_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesBlackListArgs']]]]] = None,
                 packages_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesWhiteListArgs']]]]] = None,
                 partial_results_image_fail: Optional[pulumi.Input[bool]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 policy_settings: Optional[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPolicySettingsArgs']]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 required_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyRequiredLabelArgs']]]]] = None,
                 required_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 scan_malware_in_archives: Optional[pulumi.Input[bool]] = None,
                 scan_nfs_mounts: Optional[pulumi.Input[bool]] = None,
                 scan_process_memory: Optional[pulumi.Input[bool]] = None,
                 scan_sensitive_data: Optional[pulumi.Input[bool]] = None,
                 scan_windows_registry: Optional[pulumi.Input[bool]] = None,
                 scap_enabled: Optional[pulumi.Input[bool]] = None,
                 scap_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyScopeArgs']]]]] = None,
                 trusted_base_images: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyTrustedBaseImageArgs']]]]] = None,
                 trusted_base_images_enabled: Optional[pulumi.Input[bool]] = None,
                 vulnerability_exploitability: Optional[pulumi.Input[bool]] = None,
                 vulnerability_score_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 whitelisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 whitelisted_licenses_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a VmwareAssurancePolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] aggregated_vulnerability: Aggregated vulnerability information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_images: List of explicitly allowed images.
        :param pulumi.Input[str] assurance_type: What type of assurance policy is described.
        :param pulumi.Input[bool] audit_on_failure: Indicates if auditing for failures.
        :param pulumi.Input[str] author: Name of user account that created the policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklist_permissions: List of function's forbidden permissions.
        :param pulumi.Input[bool] blacklist_permissions_enabled: Indicates if blacklist permissions is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklisted_licenses: List of blacklisted licenses.
        :param pulumi.Input[bool] blacklisted_licenses_enabled: Indicates if license blacklist is relevant.
        :param pulumi.Input[bool] block_failed: Indicates if failed images are blocked.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyCustomCheckArgs']]]] custom_checks: List of Custom user scripts for checks.
        :param pulumi.Input[bool] custom_checks_enabled: Indicates if scanning should include custom checks.
        :param pulumi.Input[bool] cves_black_list_enabled: Indicates if CVEs blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_black_lists: List of cves blacklisted items.
        :param pulumi.Input[bool] cves_white_list_enabled: Indicates if cves whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_white_lists: List of cves whitelisted licenses
        :param pulumi.Input[str] cvss_severity: Identifier of the cvss severity.
        :param pulumi.Input[bool] cvss_severity_enabled: Indicates if the cvss severity is scanned.
        :param pulumi.Input[bool] cvss_severity_exclude_no_fix: Indicates that policy should ignore cvss cases that do not have a known fix.
        :param pulumi.Input[bool] disallow_malware: Indicates if malware should block the image.
        :param pulumi.Input[bool] docker_cis_enabled: Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        :param pulumi.Input[str] domain: Name of the container image.
        :param pulumi.Input[bool] fail_cicd: Indicates if cicd failures will fail the image.
        :param pulumi.Input[bool] ignore_risk_resources_enabled: Indicates if risk resources are ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignored_risk_resources: List of ignored risk resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List of images.
        :param pulumi.Input[bool] kube_cis_enabled: Performs a Kubernetes CIS benchmark check for the host.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyKubernetesControlArgs']]]] kubernetes_controls: List of Kubernetes controls.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: List of labels.
        :param pulumi.Input[float] maximum_score: Value of allowed maximum score.
        :param pulumi.Input[bool] maximum_score_enabled: Indicates if exceeding the maximum score is scanned.
        :param pulumi.Input[bool] only_none_root_users: Indicates if raise a warning for images that should only be run as root.
        :param pulumi.Input[bool] packages_black_list_enabled: Indicates if packages blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesBlackListArgs']]]] packages_black_lists: List of blacklisted images.
        :param pulumi.Input[bool] packages_white_list_enabled: Indicates if packages whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesWhiteListArgs']]]] packages_white_lists: List of whitelisted images.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] registries: List of registries.
        :param pulumi.Input[bool] scan_sensitive_data: Indicates if scan should include sensitive data in the image.
        :param pulumi.Input[bool] scap_enabled: Indicates if scanning should include scap.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scap_files: List of SCAP user scripts for checks.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyTrustedBaseImageArgs']]]] trusted_base_images: List of trusted images.
        :param pulumi.Input[bool] trusted_base_images_enabled: Indicates if list of trusted base images is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelisted_licenses: List of whitelisted licenses.
        :param pulumi.Input[bool] whitelisted_licenses_enabled: Indicates if license blacklist is relevant.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmwareAssurancePolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VmwareAssurancePolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VmwareAssurancePolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmwareAssurancePolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregated_vulnerability: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 allowed_images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 assurance_type: Optional[pulumi.Input[str]] = None,
                 audit_on_failure: Optional[pulumi.Input[bool]] = None,
                 author: Optional[pulumi.Input[str]] = None,
                 auto_scan_configured: Optional[pulumi.Input[bool]] = None,
                 auto_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_scan_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyAutoScanTimeArgs']]]]] = None,
                 blacklist_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklist_permissions_enabled: Optional[pulumi.Input[bool]] = None,
                 blacklisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blacklisted_licenses_enabled: Optional[pulumi.Input[bool]] = None,
                 block_failed: Optional[pulumi.Input[bool]] = None,
                 control_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 custom_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyCustomCheckArgs']]]]] = None,
                 custom_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 custom_severity: Optional[pulumi.Input[str]] = None,
                 custom_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cves_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 cves_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cvss_severity: Optional[pulumi.Input[str]] = None,
                 cvss_severity_enabled: Optional[pulumi.Input[bool]] = None,
                 cvss_severity_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disallow_exploit_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disallow_malware: Optional[pulumi.Input[bool]] = None,
                 docker_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dta_enabled: Optional[pulumi.Input[bool]] = None,
                 dta_severity: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 enforce_after_days: Optional[pulumi.Input[int]] = None,
                 enforce_excessive_permissions: Optional[pulumi.Input[bool]] = None,
                 exceptional_monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_cicd: Optional[pulumi.Input[bool]] = None,
                 forbidden_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyForbiddenLabelArgs']]]]] = None,
                 forbidden_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 force_microenforcer: Optional[pulumi.Input[bool]] = None,
                 function_integrity_enabled: Optional[pulumi.Input[bool]] = None,
                 ignore_base_image_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln: Optional[pulumi.Input[bool]] = None,
                 ignore_recently_published_vln_period: Optional[pulumi.Input[int]] = None,
                 ignore_risk_resources_enabled: Optional[pulumi.Input[bool]] = None,
                 ignored_risk_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignored_sensitive_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_controls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyKubernetesControlArgs']]]]] = None,
                 kubernetes_controls_avd_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_controls_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lastupdate: Optional[pulumi.Input[str]] = None,
                 linux_cis_enabled: Optional[pulumi.Input[bool]] = None,
                 malware_action: Optional[pulumi.Input[str]] = None,
                 maximum_score: Optional[pulumi.Input[float]] = None,
                 maximum_score_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_score_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
                 monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 only_none_root_users: Optional[pulumi.Input[bool]] = None,
                 openshift_hardening_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesBlackListArgs']]]]] = None,
                 packages_white_list_enabled: Optional[pulumi.Input[bool]] = None,
                 packages_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesWhiteListArgs']]]]] = None,
                 partial_results_image_fail: Optional[pulumi.Input[bool]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 policy_settings: Optional[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPolicySettingsArgs']]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 required_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyRequiredLabelArgs']]]]] = None,
                 required_labels_enabled: Optional[pulumi.Input[bool]] = None,
                 scan_malware_in_archives: Optional[pulumi.Input[bool]] = None,
                 scan_nfs_mounts: Optional[pulumi.Input[bool]] = None,
                 scan_process_memory: Optional[pulumi.Input[bool]] = None,
                 scan_sensitive_data: Optional[pulumi.Input[bool]] = None,
                 scan_windows_registry: Optional[pulumi.Input[bool]] = None,
                 scap_enabled: Optional[pulumi.Input[bool]] = None,
                 scap_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyScopeArgs']]]]] = None,
                 trusted_base_images: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyTrustedBaseImageArgs']]]]] = None,
                 trusted_base_images_enabled: Optional[pulumi.Input[bool]] = None,
                 vulnerability_exploitability: Optional[pulumi.Input[bool]] = None,
                 vulnerability_score_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 whitelisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 whitelisted_licenses_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmwareAssurancePolicyArgs.__new__(VmwareAssurancePolicyArgs)

            __props__.__dict__["aggregated_vulnerability"] = aggregated_vulnerability
            __props__.__dict__["allowed_images"] = allowed_images
            if application_scopes is None and not opts.urn:
                raise TypeError("Missing required property 'application_scopes'")
            __props__.__dict__["application_scopes"] = application_scopes
            __props__.__dict__["assurance_type"] = assurance_type
            __props__.__dict__["audit_on_failure"] = audit_on_failure
            __props__.__dict__["author"] = author
            __props__.__dict__["auto_scan_configured"] = auto_scan_configured
            __props__.__dict__["auto_scan_enabled"] = auto_scan_enabled
            __props__.__dict__["auto_scan_times"] = auto_scan_times
            __props__.__dict__["blacklist_permissions"] = blacklist_permissions
            __props__.__dict__["blacklist_permissions_enabled"] = blacklist_permissions_enabled
            __props__.__dict__["blacklisted_licenses"] = blacklisted_licenses
            __props__.__dict__["blacklisted_licenses_enabled"] = blacklisted_licenses_enabled
            __props__.__dict__["block_failed"] = block_failed
            __props__.__dict__["control_exclude_no_fix"] = control_exclude_no_fix
            __props__.__dict__["custom_checks"] = custom_checks
            __props__.__dict__["custom_checks_enabled"] = custom_checks_enabled
            __props__.__dict__["custom_severity"] = custom_severity
            __props__.__dict__["custom_severity_enabled"] = custom_severity_enabled
            __props__.__dict__["cves_black_list_enabled"] = cves_black_list_enabled
            __props__.__dict__["cves_black_lists"] = cves_black_lists
            __props__.__dict__["cves_white_list_enabled"] = cves_white_list_enabled
            __props__.__dict__["cves_white_lists"] = cves_white_lists
            __props__.__dict__["cvss_severity"] = cvss_severity
            __props__.__dict__["cvss_severity_enabled"] = cvss_severity_enabled
            __props__.__dict__["cvss_severity_exclude_no_fix"] = cvss_severity_exclude_no_fix
            __props__.__dict__["description"] = description
            __props__.__dict__["disallow_exploit_types"] = disallow_exploit_types
            __props__.__dict__["disallow_malware"] = disallow_malware
            __props__.__dict__["docker_cis_enabled"] = docker_cis_enabled
            __props__.__dict__["domain"] = domain
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["dta_enabled"] = dta_enabled
            __props__.__dict__["dta_severity"] = dta_severity
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["enforce"] = enforce
            __props__.__dict__["enforce_after_days"] = enforce_after_days
            __props__.__dict__["enforce_excessive_permissions"] = enforce_excessive_permissions
            __props__.__dict__["exceptional_monitored_malware_paths"] = exceptional_monitored_malware_paths
            __props__.__dict__["exclude_application_scopes"] = exclude_application_scopes
            __props__.__dict__["fail_cicd"] = fail_cicd
            __props__.__dict__["forbidden_labels"] = forbidden_labels
            __props__.__dict__["forbidden_labels_enabled"] = forbidden_labels_enabled
            __props__.__dict__["force_microenforcer"] = force_microenforcer
            __props__.__dict__["function_integrity_enabled"] = function_integrity_enabled
            __props__.__dict__["ignore_base_image_vln"] = ignore_base_image_vln
            __props__.__dict__["ignore_recently_published_vln"] = ignore_recently_published_vln
            __props__.__dict__["ignore_recently_published_vln_period"] = ignore_recently_published_vln_period
            __props__.__dict__["ignore_risk_resources_enabled"] = ignore_risk_resources_enabled
            __props__.__dict__["ignored_risk_resources"] = ignored_risk_resources
            __props__.__dict__["ignored_sensitive_resources"] = ignored_sensitive_resources
            __props__.__dict__["images"] = images
            __props__.__dict__["kube_cis_enabled"] = kube_cis_enabled
            __props__.__dict__["kubernetes_controls"] = kubernetes_controls
            __props__.__dict__["kubernetes_controls_avd_ids"] = kubernetes_controls_avd_ids
            __props__.__dict__["kubernetes_controls_names"] = kubernetes_controls_names
            __props__.__dict__["labels"] = labels
            __props__.__dict__["lastupdate"] = lastupdate
            __props__.__dict__["linux_cis_enabled"] = linux_cis_enabled
            __props__.__dict__["malware_action"] = malware_action
            __props__.__dict__["maximum_score"] = maximum_score
            __props__.__dict__["maximum_score_enabled"] = maximum_score_enabled
            __props__.__dict__["maximum_score_exclude_no_fix"] = maximum_score_exclude_no_fix
            __props__.__dict__["monitored_malware_paths"] = monitored_malware_paths
            __props__.__dict__["name"] = name
            __props__.__dict__["only_none_root_users"] = only_none_root_users
            __props__.__dict__["openshift_hardening_enabled"] = openshift_hardening_enabled
            __props__.__dict__["packages_black_list_enabled"] = packages_black_list_enabled
            __props__.__dict__["packages_black_lists"] = packages_black_lists
            __props__.__dict__["packages_white_list_enabled"] = packages_white_list_enabled
            __props__.__dict__["packages_white_lists"] = packages_white_lists
            __props__.__dict__["partial_results_image_fail"] = partial_results_image_fail
            __props__.__dict__["permission"] = permission
            __props__.__dict__["policy_settings"] = policy_settings
            __props__.__dict__["read_only"] = read_only
            __props__.__dict__["registries"] = registries
            __props__.__dict__["registry"] = registry
            __props__.__dict__["required_labels"] = required_labels
            __props__.__dict__["required_labels_enabled"] = required_labels_enabled
            __props__.__dict__["scan_malware_in_archives"] = scan_malware_in_archives
            __props__.__dict__["scan_nfs_mounts"] = scan_nfs_mounts
            __props__.__dict__["scan_process_memory"] = scan_process_memory
            __props__.__dict__["scan_sensitive_data"] = scan_sensitive_data
            __props__.__dict__["scan_windows_registry"] = scan_windows_registry
            __props__.__dict__["scap_enabled"] = scap_enabled
            __props__.__dict__["scap_files"] = scap_files
            __props__.__dict__["scopes"] = scopes
            __props__.__dict__["trusted_base_images"] = trusted_base_images
            __props__.__dict__["trusted_base_images_enabled"] = trusted_base_images_enabled
            __props__.__dict__["vulnerability_exploitability"] = vulnerability_exploitability
            __props__.__dict__["vulnerability_score_ranges"] = vulnerability_score_ranges
            __props__.__dict__["whitelisted_licenses"] = whitelisted_licenses
            __props__.__dict__["whitelisted_licenses_enabled"] = whitelisted_licenses_enabled
        super(VmwareAssurancePolicy, __self__).__init__(
            'aquasec:index/vmwareAssurancePolicy:VmwareAssurancePolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aggregated_vulnerability: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            allowed_images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            assurance_type: Optional[pulumi.Input[str]] = None,
            audit_on_failure: Optional[pulumi.Input[bool]] = None,
            author: Optional[pulumi.Input[str]] = None,
            auto_scan_configured: Optional[pulumi.Input[bool]] = None,
            auto_scan_enabled: Optional[pulumi.Input[bool]] = None,
            auto_scan_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyAutoScanTimeArgs']]]]] = None,
            blacklist_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            blacklist_permissions_enabled: Optional[pulumi.Input[bool]] = None,
            blacklisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            blacklisted_licenses_enabled: Optional[pulumi.Input[bool]] = None,
            block_failed: Optional[pulumi.Input[bool]] = None,
            control_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
            custom_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyCustomCheckArgs']]]]] = None,
            custom_checks_enabled: Optional[pulumi.Input[bool]] = None,
            custom_severity: Optional[pulumi.Input[str]] = None,
            custom_severity_enabled: Optional[pulumi.Input[bool]] = None,
            cves_black_list_enabled: Optional[pulumi.Input[bool]] = None,
            cves_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cves_white_list_enabled: Optional[pulumi.Input[bool]] = None,
            cves_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cvss_severity: Optional[pulumi.Input[str]] = None,
            cvss_severity_enabled: Optional[pulumi.Input[bool]] = None,
            cvss_severity_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disallow_exploit_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            disallow_malware: Optional[pulumi.Input[bool]] = None,
            docker_cis_enabled: Optional[pulumi.Input[bool]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            dta_enabled: Optional[pulumi.Input[bool]] = None,
            dta_severity: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            enforce: Optional[pulumi.Input[bool]] = None,
            enforce_after_days: Optional[pulumi.Input[int]] = None,
            enforce_excessive_permissions: Optional[pulumi.Input[bool]] = None,
            exceptional_monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            exclude_application_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            fail_cicd: Optional[pulumi.Input[bool]] = None,
            forbidden_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyForbiddenLabelArgs']]]]] = None,
            forbidden_labels_enabled: Optional[pulumi.Input[bool]] = None,
            force_microenforcer: Optional[pulumi.Input[bool]] = None,
            function_integrity_enabled: Optional[pulumi.Input[bool]] = None,
            ignore_base_image_vln: Optional[pulumi.Input[bool]] = None,
            ignore_recently_published_vln: Optional[pulumi.Input[bool]] = None,
            ignore_recently_published_vln_period: Optional[pulumi.Input[int]] = None,
            ignore_risk_resources_enabled: Optional[pulumi.Input[bool]] = None,
            ignored_risk_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ignored_sensitive_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            images: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            kube_cis_enabled: Optional[pulumi.Input[bool]] = None,
            kubernetes_controls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyKubernetesControlArgs']]]]] = None,
            kubernetes_controls_avd_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            kubernetes_controls_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            lastupdate: Optional[pulumi.Input[str]] = None,
            linux_cis_enabled: Optional[pulumi.Input[bool]] = None,
            malware_action: Optional[pulumi.Input[str]] = None,
            maximum_score: Optional[pulumi.Input[float]] = None,
            maximum_score_enabled: Optional[pulumi.Input[bool]] = None,
            maximum_score_exclude_no_fix: Optional[pulumi.Input[bool]] = None,
            monitored_malware_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            only_none_root_users: Optional[pulumi.Input[bool]] = None,
            openshift_hardening_enabled: Optional[pulumi.Input[bool]] = None,
            packages_black_list_enabled: Optional[pulumi.Input[bool]] = None,
            packages_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesBlackListArgs']]]]] = None,
            packages_white_list_enabled: Optional[pulumi.Input[bool]] = None,
            packages_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesWhiteListArgs']]]]] = None,
            partial_results_image_fail: Optional[pulumi.Input[bool]] = None,
            permission: Optional[pulumi.Input[str]] = None,
            policy_settings: Optional[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPolicySettingsArgs']]] = None,
            read_only: Optional[pulumi.Input[bool]] = None,
            registries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            registry: Optional[pulumi.Input[str]] = None,
            required_labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyRequiredLabelArgs']]]]] = None,
            required_labels_enabled: Optional[pulumi.Input[bool]] = None,
            scan_malware_in_archives: Optional[pulumi.Input[bool]] = None,
            scan_nfs_mounts: Optional[pulumi.Input[bool]] = None,
            scan_process_memory: Optional[pulumi.Input[bool]] = None,
            scan_sensitive_data: Optional[pulumi.Input[bool]] = None,
            scan_windows_registry: Optional[pulumi.Input[bool]] = None,
            scap_enabled: Optional[pulumi.Input[bool]] = None,
            scap_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyScopeArgs']]]]] = None,
            trusted_base_images: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyTrustedBaseImageArgs']]]]] = None,
            trusted_base_images_enabled: Optional[pulumi.Input[bool]] = None,
            vulnerability_exploitability: Optional[pulumi.Input[bool]] = None,
            vulnerability_score_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            whitelisted_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            whitelisted_licenses_enabled: Optional[pulumi.Input[bool]] = None) -> 'VmwareAssurancePolicy':
        """
        Get an existing VmwareAssurancePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] aggregated_vulnerability: Aggregated vulnerability information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_images: List of explicitly allowed images.
        :param pulumi.Input[str] assurance_type: What type of assurance policy is described.
        :param pulumi.Input[bool] audit_on_failure: Indicates if auditing for failures.
        :param pulumi.Input[str] author: Name of user account that created the policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklist_permissions: List of function's forbidden permissions.
        :param pulumi.Input[bool] blacklist_permissions_enabled: Indicates if blacklist permissions is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blacklisted_licenses: List of blacklisted licenses.
        :param pulumi.Input[bool] blacklisted_licenses_enabled: Indicates if license blacklist is relevant.
        :param pulumi.Input[bool] block_failed: Indicates if failed images are blocked.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyCustomCheckArgs']]]] custom_checks: List of Custom user scripts for checks.
        :param pulumi.Input[bool] custom_checks_enabled: Indicates if scanning should include custom checks.
        :param pulumi.Input[bool] cves_black_list_enabled: Indicates if CVEs blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_black_lists: List of cves blacklisted items.
        :param pulumi.Input[bool] cves_white_list_enabled: Indicates if cves whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cves_white_lists: List of cves whitelisted licenses
        :param pulumi.Input[str] cvss_severity: Identifier of the cvss severity.
        :param pulumi.Input[bool] cvss_severity_enabled: Indicates if the cvss severity is scanned.
        :param pulumi.Input[bool] cvss_severity_exclude_no_fix: Indicates that policy should ignore cvss cases that do not have a known fix.
        :param pulumi.Input[bool] disallow_malware: Indicates if malware should block the image.
        :param pulumi.Input[bool] docker_cis_enabled: Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        :param pulumi.Input[str] domain: Name of the container image.
        :param pulumi.Input[bool] fail_cicd: Indicates if cicd failures will fail the image.
        :param pulumi.Input[bool] ignore_risk_resources_enabled: Indicates if risk resources are ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignored_risk_resources: List of ignored risk resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] images: List of images.
        :param pulumi.Input[bool] kube_cis_enabled: Performs a Kubernetes CIS benchmark check for the host.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyKubernetesControlArgs']]]] kubernetes_controls: List of Kubernetes controls.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: List of labels.
        :param pulumi.Input[float] maximum_score: Value of allowed maximum score.
        :param pulumi.Input[bool] maximum_score_enabled: Indicates if exceeding the maximum score is scanned.
        :param pulumi.Input[bool] only_none_root_users: Indicates if raise a warning for images that should only be run as root.
        :param pulumi.Input[bool] packages_black_list_enabled: Indicates if packages blacklist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesBlackListArgs']]]] packages_black_lists: List of blacklisted images.
        :param pulumi.Input[bool] packages_white_list_enabled: Indicates if packages whitelist is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyPackagesWhiteListArgs']]]] packages_white_lists: List of whitelisted images.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] registries: List of registries.
        :param pulumi.Input[bool] scan_sensitive_data: Indicates if scan should include sensitive data in the image.
        :param pulumi.Input[bool] scap_enabled: Indicates if scanning should include scap.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scap_files: List of SCAP user scripts for checks.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmwareAssurancePolicyTrustedBaseImageArgs']]]] trusted_base_images: List of trusted images.
        :param pulumi.Input[bool] trusted_base_images_enabled: Indicates if list of trusted base images is relevant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelisted_licenses: List of whitelisted licenses.
        :param pulumi.Input[bool] whitelisted_licenses_enabled: Indicates if license blacklist is relevant.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmwareAssurancePolicyState.__new__(_VmwareAssurancePolicyState)

        __props__.__dict__["aggregated_vulnerability"] = aggregated_vulnerability
        __props__.__dict__["allowed_images"] = allowed_images
        __props__.__dict__["application_scopes"] = application_scopes
        __props__.__dict__["assurance_type"] = assurance_type
        __props__.__dict__["audit_on_failure"] = audit_on_failure
        __props__.__dict__["author"] = author
        __props__.__dict__["auto_scan_configured"] = auto_scan_configured
        __props__.__dict__["auto_scan_enabled"] = auto_scan_enabled
        __props__.__dict__["auto_scan_times"] = auto_scan_times
        __props__.__dict__["blacklist_permissions"] = blacklist_permissions
        __props__.__dict__["blacklist_permissions_enabled"] = blacklist_permissions_enabled
        __props__.__dict__["blacklisted_licenses"] = blacklisted_licenses
        __props__.__dict__["blacklisted_licenses_enabled"] = blacklisted_licenses_enabled
        __props__.__dict__["block_failed"] = block_failed
        __props__.__dict__["control_exclude_no_fix"] = control_exclude_no_fix
        __props__.__dict__["custom_checks"] = custom_checks
        __props__.__dict__["custom_checks_enabled"] = custom_checks_enabled
        __props__.__dict__["custom_severity"] = custom_severity
        __props__.__dict__["custom_severity_enabled"] = custom_severity_enabled
        __props__.__dict__["cves_black_list_enabled"] = cves_black_list_enabled
        __props__.__dict__["cves_black_lists"] = cves_black_lists
        __props__.__dict__["cves_white_list_enabled"] = cves_white_list_enabled
        __props__.__dict__["cves_white_lists"] = cves_white_lists
        __props__.__dict__["cvss_severity"] = cvss_severity
        __props__.__dict__["cvss_severity_enabled"] = cvss_severity_enabled
        __props__.__dict__["cvss_severity_exclude_no_fix"] = cvss_severity_exclude_no_fix
        __props__.__dict__["description"] = description
        __props__.__dict__["disallow_exploit_types"] = disallow_exploit_types
        __props__.__dict__["disallow_malware"] = disallow_malware
        __props__.__dict__["docker_cis_enabled"] = docker_cis_enabled
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["dta_enabled"] = dta_enabled
        __props__.__dict__["dta_severity"] = dta_severity
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enforce"] = enforce
        __props__.__dict__["enforce_after_days"] = enforce_after_days
        __props__.__dict__["enforce_excessive_permissions"] = enforce_excessive_permissions
        __props__.__dict__["exceptional_monitored_malware_paths"] = exceptional_monitored_malware_paths
        __props__.__dict__["exclude_application_scopes"] = exclude_application_scopes
        __props__.__dict__["fail_cicd"] = fail_cicd
        __props__.__dict__["forbidden_labels"] = forbidden_labels
        __props__.__dict__["forbidden_labels_enabled"] = forbidden_labels_enabled
        __props__.__dict__["force_microenforcer"] = force_microenforcer
        __props__.__dict__["function_integrity_enabled"] = function_integrity_enabled
        __props__.__dict__["ignore_base_image_vln"] = ignore_base_image_vln
        __props__.__dict__["ignore_recently_published_vln"] = ignore_recently_published_vln
        __props__.__dict__["ignore_recently_published_vln_period"] = ignore_recently_published_vln_period
        __props__.__dict__["ignore_risk_resources_enabled"] = ignore_risk_resources_enabled
        __props__.__dict__["ignored_risk_resources"] = ignored_risk_resources
        __props__.__dict__["ignored_sensitive_resources"] = ignored_sensitive_resources
        __props__.__dict__["images"] = images
        __props__.__dict__["kube_cis_enabled"] = kube_cis_enabled
        __props__.__dict__["kubernetes_controls"] = kubernetes_controls
        __props__.__dict__["kubernetes_controls_avd_ids"] = kubernetes_controls_avd_ids
        __props__.__dict__["kubernetes_controls_names"] = kubernetes_controls_names
        __props__.__dict__["labels"] = labels
        __props__.__dict__["lastupdate"] = lastupdate
        __props__.__dict__["linux_cis_enabled"] = linux_cis_enabled
        __props__.__dict__["malware_action"] = malware_action
        __props__.__dict__["maximum_score"] = maximum_score
        __props__.__dict__["maximum_score_enabled"] = maximum_score_enabled
        __props__.__dict__["maximum_score_exclude_no_fix"] = maximum_score_exclude_no_fix
        __props__.__dict__["monitored_malware_paths"] = monitored_malware_paths
        __props__.__dict__["name"] = name
        __props__.__dict__["only_none_root_users"] = only_none_root_users
        __props__.__dict__["openshift_hardening_enabled"] = openshift_hardening_enabled
        __props__.__dict__["packages_black_list_enabled"] = packages_black_list_enabled
        __props__.__dict__["packages_black_lists"] = packages_black_lists
        __props__.__dict__["packages_white_list_enabled"] = packages_white_list_enabled
        __props__.__dict__["packages_white_lists"] = packages_white_lists
        __props__.__dict__["partial_results_image_fail"] = partial_results_image_fail
        __props__.__dict__["permission"] = permission
        __props__.__dict__["policy_settings"] = policy_settings
        __props__.__dict__["read_only"] = read_only
        __props__.__dict__["registries"] = registries
        __props__.__dict__["registry"] = registry
        __props__.__dict__["required_labels"] = required_labels
        __props__.__dict__["required_labels_enabled"] = required_labels_enabled
        __props__.__dict__["scan_malware_in_archives"] = scan_malware_in_archives
        __props__.__dict__["scan_nfs_mounts"] = scan_nfs_mounts
        __props__.__dict__["scan_process_memory"] = scan_process_memory
        __props__.__dict__["scan_sensitive_data"] = scan_sensitive_data
        __props__.__dict__["scan_windows_registry"] = scan_windows_registry
        __props__.__dict__["scap_enabled"] = scap_enabled
        __props__.__dict__["scap_files"] = scap_files
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["trusted_base_images"] = trusted_base_images
        __props__.__dict__["trusted_base_images_enabled"] = trusted_base_images_enabled
        __props__.__dict__["vulnerability_exploitability"] = vulnerability_exploitability
        __props__.__dict__["vulnerability_score_ranges"] = vulnerability_score_ranges
        __props__.__dict__["whitelisted_licenses"] = whitelisted_licenses
        __props__.__dict__["whitelisted_licenses_enabled"] = whitelisted_licenses_enabled
        return VmwareAssurancePolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aggregatedVulnerability")
    def aggregated_vulnerability(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Aggregated vulnerability information.
        """
        return pulumi.get(self, "aggregated_vulnerability")

    @property
    @pulumi.getter(name="allowedImages")
    def allowed_images(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of explicitly allowed images.
        """
        return pulumi.get(self, "allowed_images")

    @property
    @pulumi.getter(name="applicationScopes")
    def application_scopes(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "application_scopes")

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> pulumi.Output[str]:
        """
        What type of assurance policy is described.
        """
        return pulumi.get(self, "assurance_type")

    @property
    @pulumi.getter(name="auditOnFailure")
    def audit_on_failure(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if auditing for failures.
        """
        return pulumi.get(self, "audit_on_failure")

    @property
    @pulumi.getter
    def author(self) -> pulumi.Output[str]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter(name="autoScanConfigured")
    def auto_scan_configured(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "auto_scan_configured")

    @property
    @pulumi.getter(name="autoScanEnabled")
    def auto_scan_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "auto_scan_enabled")

    @property
    @pulumi.getter(name="autoScanTimes")
    def auto_scan_times(self) -> pulumi.Output[Sequence['outputs.VmwareAssurancePolicyAutoScanTime']]:
        return pulumi.get(self, "auto_scan_times")

    @property
    @pulumi.getter(name="blacklistPermissions")
    def blacklist_permissions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of function's forbidden permissions.
        """
        return pulumi.get(self, "blacklist_permissions")

    @property
    @pulumi.getter(name="blacklistPermissionsEnabled")
    def blacklist_permissions_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if blacklist permissions is relevant.
        """
        return pulumi.get(self, "blacklist_permissions_enabled")

    @property
    @pulumi.getter(name="blacklistedLicenses")
    def blacklisted_licenses(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of blacklisted licenses.
        """
        return pulumi.get(self, "blacklisted_licenses")

    @property
    @pulumi.getter(name="blacklistedLicensesEnabled")
    def blacklisted_licenses_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if license blacklist is relevant.
        """
        return pulumi.get(self, "blacklisted_licenses_enabled")

    @property
    @pulumi.getter(name="blockFailed")
    def block_failed(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if failed images are blocked.
        """
        return pulumi.get(self, "block_failed")

    @property
    @pulumi.getter(name="controlExcludeNoFix")
    def control_exclude_no_fix(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "control_exclude_no_fix")

    @property
    @pulumi.getter(name="customChecks")
    def custom_checks(self) -> pulumi.Output[Optional[Sequence['outputs.VmwareAssurancePolicyCustomCheck']]]:
        """
        List of Custom user scripts for checks.
        """
        return pulumi.get(self, "custom_checks")

    @property
    @pulumi.getter(name="customChecksEnabled")
    def custom_checks_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if scanning should include custom checks.
        """
        return pulumi.get(self, "custom_checks_enabled")

    @property
    @pulumi.getter(name="customSeverity")
    def custom_severity(self) -> pulumi.Output[str]:
        return pulumi.get(self, "custom_severity")

    @property
    @pulumi.getter(name="customSeverityEnabled")
    def custom_severity_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "custom_severity_enabled")

    @property
    @pulumi.getter(name="cvesBlackListEnabled")
    def cves_black_list_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if CVEs blacklist is relevant.
        """
        return pulumi.get(self, "cves_black_list_enabled")

    @property
    @pulumi.getter(name="cvesBlackLists")
    def cves_black_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cves blacklisted items.
        """
        return pulumi.get(self, "cves_black_lists")

    @property
    @pulumi.getter(name="cvesWhiteListEnabled")
    def cves_white_list_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if cves whitelist is relevant.
        """
        return pulumi.get(self, "cves_white_list_enabled")

    @property
    @pulumi.getter(name="cvesWhiteLists")
    def cves_white_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of cves whitelisted licenses
        """
        return pulumi.get(self, "cves_white_lists")

    @property
    @pulumi.getter(name="cvssSeverity")
    def cvss_severity(self) -> pulumi.Output[Optional[str]]:
        """
        Identifier of the cvss severity.
        """
        return pulumi.get(self, "cvss_severity")

    @property
    @pulumi.getter(name="cvssSeverityEnabled")
    def cvss_severity_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the cvss severity is scanned.
        """
        return pulumi.get(self, "cvss_severity_enabled")

    @property
    @pulumi.getter(name="cvssSeverityExcludeNoFix")
    def cvss_severity_exclude_no_fix(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates that policy should ignore cvss cases that do not have a known fix.
        """
        return pulumi.get(self, "cvss_severity_exclude_no_fix")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disallowExploitTypes")
    def disallow_exploit_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "disallow_exploit_types")

    @property
    @pulumi.getter(name="disallowMalware")
    def disallow_malware(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if malware should block the image.
        """
        return pulumi.get(self, "disallow_malware")

    @property
    @pulumi.getter(name="dockerCisEnabled")
    def docker_cis_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        """
        return pulumi.get(self, "docker_cis_enabled")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the container image.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="dtaEnabled")
    def dta_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "dta_enabled")

    @property
    @pulumi.getter(name="dtaSeverity")
    def dta_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dta_severity")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def enforce(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="enforceAfterDays")
    def enforce_after_days(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "enforce_after_days")

    @property
    @pulumi.getter(name="enforceExcessivePermissions")
    def enforce_excessive_permissions(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enforce_excessive_permissions")

    @property
    @pulumi.getter(name="exceptionalMonitoredMalwarePaths")
    def exceptional_monitored_malware_paths(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "exceptional_monitored_malware_paths")

    @property
    @pulumi.getter(name="excludeApplicationScopes")
    def exclude_application_scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "exclude_application_scopes")

    @property
    @pulumi.getter(name="failCicd")
    def fail_cicd(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if cicd failures will fail the image.
        """
        return pulumi.get(self, "fail_cicd")

    @property
    @pulumi.getter(name="forbiddenLabels")
    def forbidden_labels(self) -> pulumi.Output[Optional[Sequence['outputs.VmwareAssurancePolicyForbiddenLabel']]]:
        return pulumi.get(self, "forbidden_labels")

    @property
    @pulumi.getter(name="forbiddenLabelsEnabled")
    def forbidden_labels_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "forbidden_labels_enabled")

    @property
    @pulumi.getter(name="forceMicroenforcer")
    def force_microenforcer(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "force_microenforcer")

    @property
    @pulumi.getter(name="functionIntegrityEnabled")
    def function_integrity_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "function_integrity_enabled")

    @property
    @pulumi.getter(name="ignoreBaseImageVln")
    def ignore_base_image_vln(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "ignore_base_image_vln")

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVln")
    def ignore_recently_published_vln(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "ignore_recently_published_vln")

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVlnPeriod")
    def ignore_recently_published_vln_period(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ignore_recently_published_vln_period")

    @property
    @pulumi.getter(name="ignoreRiskResourcesEnabled")
    def ignore_risk_resources_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if risk resources are ignored.
        """
        return pulumi.get(self, "ignore_risk_resources_enabled")

    @property
    @pulumi.getter(name="ignoredRiskResources")
    def ignored_risk_resources(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of ignored risk resources.
        """
        return pulumi.get(self, "ignored_risk_resources")

    @property
    @pulumi.getter(name="ignoredSensitiveResources")
    def ignored_sensitive_resources(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "ignored_sensitive_resources")

    @property
    @pulumi.getter
    def images(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of images.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="kubeCisEnabled")
    def kube_cis_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Performs a Kubernetes CIS benchmark check for the host.
        """
        return pulumi.get(self, "kube_cis_enabled")

    @property
    @pulumi.getter(name="kubernetesControls")
    def kubernetes_controls(self) -> pulumi.Output[Optional[Sequence['outputs.VmwareAssurancePolicyKubernetesControl']]]:
        """
        List of Kubernetes controls.
        """
        return pulumi.get(self, "kubernetes_controls")

    @property
    @pulumi.getter(name="kubernetesControlsAvdIds")
    def kubernetes_controls_avd_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "kubernetes_controls_avd_ids")

    @property
    @pulumi.getter(name="kubernetesControlsNames")
    def kubernetes_controls_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "kubernetes_controls_names")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def lastupdate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "lastupdate")

    @property
    @pulumi.getter(name="linuxCisEnabled")
    def linux_cis_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "linux_cis_enabled")

    @property
    @pulumi.getter(name="malwareAction")
    def malware_action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "malware_action")

    @property
    @pulumi.getter(name="maximumScore")
    def maximum_score(self) -> pulumi.Output[Optional[float]]:
        """
        Value of allowed maximum score.
        """
        return pulumi.get(self, "maximum_score")

    @property
    @pulumi.getter(name="maximumScoreEnabled")
    def maximum_score_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if exceeding the maximum score is scanned.
        """
        return pulumi.get(self, "maximum_score_enabled")

    @property
    @pulumi.getter(name="maximumScoreExcludeNoFix")
    def maximum_score_exclude_no_fix(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "maximum_score_exclude_no_fix")

    @property
    @pulumi.getter(name="monitoredMalwarePaths")
    def monitored_malware_paths(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "monitored_malware_paths")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onlyNoneRootUsers")
    def only_none_root_users(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if raise a warning for images that should only be run as root.
        """
        return pulumi.get(self, "only_none_root_users")

    @property
    @pulumi.getter(name="openshiftHardeningEnabled")
    def openshift_hardening_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "openshift_hardening_enabled")

    @property
    @pulumi.getter(name="packagesBlackListEnabled")
    def packages_black_list_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if packages blacklist is relevant.
        """
        return pulumi.get(self, "packages_black_list_enabled")

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> pulumi.Output[Optional[Sequence['outputs.VmwareAssurancePolicyPackagesBlackList']]]:
        """
        List of blacklisted images.
        """
        return pulumi.get(self, "packages_black_lists")

    @property
    @pulumi.getter(name="packagesWhiteListEnabled")
    def packages_white_list_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if packages whitelist is relevant.
        """
        return pulumi.get(self, "packages_white_list_enabled")

    @property
    @pulumi.getter(name="packagesWhiteLists")
    def packages_white_lists(self) -> pulumi.Output[Optional[Sequence['outputs.VmwareAssurancePolicyPackagesWhiteList']]]:
        """
        List of whitelisted images.
        """
        return pulumi.get(self, "packages_white_lists")

    @property
    @pulumi.getter(name="partialResultsImageFail")
    def partial_results_image_fail(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "partial_results_image_fail")

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Output[str]:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="policySettings")
    def policy_settings(self) -> pulumi.Output['outputs.VmwareAssurancePolicyPolicySettings']:
        return pulumi.get(self, "policy_settings")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def registries(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of registries.
        """
        return pulumi.get(self, "registries")

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter(name="requiredLabels")
    def required_labels(self) -> pulumi.Output[Optional[Sequence['outputs.VmwareAssurancePolicyRequiredLabel']]]:
        return pulumi.get(self, "required_labels")

    @property
    @pulumi.getter(name="requiredLabelsEnabled")
    def required_labels_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "required_labels_enabled")

    @property
    @pulumi.getter(name="scanMalwareInArchives")
    def scan_malware_in_archives(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "scan_malware_in_archives")

    @property
    @pulumi.getter(name="scanNfsMounts")
    def scan_nfs_mounts(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "scan_nfs_mounts")

    @property
    @pulumi.getter(name="scanProcessMemory")
    def scan_process_memory(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "scan_process_memory")

    @property
    @pulumi.getter(name="scanSensitiveData")
    def scan_sensitive_data(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if scan should include sensitive data in the image.
        """
        return pulumi.get(self, "scan_sensitive_data")

    @property
    @pulumi.getter(name="scanWindowsRegistry")
    def scan_windows_registry(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "scan_windows_registry")

    @property
    @pulumi.getter(name="scapEnabled")
    def scap_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if scanning should include scap.
        """
        return pulumi.get(self, "scap_enabled")

    @property
    @pulumi.getter(name="scapFiles")
    def scap_files(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of SCAP user scripts for checks.
        """
        return pulumi.get(self, "scap_files")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence['outputs.VmwareAssurancePolicyScope']]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="trustedBaseImages")
    def trusted_base_images(self) -> pulumi.Output[Optional[Sequence['outputs.VmwareAssurancePolicyTrustedBaseImage']]]:
        """
        List of trusted images.
        """
        return pulumi.get(self, "trusted_base_images")

    @property
    @pulumi.getter(name="trustedBaseImagesEnabled")
    def trusted_base_images_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if list of trusted base images is relevant.
        """
        return pulumi.get(self, "trusted_base_images_enabled")

    @property
    @pulumi.getter(name="vulnerabilityExploitability")
    def vulnerability_exploitability(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "vulnerability_exploitability")

    @property
    @pulumi.getter(name="vulnerabilityScoreRanges")
    def vulnerability_score_ranges(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "vulnerability_score_ranges")

    @property
    @pulumi.getter(name="whitelistedLicenses")
    def whitelisted_licenses(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of whitelisted licenses.
        """
        return pulumi.get(self, "whitelisted_licenses")

    @property
    @pulumi.getter(name="whitelistedLicensesEnabled")
    def whitelisted_licenses_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if license blacklist is relevant.
        """
        return pulumi.get(self, "whitelisted_licenses_enabled")

