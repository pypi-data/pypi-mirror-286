# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AcknowledgeIssue',
    'ApplicationScopeCategory',
    'ApplicationScopeCategoryArtifact',
    'ApplicationScopeCategoryArtifactCf',
    'ApplicationScopeCategoryArtifactCfVariable',
    'ApplicationScopeCategoryArtifactFunction',
    'ApplicationScopeCategoryArtifactFunctionVariable',
    'ApplicationScopeCategoryArtifactImage',
    'ApplicationScopeCategoryArtifactImageVariable',
    'ApplicationScopeCategoryEntityScope',
    'ApplicationScopeCategoryEntityScopeVariable',
    'ApplicationScopeCategoryInfrastructure',
    'ApplicationScopeCategoryInfrastructureKubernete',
    'ApplicationScopeCategoryInfrastructureKuberneteVariable',
    'ApplicationScopeCategoryInfrastructureO',
    'ApplicationScopeCategoryInfrastructureOVariable',
    'ApplicationScopeCategoryWorkload',
    'ApplicationScopeCategoryWorkloadCf',
    'ApplicationScopeCategoryWorkloadCfVariable',
    'ApplicationScopeCategoryWorkloadKubernete',
    'ApplicationScopeCategoryWorkloadKuberneteVariable',
    'ApplicationScopeCategoryWorkloadO',
    'ApplicationScopeCategoryWorkloadOVariable',
    'ContainerRuntimePolicyAllowedExecutable',
    'ContainerRuntimePolicyAllowedRegistry',
    'ContainerRuntimePolicyAuditing',
    'ContainerRuntimePolicyBlacklistedOsUsers',
    'ContainerRuntimePolicyBypassScope',
    'ContainerRuntimePolicyBypassScopeScope',
    'ContainerRuntimePolicyBypassScopeScopeVariable',
    'ContainerRuntimePolicyContainerExec',
    'ContainerRuntimePolicyDriftPrevention',
    'ContainerRuntimePolicyExecutableBlacklist',
    'ContainerRuntimePolicyFailedKubernetesChecks',
    'ContainerRuntimePolicyFileBlock',
    'ContainerRuntimePolicyFileIntegrityMonitoring',
    'ContainerRuntimePolicyLimitContainerPrivilege',
    'ContainerRuntimePolicyLinuxCapabilities',
    'ContainerRuntimePolicyMalwareScanOptions',
    'ContainerRuntimePolicyPackageBlock',
    'ContainerRuntimePolicyPortBlock',
    'ContainerRuntimePolicyReadonlyFiles',
    'ContainerRuntimePolicyReadonlyRegistry',
    'ContainerRuntimePolicyRegistryAccessMonitoring',
    'ContainerRuntimePolicyRestrictedVolume',
    'ContainerRuntimePolicyReverseShell',
    'ContainerRuntimePolicyScope',
    'ContainerRuntimePolicyScopeVariable',
    'ContainerRuntimePolicySystemIntegrityProtection',
    'ContainerRuntimePolicyTripwire',
    'ContainerRuntimePolicyWhitelistedOsUsers',
    'EnforcerGroupsCommand',
    'EnforcerGroupsOrchestrator',
    'FirewallPolicyInboundNetwork',
    'FirewallPolicyOutboundNetwork',
    'FunctionAssurancePolicyAutoScanTime',
    'FunctionAssurancePolicyCustomCheck',
    'FunctionAssurancePolicyForbiddenLabel',
    'FunctionAssurancePolicyKubernetesControl',
    'FunctionAssurancePolicyPackagesBlackList',
    'FunctionAssurancePolicyPackagesWhiteList',
    'FunctionAssurancePolicyPolicySettings',
    'FunctionAssurancePolicyRequiredLabel',
    'FunctionAssurancePolicyScope',
    'FunctionAssurancePolicyScopeVariable',
    'FunctionAssurancePolicyTrustedBaseImage',
    'FunctionRuntimePolicyAllowedExecutable',
    'FunctionRuntimePolicyAllowedRegistry',
    'FunctionRuntimePolicyAuditing',
    'FunctionRuntimePolicyBlacklistedOsUsers',
    'FunctionRuntimePolicyBypassScope',
    'FunctionRuntimePolicyBypassScopeScope',
    'FunctionRuntimePolicyBypassScopeScopeVariable',
    'FunctionRuntimePolicyContainerExec',
    'FunctionRuntimePolicyDriftPrevention',
    'FunctionRuntimePolicyExecutableBlacklist',
    'FunctionRuntimePolicyFailedKubernetesChecks',
    'FunctionRuntimePolicyFileBlock',
    'FunctionRuntimePolicyFileIntegrityMonitoring',
    'FunctionRuntimePolicyLimitContainerPrivilege',
    'FunctionRuntimePolicyLinuxCapabilities',
    'FunctionRuntimePolicyMalwareScanOptions',
    'FunctionRuntimePolicyPackageBlock',
    'FunctionRuntimePolicyPortBlock',
    'FunctionRuntimePolicyReadonlyFiles',
    'FunctionRuntimePolicyReadonlyRegistry',
    'FunctionRuntimePolicyRegistryAccessMonitoring',
    'FunctionRuntimePolicyRestrictedVolume',
    'FunctionRuntimePolicyReverseShell',
    'FunctionRuntimePolicyScope',
    'FunctionRuntimePolicyScopeVariable',
    'FunctionRuntimePolicySystemIntegrityProtection',
    'FunctionRuntimePolicyTripwire',
    'FunctionRuntimePolicyWhitelistedOsUsers',
    'HostAssurancePolicyAutoScanTime',
    'HostAssurancePolicyCustomCheck',
    'HostAssurancePolicyForbiddenLabel',
    'HostAssurancePolicyPackagesBlackList',
    'HostAssurancePolicyPackagesWhiteList',
    'HostAssurancePolicyPolicySettings',
    'HostAssurancePolicyRequiredLabel',
    'HostAssurancePolicyScope',
    'HostAssurancePolicyScopeVariable',
    'HostAssurancePolicyTrustedBaseImage',
    'HostRuntimePolicyAllowedExecutable',
    'HostRuntimePolicyAllowedRegistry',
    'HostRuntimePolicyAuditing',
    'HostRuntimePolicyBlacklistedOsUsers',
    'HostRuntimePolicyBypassScope',
    'HostRuntimePolicyBypassScopeScope',
    'HostRuntimePolicyBypassScopeScopeVariable',
    'HostRuntimePolicyContainerExec',
    'HostRuntimePolicyDriftPrevention',
    'HostRuntimePolicyExecutableBlacklist',
    'HostRuntimePolicyFailedKubernetesChecks',
    'HostRuntimePolicyFileBlock',
    'HostRuntimePolicyFileIntegrityMonitoring',
    'HostRuntimePolicyLimitContainerPrivilege',
    'HostRuntimePolicyLinuxCapabilities',
    'HostRuntimePolicyMalwareScanOptions',
    'HostRuntimePolicyPackageBlock',
    'HostRuntimePolicyPortBlock',
    'HostRuntimePolicyReadonlyFiles',
    'HostRuntimePolicyReadonlyRegistry',
    'HostRuntimePolicyRegistryAccessMonitoring',
    'HostRuntimePolicyRestrictedVolume',
    'HostRuntimePolicyReverseShell',
    'HostRuntimePolicyScope',
    'HostRuntimePolicyScopeVariable',
    'HostRuntimePolicySystemIntegrityProtection',
    'HostRuntimePolicyTripwire',
    'HostRuntimePolicyWhitelistedOsUsers',
    'ImageAssuranceChecksPerformed',
    'ImageAssurancePolicyAutoScanTime',
    'ImageAssurancePolicyCustomCheck',
    'ImageAssurancePolicyForbiddenLabel',
    'ImageAssurancePolicyKubernetesControls',
    'ImageAssurancePolicyPackagesBlackList',
    'ImageAssurancePolicyPackagesWhiteList',
    'ImageAssurancePolicyPolicySettings',
    'ImageAssurancePolicyRequiredLabel',
    'ImageAssurancePolicyScope',
    'ImageAssurancePolicyScopeVariable',
    'ImageAssurancePolicyTrustedBaseImage',
    'ImageHistory',
    'ImageVulnerability',
    'IntegrationRegistryOption',
    'IntegrationRegistryWebhook',
    'KubernetesAssurancePolicyAutoScanTime',
    'KubernetesAssurancePolicyCustomCheck',
    'KubernetesAssurancePolicyForbiddenLabel',
    'KubernetesAssurancePolicyKubernetesControl',
    'KubernetesAssurancePolicyPackagesBlackList',
    'KubernetesAssurancePolicyPackagesWhiteList',
    'KubernetesAssurancePolicyPolicySettings',
    'KubernetesAssurancePolicyRequiredLabel',
    'KubernetesAssurancePolicyScope',
    'KubernetesAssurancePolicyScopeVariable',
    'KubernetesAssurancePolicyTrustedBaseImage',
    'RoleMappingLdap',
    'RoleMappingOauth2',
    'RoleMappingOpenid',
    'RoleMappingSaml',
    'ServiceScopeVariable',
    'UserSaasGroup',
    'UserSaasLogin',
    'VmwareAssurancePolicyAutoScanTime',
    'VmwareAssurancePolicyCustomCheck',
    'VmwareAssurancePolicyForbiddenLabel',
    'VmwareAssurancePolicyKubernetesControl',
    'VmwareAssurancePolicyPackagesBlackList',
    'VmwareAssurancePolicyPackagesWhiteList',
    'VmwareAssurancePolicyPolicySettings',
    'VmwareAssurancePolicyRequiredLabel',
    'VmwareAssurancePolicyScope',
    'VmwareAssurancePolicyScopeVariable',
    'VmwareAssurancePolicyTrustedBaseImage',
    'GetAcknowledgesAcknowledgeResult',
    'GetApplicationScopeCategoryResult',
    'GetApplicationScopeCategoryArtifactResult',
    'GetApplicationScopeCategoryArtifactCfResult',
    'GetApplicationScopeCategoryArtifactCfVariableResult',
    'GetApplicationScopeCategoryArtifactFunctionResult',
    'GetApplicationScopeCategoryArtifactFunctionVariableResult',
    'GetApplicationScopeCategoryArtifactImageResult',
    'GetApplicationScopeCategoryArtifactImageVariableResult',
    'GetApplicationScopeCategoryEntityScopeResult',
    'GetApplicationScopeCategoryEntityScopeVariableResult',
    'GetApplicationScopeCategoryInfrastructureResult',
    'GetApplicationScopeCategoryInfrastructureKuberneteResult',
    'GetApplicationScopeCategoryInfrastructureKuberneteVariableResult',
    'GetApplicationScopeCategoryInfrastructureOResult',
    'GetApplicationScopeCategoryInfrastructureOVariableResult',
    'GetApplicationScopeCategoryWorkloadResult',
    'GetApplicationScopeCategoryWorkloadCfResult',
    'GetApplicationScopeCategoryWorkloadCfVariableResult',
    'GetApplicationScopeCategoryWorkloadKuberneteResult',
    'GetApplicationScopeCategoryWorkloadKuberneteVariableResult',
    'GetApplicationScopeCategoryWorkloadOResult',
    'GetApplicationScopeCategoryWorkloadOVariableResult',
    'GetAquaLabelsAquaLabelResult',
    'GetContainerRuntimePolicyAllowedExecutableResult',
    'GetContainerRuntimePolicyAllowedRegistryResult',
    'GetContainerRuntimePolicyAuditingResult',
    'GetContainerRuntimePolicyContainerExecResult',
    'GetContainerRuntimePolicyFileBlockResult',
    'GetContainerRuntimePolicyFileIntegrityMonitoringResult',
    'GetContainerRuntimePolicyLimitContainerPrivilegeResult',
    'GetContainerRuntimePolicyMalwareScanOptionResult',
    'GetContainerRuntimePolicyPortBlockResult',
    'GetContainerRuntimePolicyReadonlyFilesResult',
    'GetContainerRuntimePolicyRestrictedVolumeResult',
    'GetContainerRuntimePolicyScopeVariableResult',
    'GetEnforcerGroupsCommandResult',
    'GetEnforcerGroupsOrchestratorResult',
    'GetFirewallPolicyInboundNetworkResult',
    'GetFirewallPolicyOutboundNetworkResult',
    'GetFunctionAssurancePolicyAutoScanTimeResult',
    'GetFunctionAssurancePolicyCustomCheckResult',
    'GetFunctionAssurancePolicyForbiddenLabelResult',
    'GetFunctionAssurancePolicyPackagesBlackListResult',
    'GetFunctionAssurancePolicyPackagesWhiteListResult',
    'GetFunctionAssurancePolicyRequiredLabelResult',
    'GetFunctionAssurancePolicyScopeResult',
    'GetFunctionAssurancePolicyScopeVariableResult',
    'GetFunctionAssurancePolicyTrustedBaseImageResult',
    'GetFunctionRuntimePolicyDriftPreventionResult',
    'GetFunctionRuntimePolicyExecutableBlacklistResult',
    'GetFunctionRuntimePolicyScopeVariableResult',
    'GetGatewaysGatewayResult',
    'GetGroupsGroupResult',
    'GetHostAssurancePolicyAutoScanTimeResult',
    'GetHostAssurancePolicyCustomCheckResult',
    'GetHostAssurancePolicyForbiddenLabelResult',
    'GetHostAssurancePolicyPackagesBlackListResult',
    'GetHostAssurancePolicyPackagesWhiteListResult',
    'GetHostAssurancePolicyRequiredLabelResult',
    'GetHostAssurancePolicyScopeResult',
    'GetHostAssurancePolicyScopeVariableResult',
    'GetHostAssurancePolicyTrustedBaseImageResult',
    'GetHostRuntimePolicyAuditingResult',
    'GetHostRuntimePolicyFileIntegrityMonitoringResult',
    'GetHostRuntimePolicyMalwareScanOptionResult',
    'GetHostRuntimePolicyPackageBlockResult',
    'GetHostRuntimePolicyScopeVariableResult',
    'GetHostRuntimePolicyWindowsRegistryMonitoringResult',
    'GetHostRuntimePolicyWindowsRegistryProtectionResult',
    'GetImageAssuranceChecksPerformedResult',
    'GetImageAssurancePolicyAutoScanTimeResult',
    'GetImageAssurancePolicyCustomCheckResult',
    'GetImageAssurancePolicyForbiddenLabelResult',
    'GetImageAssurancePolicyPackagesBlackListResult',
    'GetImageAssurancePolicyPackagesWhiteListResult',
    'GetImageAssurancePolicyRequiredLabelResult',
    'GetImageAssurancePolicyScopeResult',
    'GetImageAssurancePolicyScopeVariableResult',
    'GetImageAssurancePolicyTrustedBaseImageResult',
    'GetImageHistoryResult',
    'GetImageVulnerabilityResult',
    'GetIntegrationRegistriesOptionResult',
    'GetIntegrationRegistriesWebhookResult',
    'GetIntegrationRegistryOptionResult',
    'GetIntegrationRegistryWebhookResult',
    'GetKubernetesAssurancePolicyAutoScanTimeResult',
    'GetKubernetesAssurancePolicyCustomCheckResult',
    'GetKubernetesAssurancePolicyForbiddenLabelResult',
    'GetKubernetesAssurancePolicyPackagesBlackListResult',
    'GetKubernetesAssurancePolicyPackagesWhiteListResult',
    'GetKubernetesAssurancePolicyRequiredLabelResult',
    'GetKubernetesAssurancePolicyScopeResult',
    'GetKubernetesAssurancePolicyScopeVariableResult',
    'GetKubernetesAssurancePolicyTrustedBaseImageResult',
    'GetNotificationsEmailResult',
    'GetNotificationsJiraResult',
    'GetNotificationsServicenowResult',
    'GetNotificationsSlackResult',
    'GetNotificationsSplunkResult',
    'GetNotificationsTeamResult',
    'GetNotificationsWebhookResult',
    'GetPermissionsSetsPermissionsSetResult',
    'GetRolesMappingLdapResult',
    'GetRolesMappingOauth2Result',
    'GetRolesMappingOpenidResult',
    'GetRolesMappingSaasRolesMappingResult',
    'GetRolesMappingSamlResult',
    'GetRolesRoleResult',
    'GetServiceScopeVariableResult',
    'GetUsersSaasUserResult',
    'GetUsersSaasUserGroupResult',
    'GetUsersSaasUserLoginResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class AcknowledgeIssue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "issueName":
            suggest = "issue_name"
        elif key == "issueType":
            suggest = "issue_type"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "dockerId":
            suggest = "docker_id"
        elif key == "expirationConfiguredAt":
            suggest = "expiration_configured_at"
        elif key == "expirationConfiguredBy":
            suggest = "expiration_configured_by"
        elif key == "expirationDays":
            suggest = "expiration_days"
        elif key == "fixVersion":
            suggest = "fix_version"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "registryName":
            suggest = "registry_name"
        elif key == "resourceCpe":
            suggest = "resource_cpe"
        elif key == "resourceFormat":
            suggest = "resource_format"
        elif key == "resourceHash":
            suggest = "resource_hash"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourcePath":
            suggest = "resource_path"
        elif key == "resourceVersion":
            suggest = "resource_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AcknowledgeIssue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AcknowledgeIssue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AcknowledgeIssue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 issue_name: str,
                 issue_type: str,
                 resource_type: str,
                 author: Optional[str] = None,
                 date: Optional[str] = None,
                 docker_id: Optional[str] = None,
                 expiration_configured_at: Optional[str] = None,
                 expiration_configured_by: Optional[str] = None,
                 expiration_days: Optional[int] = None,
                 fix_version: Optional[str] = None,
                 image_name: Optional[str] = None,
                 os: Optional[str] = None,
                 os_version: Optional[str] = None,
                 permission: Optional[str] = None,
                 registry_name: Optional[str] = None,
                 resource_cpe: Optional[str] = None,
                 resource_format: Optional[str] = None,
                 resource_hash: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 resource_path: Optional[str] = None,
                 resource_version: Optional[str] = None):
        """
        :param str issue_name: The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
        :param str issue_type: The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')
        :param str resource_type: The type of the resource where the issue was detected (either 'package', 'file' or 'executable')
        :param str author: The user who acknowledged the issue.
        :param str date: The date and time of the acknowledgment.
        :param str expiration_configured_at: The current dat and time when the expiration was set
        :param str expiration_configured_by: The user who set the expiration of the issue.
        :param int expiration_days: Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
        :param str fix_version: The version of the package that having a fix for the issue.
        :param str image_name: Only acknowledge the issue in the context of the specified image (also requires 'registry_name')
        :param str os: When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').
        :param str os_version: When the resource_type is 'package', the operating system version is required.
        :param str permission: The permissions of the user who acknowledged the issue.
        :param str registry_name: Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').
        :param str resource_cpe: The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.
        :param str resource_format: The format of the resource.
        :param str resource_hash: When the resource_type is 'file', the hash of the file is required
        :param str resource_name: When the resource_type is 'package', the name of the package is required.
        :param str resource_path: The path of the resource. This is required for resources of type 'file' and 'executable'.
        :param str resource_version: When the resource_type is 'package', the version of the package is required
        """
        pulumi.set(__self__, "issue_name", issue_name)
        pulumi.set(__self__, "issue_type", issue_type)
        pulumi.set(__self__, "resource_type", resource_type)
        if author is not None:
            pulumi.set(__self__, "author", author)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if docker_id is not None:
            pulumi.set(__self__, "docker_id", docker_id)
        if expiration_configured_at is not None:
            pulumi.set(__self__, "expiration_configured_at", expiration_configured_at)
        if expiration_configured_by is not None:
            pulumi.set(__self__, "expiration_configured_by", expiration_configured_by)
        if expiration_days is not None:
            pulumi.set(__self__, "expiration_days", expiration_days)
        if fix_version is not None:
            pulumi.set(__self__, "fix_version", fix_version)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if registry_name is not None:
            pulumi.set(__self__, "registry_name", registry_name)
        if resource_cpe is not None:
            pulumi.set(__self__, "resource_cpe", resource_cpe)
        if resource_format is not None:
            pulumi.set(__self__, "resource_format", resource_format)
        if resource_hash is not None:
            pulumi.set(__self__, "resource_hash", resource_hash)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)

    @property
    @pulumi.getter(name="issueName")
    def issue_name(self) -> str:
        """
        The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
        """
        return pulumi.get(self, "issue_name")

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> str:
        """
        The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')
        """
        return pulumi.get(self, "issue_type")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The type of the resource where the issue was detected (either 'package', 'file' or 'executable')
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        """
        The user who acknowledged the issue.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        The date and time of the acknowledgment.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="dockerId")
    def docker_id(self) -> Optional[str]:
        return pulumi.get(self, "docker_id")

    @property
    @pulumi.getter(name="expirationConfiguredAt")
    def expiration_configured_at(self) -> Optional[str]:
        """
        The current dat and time when the expiration was set
        """
        return pulumi.get(self, "expiration_configured_at")

    @property
    @pulumi.getter(name="expirationConfiguredBy")
    def expiration_configured_by(self) -> Optional[str]:
        """
        The user who set the expiration of the issue.
        """
        return pulumi.get(self, "expiration_configured_by")

    @property
    @pulumi.getter(name="expirationDays")
    def expiration_days(self) -> Optional[int]:
        """
        Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
        """
        return pulumi.get(self, "expiration_days")

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> Optional[str]:
        """
        The version of the package that having a fix for the issue.
        """
        return pulumi.get(self, "fix_version")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        """
        Only acknowledge the issue in the context of the specified image (also requires 'registry_name')
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        """
        When the resource_type is 'package', the operating system version is required.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def permission(self) -> Optional[str]:
        """
        The permissions of the user who acknowledged the issue.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> Optional[str]:
        """
        Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').
        """
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> Optional[str]:
        """
        The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.
        """
        return pulumi.get(self, "resource_cpe")

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> Optional[str]:
        """
        The format of the resource.
        """
        return pulumi.get(self, "resource_format")

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> Optional[str]:
        """
        When the resource_type is 'file', the hash of the file is required
        """
        return pulumi.get(self, "resource_hash")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        When the resource_type is 'package', the name of the package is required.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[str]:
        """
        The path of the resource. This is required for resources of type 'file' and 'executable'.
        """
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        When the resource_type is 'package', the version of the package is required
        """
        return pulumi.get(self, "resource_version")


@pulumi.output_type
class ApplicationScopeCategory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityScopes":
            suggest = "entity_scopes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationScopeCategory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationScopeCategory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationScopeCategory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifacts: Optional[Sequence['outputs.ApplicationScopeCategoryArtifact']] = None,
                 entity_scopes: Optional[Sequence['outputs.ApplicationScopeCategoryEntityScope']] = None,
                 infrastructures: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructure']] = None,
                 workloads: Optional[Sequence['outputs.ApplicationScopeCategoryWorkload']] = None):
        """
        :param Sequence['ApplicationScopeCategoryArtifactArgs'] artifacts: An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
        :param Sequence['ApplicationScopeCategoryInfrastructureArgs'] infrastructures: An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
        :param Sequence['ApplicationScopeCategoryWorkloadArgs'] workloads: A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
        """
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifact']]:
        """
        An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
        """
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryEntityScope']]:
        return pulumi.get(self, "entity_scopes")

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructure']]:
        """
        An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
        """
        return pulumi.get(self, "infrastructures")

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkload']]:
        """
        A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
        """
        return pulumi.get(self, "workloads")


@pulumi.output_type
class ApplicationScopeCategoryArtifact(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCf']] = None,
                 functions: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunction']] = None,
                 images: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImage']] = None):
        """
        :param Sequence['ApplicationScopeCategoryArtifactFunctionArgs'] functions: Function name
        :param Sequence['ApplicationScopeCategoryArtifactImageArgs'] images: Name of a registry as defined in Aqua
        """
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCf']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunction']]:
        """
        Function name
        """
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImage']]:
        """
        Name of a registry as defined in Aqua
        """
        return pulumi.get(self, "images")


@pulumi.output_type
class ApplicationScopeCategoryArtifactCf(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCfVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCfVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryArtifactCfVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryArtifactFunction(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunctionVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunctionVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryArtifactFunctionVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryArtifactImage(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImageVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImageVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryArtifactImageVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryEntityScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryEntityScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryEntityScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryEntityScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructure(dict):
    def __init__(__self__, *,
                 kubernetes: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKubernete']] = None,
                 os: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureO']] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKubernete']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureO']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureKubernete(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKuberneteVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKuberneteVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureKuberneteVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureO(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureOVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureOVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureOVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryWorkload(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCf']] = None,
                 kubernetes: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKubernete']] = None,
                 os: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadO']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCf']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKubernete']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadO']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadCf(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCfVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCfVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadCfVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadKubernete(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKuberneteVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKuberneteVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadKuberneteVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadO(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadOVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadOVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadOVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ContainerRuntimePolicyAllowedExecutable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowExecutables":
            suggest = "allow_executables"
        elif key == "allowRootExecutables":
            suggest = "allow_root_executables"
        elif key == "separateExecutables":
            suggest = "separate_executables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyAllowedExecutable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyAllowedExecutable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyAllowedExecutable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_executables: Optional[Sequence[str]] = None,
                 allow_root_executables: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 separate_executables: Optional[bool] = None):
        """
        :param Sequence[str] allow_executables: List of allowed executables.
        :param Sequence[str] allow_root_executables: List of allowed root executables.
        :param bool enabled: Whether allowed executables configuration is enabled.
        :param bool separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[bool]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")


@pulumi.output_type
class ContainerRuntimePolicyAllowedRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedRegistries":
            suggest = "allowed_registries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyAllowedRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyAllowedRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyAllowedRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_registries: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[str] allowed_registries: List of allowed registries.
        :param bool enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[Sequence[str]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ContainerRuntimePolicyAuditing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditAllNetwork":
            suggest = "audit_all_network"
        elif key == "auditAllProcesses":
            suggest = "audit_all_processes"
        elif key == "auditFailedLogin":
            suggest = "audit_failed_login"
        elif key == "auditOsUserActivity":
            suggest = "audit_os_user_activity"
        elif key == "auditProcessCmdline":
            suggest = "audit_process_cmdline"
        elif key == "auditSuccessLogin":
            suggest = "audit_success_login"
        elif key == "auditUserAccountManagement":
            suggest = "audit_user_account_management"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyAuditing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyAuditing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyAuditing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_all_network: Optional[bool] = None,
                 audit_all_processes: Optional[bool] = None,
                 audit_failed_login: Optional[bool] = None,
                 audit_os_user_activity: Optional[bool] = None,
                 audit_process_cmdline: Optional[bool] = None,
                 audit_success_login: Optional[bool] = None,
                 audit_user_account_management: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_network")

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_processes")

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_failed_login")

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[bool]:
        return pulumi.get(self, "audit_os_user_activity")

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[bool]:
        return pulumi.get(self, "audit_process_cmdline")

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_success_login")

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[bool]:
        return pulumi.get(self, "audit_user_account_management")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ContainerRuntimePolicyBlacklistedOsUsers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBlackLists":
            suggest = "group_black_lists"
        elif key == "userBlackLists":
            suggest = "user_black_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyBlacklistedOsUsers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyBlacklistedOsUsers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyBlacklistedOsUsers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group_black_lists: Optional[Sequence[str]] = None,
                 user_black_lists: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_black_lists is not None:
            pulumi.set(__self__, "group_black_lists", group_black_lists)
        if user_black_lists is not None:
            pulumi.set(__self__, "user_black_lists", user_black_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupBlackLists")
    def group_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_black_lists")

    @property
    @pulumi.getter(name="userBlackLists")
    def user_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_black_lists")


@pulumi.output_type
class ContainerRuntimePolicyBypassScope(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 scopes: Optional[Sequence['outputs.ContainerRuntimePolicyBypassScopeScope']] = None):
        """
        :param bool enabled: Whether bypassing the scope is enabled.
        :param Sequence['ContainerRuntimePolicyBypassScopeScopeArgs'] scopes: Scope configuration.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether bypassing the scope is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.ContainerRuntimePolicyBypassScopeScope']]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class ContainerRuntimePolicyBypassScopeScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ContainerRuntimePolicyBypassScopeScopeVariable']] = None):
        """
        :param str expression: Scope expression.
        :param Sequence['ContainerRuntimePolicyBypassScopeScopeVariableArgs'] variables: List of variables in the scope.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ContainerRuntimePolicyBypassScopeScopeVariable']]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class ContainerRuntimePolicyBypassScopeScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str attribute: Variable attribute.
        :param str value: Variable value.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        """
        Variable attribute.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ContainerRuntimePolicyContainerExec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockContainerExec":
            suggest = "block_container_exec"
        elif key == "containerExecProcWhiteLists":
            suggest = "container_exec_proc_white_lists"
        elif key == "reverseShellIpWhiteLists":
            suggest = "reverse_shell_ip_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyContainerExec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyContainerExec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyContainerExec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_container_exec: Optional[bool] = None,
                 container_exec_proc_white_lists: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[bool]:
        return pulumi.get(self, "block_container_exec")

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")


@pulumi.output_type
class ContainerRuntimePolicyDriftPrevention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "execLockdown":
            suggest = "exec_lockdown"
        elif key == "execLockdownWhiteLists":
            suggest = "exec_lockdown_white_lists"
        elif key == "imageLockdown":
            suggest = "image_lockdown"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyDriftPrevention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyDriftPrevention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyDriftPrevention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exec_lockdown: Optional[bool] = None,
                 exec_lockdown_white_lists: Optional[Sequence[str]] = None,
                 image_lockdown: Optional[bool] = None):
        """
        :param bool enabled: Whether drift prevention is enabled.
        :param bool exec_lockdown: Whether to lockdown execution drift.
        :param Sequence[str] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param bool image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[Sequence[str]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")


@pulumi.output_type
class ContainerRuntimePolicyExecutableBlacklist(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 executables: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether the executable blacklist is enabled.
        :param Sequence[str] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def executables(self) -> Optional[Sequence[str]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")


@pulumi.output_type
class ContainerRuntimePolicyFailedKubernetesChecks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedChecks":
            suggest = "failed_checks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyFailedKubernetesChecks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyFailedKubernetesChecks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyFailedKubernetesChecks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 failed_checks: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed_checks is not None:
            pulumi.set(__self__, "failed_checks", failed_checks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failedChecks")
    def failed_checks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failed_checks")


@pulumi.output_type
class ContainerRuntimePolicyFileBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockFilesProcesses":
            suggest = "block_files_processes"
        elif key == "blockFilesUsers":
            suggest = "block_files_users"
        elif key == "exceptionalBlockFiles":
            suggest = "exceptional_block_files"
        elif key == "exceptionalBlockFilesProcesses":
            suggest = "exceptional_block_files_processes"
        elif key == "exceptionalBlockFilesUsers":
            suggest = "exceptional_block_files_users"
        elif key == "filenameBlockLists":
            suggest = "filename_block_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyFileBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyFileBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyFileBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_files_processes: Optional[Sequence[str]] = None,
                 block_files_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_files: Optional[Sequence[str]] = None,
                 exceptional_block_files_processes: Optional[Sequence[str]] = None,
                 exceptional_block_files_users: Optional[Sequence[str]] = None,
                 filename_block_lists: Optional[Sequence[str]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_processes")

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files")

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filename_block_lists")


@pulumi.output_type
class ContainerRuntimePolicyFileIntegrityMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalMonitoredFiles":
            suggest = "exceptional_monitored_files"
        elif key == "exceptionalMonitoredFilesProcesses":
            suggest = "exceptional_monitored_files_processes"
        elif key == "exceptionalMonitoredFilesUsers":
            suggest = "exceptional_monitored_files_users"
        elif key == "monitoredFiles":
            suggest = "monitored_files"
        elif key == "monitoredFilesAttributes":
            suggest = "monitored_files_attributes"
        elif key == "monitoredFilesCreate":
            suggest = "monitored_files_create"
        elif key == "monitoredFilesDelete":
            suggest = "monitored_files_delete"
        elif key == "monitoredFilesModify":
            suggest = "monitored_files_modify"
        elif key == "monitoredFilesProcesses":
            suggest = "monitored_files_processes"
        elif key == "monitoredFilesRead":
            suggest = "monitored_files_read"
        elif key == "monitoredFilesUsers":
            suggest = "monitored_files_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyFileIntegrityMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_files: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_users: Optional[Sequence[str]] = None,
                 monitored_files: Optional[Sequence[str]] = None,
                 monitored_files_attributes: Optional[bool] = None,
                 monitored_files_create: Optional[bool] = None,
                 monitored_files_delete: Optional[bool] = None,
                 monitored_files_modify: Optional[bool] = None,
                 monitored_files_processes: Optional[Sequence[str]] = None,
                 monitored_files_read: Optional[bool] = None,
                 monitored_files_users: Optional[Sequence[str]] = None):
        """
        :param bool enabled: If true, file integrity monitoring is enabled.
        :param Sequence[str] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param Sequence[str] monitored_files: List of paths to be monitored.
        :param bool monitored_files_attributes: Whether to monitor file attribute operations.
        :param bool monitored_files_create: Whether to monitor file create operations.
        :param bool monitored_files_delete: Whether to monitor file delete operations.
        :param bool monitored_files_modify: Whether to monitor file modify operations.
        :param Sequence[str] monitored_files_processes: List of processes associated with monitored files.
        :param bool monitored_files_read: Whether to monitor file read operations.
        :param Sequence[str] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[bool]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[bool]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[bool]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[bool]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[bool]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")


@pulumi.output_type
class ContainerRuntimePolicyLimitContainerPrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAddCapabilities":
            suggest = "block_add_capabilities"
        elif key == "preventLowPortBinding":
            suggest = "prevent_low_port_binding"
        elif key == "preventRootUser":
            suggest = "prevent_root_user"
        elif key == "useHostUser":
            suggest = "use_host_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyLimitContainerPrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyLimitContainerPrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyLimitContainerPrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_add_capabilities: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ipcmode: Optional[bool] = None,
                 netmode: Optional[bool] = None,
                 pidmode: Optional[bool] = None,
                 prevent_low_port_binding: Optional[bool] = None,
                 prevent_root_user: Optional[bool] = None,
                 privileged: Optional[bool] = None,
                 use_host_user: Optional[bool] = None,
                 usermode: Optional[bool] = None,
                 utsmode: Optional[bool] = None):
        """
        :param bool block_add_capabilities: Whether to block adding capabilities.
        :param bool enabled: Whether container privilege limitations are enabled.
        :param bool ipcmode: Whether to limit IPC-related capabilities.
        :param bool netmode: Whether to limit network-related capabilities.
        :param bool pidmode: Whether to limit process-related capabilities.
        :param bool prevent_low_port_binding: Whether to prevent low port binding.
        :param bool prevent_root_user: Whether to prevent the use of the root user.
        :param bool privileged: Whether the container is run in privileged mode.
        :param bool use_host_user: Whether to use the host user.
        :param bool usermode: Whether to limit user-related capabilities.
        :param bool utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[bool]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[bool]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @property
    @pulumi.getter
    def netmode(self) -> Optional[bool]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[bool]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[bool]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[bool]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[bool]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @property
    @pulumi.getter
    def usermode(self) -> Optional[bool]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[bool]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")


@pulumi.output_type
class ContainerRuntimePolicyLinuxCapabilities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeLinuxCapabilities":
            suggest = "remove_linux_capabilities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyLinuxCapabilities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyLinuxCapabilities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyLinuxCapabilities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 remove_linux_capabilities: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if remove_linux_capabilities is not None:
            pulumi.set(__self__, "remove_linux_capabilities", remove_linux_capabilities)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="removeLinuxCapabilities")
    def remove_linux_capabilities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "remove_linux_capabilities")


@pulumi.output_type
class ContainerRuntimePolicyMalwareScanOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeDirectories":
            suggest = "exclude_directories"
        elif key == "excludeProcesses":
            suggest = "exclude_processes"
        elif key == "includeDirectories":
            suggest = "include_directories"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyMalwareScanOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyMalwareScanOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyMalwareScanOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exclude_directories: Optional[Sequence[str]] = None,
                 exclude_processes: Optional[Sequence[str]] = None,
                 include_directories: Optional[Sequence[str]] = None):
        """
        :param str action: Set Action, Defaults to 'Alert' when empty
        :param bool enabled: Defines if enabled or not
        :param Sequence[str] exclude_directories: List of registry paths to be excluded from being protected.
        :param Sequence[str] exclude_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")


@pulumi.output_type
class ContainerRuntimePolicyPackageBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockPackagesProcesses":
            suggest = "block_packages_processes"
        elif key == "blockPackagesUsers":
            suggest = "block_packages_users"
        elif key == "exceptionalBlockPackagesFiles":
            suggest = "exceptional_block_packages_files"
        elif key == "exceptionalBlockPackagesProcesses":
            suggest = "exceptional_block_packages_processes"
        elif key == "exceptionalBlockPackagesUsers":
            suggest = "exceptional_block_packages_users"
        elif key == "packagesBlackLists":
            suggest = "packages_black_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyPackageBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyPackageBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyPackageBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_packages_processes: Optional[Sequence[str]] = None,
                 block_packages_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_packages_files: Optional[Sequence[str]] = None,
                 exceptional_block_packages_processes: Optional[Sequence[str]] = None,
                 exceptional_block_packages_users: Optional[Sequence[str]] = None,
                 packages_black_lists: Optional[Sequence[str]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_processes")

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages_black_lists")


@pulumi.output_type
class ContainerRuntimePolicyPortBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockInboundPorts":
            suggest = "block_inbound_ports"
        elif key == "blockOutboundPorts":
            suggest = "block_outbound_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyPortBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyPortBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyPortBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_inbound_ports: Optional[Sequence[str]] = None,
                 block_outbound_ports: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_inbound_ports")

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_outbound_ports")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ContainerRuntimePolicyReadonlyFiles(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalReadonlyFiles":
            suggest = "exceptional_readonly_files"
        elif key == "exceptionalReadonlyFilesProcesses":
            suggest = "exceptional_readonly_files_processes"
        elif key == "exceptionalReadonlyFilesUsers":
            suggest = "exceptional_readonly_files_users"
        elif key == "readonlyFiles":
            suggest = "readonly_files"
        elif key == "readonlyFilesProcesses":
            suggest = "readonly_files_processes"
        elif key == "readonlyFilesUsers":
            suggest = "readonly_files_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyReadonlyFiles. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyReadonlyFiles.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyReadonlyFiles.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_files: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_users: Optional[Sequence[str]] = None,
                 readonly_files: Optional[Sequence[str]] = None,
                 readonly_files_processes: Optional[Sequence[str]] = None,
                 readonly_files_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files")

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_processes")

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_users")


@pulumi.output_type
class ContainerRuntimePolicyReadonlyRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalReadonlyRegistryPaths":
            suggest = "exceptional_readonly_registry_paths"
        elif key == "exceptionalReadonlyRegistryProcesses":
            suggest = "exceptional_readonly_registry_processes"
        elif key == "exceptionalReadonlyRegistryUsers":
            suggest = "exceptional_readonly_registry_users"
        elif key == "readonlyRegistryPaths":
            suggest = "readonly_registry_paths"
        elif key == "readonlyRegistryProcesses":
            suggest = "readonly_registry_processes"
        elif key == "readonlyRegistryUsers":
            suggest = "readonly_registry_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyReadonlyRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyReadonlyRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyReadonlyRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_registry_paths: Optional[Sequence[str]] = None,
                 exceptional_readonly_registry_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_registry_users: Optional[Sequence[str]] = None,
                 readonly_registry_paths: Optional[Sequence[str]] = None,
                 readonly_registry_processes: Optional[Sequence[str]] = None,
                 readonly_registry_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_registry_paths is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_paths", exceptional_readonly_registry_paths)
        if exceptional_readonly_registry_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_processes", exceptional_readonly_registry_processes)
        if exceptional_readonly_registry_users is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_users", exceptional_readonly_registry_users)
        if readonly_registry_paths is not None:
            pulumi.set(__self__, "readonly_registry_paths", readonly_registry_paths)
        if readonly_registry_processes is not None:
            pulumi.set(__self__, "readonly_registry_processes", readonly_registry_processes)
        if readonly_registry_users is not None:
            pulumi.set(__self__, "readonly_registry_users", readonly_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryPaths")
    def exceptional_readonly_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_paths")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryProcesses")
    def exceptional_readonly_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_processes")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryUsers")
    def exceptional_readonly_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_users")

    @property
    @pulumi.getter(name="readonlyRegistryPaths")
    def readonly_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_paths")

    @property
    @pulumi.getter(name="readonlyRegistryProcesses")
    def readonly_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_processes")

    @property
    @pulumi.getter(name="readonlyRegistryUsers")
    def readonly_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_users")


@pulumi.output_type
class ContainerRuntimePolicyRegistryAccessMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalMonitoredRegistryPaths":
            suggest = "exceptional_monitored_registry_paths"
        elif key == "exceptionalMonitoredRegistryProcesses":
            suggest = "exceptional_monitored_registry_processes"
        elif key == "exceptionalMonitoredRegistryUsers":
            suggest = "exceptional_monitored_registry_users"
        elif key == "monitoredRegistryAttributes":
            suggest = "monitored_registry_attributes"
        elif key == "monitoredRegistryCreate":
            suggest = "monitored_registry_create"
        elif key == "monitoredRegistryDelete":
            suggest = "monitored_registry_delete"
        elif key == "monitoredRegistryModify":
            suggest = "monitored_registry_modify"
        elif key == "monitoredRegistryPaths":
            suggest = "monitored_registry_paths"
        elif key == "monitoredRegistryProcesses":
            suggest = "monitored_registry_processes"
        elif key == "monitoredRegistryRead":
            suggest = "monitored_registry_read"
        elif key == "monitoredRegistryUsers":
            suggest = "monitored_registry_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyRegistryAccessMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyRegistryAccessMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyRegistryAccessMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_registry_paths: Optional[Sequence[str]] = None,
                 exceptional_monitored_registry_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_registry_users: Optional[Sequence[str]] = None,
                 monitored_registry_attributes: Optional[bool] = None,
                 monitored_registry_create: Optional[bool] = None,
                 monitored_registry_delete: Optional[bool] = None,
                 monitored_registry_modify: Optional[bool] = None,
                 monitored_registry_paths: Optional[Sequence[str]] = None,
                 monitored_registry_processes: Optional[Sequence[str]] = None,
                 monitored_registry_read: Optional[bool] = None,
                 monitored_registry_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_registry_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_paths", exceptional_monitored_registry_paths)
        if exceptional_monitored_registry_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_processes", exceptional_monitored_registry_processes)
        if exceptional_monitored_registry_users is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_users", exceptional_monitored_registry_users)
        if monitored_registry_attributes is not None:
            pulumi.set(__self__, "monitored_registry_attributes", monitored_registry_attributes)
        if monitored_registry_create is not None:
            pulumi.set(__self__, "monitored_registry_create", monitored_registry_create)
        if monitored_registry_delete is not None:
            pulumi.set(__self__, "monitored_registry_delete", monitored_registry_delete)
        if monitored_registry_modify is not None:
            pulumi.set(__self__, "monitored_registry_modify", monitored_registry_modify)
        if monitored_registry_paths is not None:
            pulumi.set(__self__, "monitored_registry_paths", monitored_registry_paths)
        if monitored_registry_processes is not None:
            pulumi.set(__self__, "monitored_registry_processes", monitored_registry_processes)
        if monitored_registry_read is not None:
            pulumi.set(__self__, "monitored_registry_read", monitored_registry_read)
        if monitored_registry_users is not None:
            pulumi.set(__self__, "monitored_registry_users", monitored_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryPaths")
    def exceptional_monitored_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_paths")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryProcesses")
    def exceptional_monitored_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryUsers")
    def exceptional_monitored_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_users")

    @property
    @pulumi.getter(name="monitoredRegistryAttributes")
    def monitored_registry_attributes(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_attributes")

    @property
    @pulumi.getter(name="monitoredRegistryCreate")
    def monitored_registry_create(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_create")

    @property
    @pulumi.getter(name="monitoredRegistryDelete")
    def monitored_registry_delete(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_delete")

    @property
    @pulumi.getter(name="monitoredRegistryModify")
    def monitored_registry_modify(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_modify")

    @property
    @pulumi.getter(name="monitoredRegistryPaths")
    def monitored_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_paths")

    @property
    @pulumi.getter(name="monitoredRegistryProcesses")
    def monitored_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_processes")

    @property
    @pulumi.getter(name="monitoredRegistryRead")
    def monitored_registry_read(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_read")

    @property
    @pulumi.getter(name="monitoredRegistryUsers")
    def monitored_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_users")


@pulumi.output_type
class ContainerRuntimePolicyRestrictedVolume(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 volumes: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether restricted volumes are enabled.
        :param Sequence[str] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[str]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class ContainerRuntimePolicyReverseShell(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockReverseShell":
            suggest = "block_reverse_shell"
        elif key == "reverseShellIpWhiteLists":
            suggest = "reverse_shell_ip_white_lists"
        elif key == "reverseShellProcWhiteLists":
            suggest = "reverse_shell_proc_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyReverseShell. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyReverseShell.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyReverseShell.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_reverse_shell: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None,
                 reverse_shell_proc_white_lists: Optional[Sequence[str]] = None):
        if block_reverse_shell is not None:
            pulumi.set(__self__, "block_reverse_shell", block_reverse_shell)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)
        if reverse_shell_proc_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_proc_white_lists", reverse_shell_proc_white_lists)

    @property
    @pulumi.getter(name="blockReverseShell")
    def block_reverse_shell(self) -> Optional[bool]:
        return pulumi.get(self, "block_reverse_shell")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @property
    @pulumi.getter(name="reverseShellProcWhiteLists")
    def reverse_shell_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_proc_white_lists")


@pulumi.output_type
class ContainerRuntimePolicyScope(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Sequence['outputs.ContainerRuntimePolicyScopeVariable']):
        """
        :param str expression: Scope expression.
        :param Sequence['ContainerRuntimePolicyScopeVariableArgs'] variables: List of variables in the scope.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.ContainerRuntimePolicyScopeVariable']:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class ContainerRuntimePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str,
                 name: Optional[str] = None):
        """
        :param str attribute: Class of supported scope.
        :param str value: Value assigned to the attribute.
        :param str name: Name assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ContainerRuntimePolicySystemIntegrityProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditSystemtimeChange":
            suggest = "audit_systemtime_change"
        elif key == "monitorAuditLogIntegrity":
            suggest = "monitor_audit_log_integrity"
        elif key == "windowsServicesMonitoring":
            suggest = "windows_services_monitoring"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicySystemIntegrityProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicySystemIntegrityProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicySystemIntegrityProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_systemtime_change: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 monitor_audit_log_integrity: Optional[bool] = None,
                 windows_services_monitoring: Optional[bool] = None):
        if audit_systemtime_change is not None:
            pulumi.set(__self__, "audit_systemtime_change", audit_systemtime_change)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monitor_audit_log_integrity is not None:
            pulumi.set(__self__, "monitor_audit_log_integrity", monitor_audit_log_integrity)
        if windows_services_monitoring is not None:
            pulumi.set(__self__, "windows_services_monitoring", windows_services_monitoring)

    @property
    @pulumi.getter(name="auditSystemtimeChange")
    def audit_systemtime_change(self) -> Optional[bool]:
        return pulumi.get(self, "audit_systemtime_change")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="monitorAuditLogIntegrity")
    def monitor_audit_log_integrity(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_audit_log_integrity")

    @property
    @pulumi.getter(name="windowsServicesMonitoring")
    def windows_services_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "windows_services_monitoring")


@pulumi.output_type
class ContainerRuntimePolicyTripwire(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyOns":
            suggest = "apply_ons"
        elif key == "serverlessApp":
            suggest = "serverless_app"
        elif key == "userId":
            suggest = "user_id"
        elif key == "userPassword":
            suggest = "user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyTripwire. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyTripwire.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyTripwire.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_ons: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 serverless_app: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_password: Optional[str] = None):
        if apply_ons is not None:
            pulumi.set(__self__, "apply_ons", apply_ons)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if serverless_app is not None:
            pulumi.set(__self__, "serverless_app", serverless_app)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="applyOns")
    def apply_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "apply_ons")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="serverlessApp")
    def serverless_app(self) -> Optional[str]:
        return pulumi.get(self, "serverless_app")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[str]:
        return pulumi.get(self, "user_password")


@pulumi.output_type
class ContainerRuntimePolicyWhitelistedOsUsers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupWhiteLists":
            suggest = "group_white_lists"
        elif key == "userWhiteLists":
            suggest = "user_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRuntimePolicyWhitelistedOsUsers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRuntimePolicyWhitelistedOsUsers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRuntimePolicyWhitelistedOsUsers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group_white_lists: Optional[Sequence[str]] = None,
                 user_white_lists: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_white_lists is not None:
            pulumi.set(__self__, "group_white_lists", group_white_lists)
        if user_white_lists is not None:
            pulumi.set(__self__, "user_white_lists", user_white_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupWhiteLists")
    def group_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_white_lists")

    @property
    @pulumi.getter(name="userWhiteLists")
    def user_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_white_lists")


@pulumi.output_type
class EnforcerGroupsCommand(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 kubernetes: Optional[str] = None,
                 swarm: Optional[str] = None,
                 windows: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if swarm is not None:
            pulumi.set(__self__, "swarm", swarm)
        if windows is not None:
            pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[str]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def swarm(self) -> Optional[str]:
        return pulumi.get(self, "swarm")

    @property
    @pulumi.getter
    def windows(self) -> Optional[str]:
        return pulumi.get(self, "windows")


@pulumi.output_type
class EnforcerGroupsOrchestrator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccount":
            suggest = "service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnforcerGroupsOrchestrator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnforcerGroupsOrchestrator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnforcerGroupsOrchestrator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 master: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 service_account: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str namespace: May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        :param str service_account: May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        if master is not None:
            pulumi.set(__self__, "master", master)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def master(self) -> Optional[bool]:
        return pulumi.get(self, "master")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FirewallPolicyInboundNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyInboundNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyInboundNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyInboundNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource_type: str,
                 resource: Optional[str] = None):
        """
        :param bool allow: Indicates whether the specified resources are allowed to pass in data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource_type: Type of the resource
        :param str resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to pass in data or requests.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class FirewallPolicyOutboundNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyOutboundNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyOutboundNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyOutboundNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource_type: str,
                 resource: Optional[str] = None):
        """
        :param bool allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource_type: Type of the resource.
        :param str resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class FunctionAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class FunctionAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        """
        :param str author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class FunctionAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionAssurancePolicyKubernetesControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avdId":
            suggest = "avd_id"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyKubernetesControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyKubernetesControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyKubernetesControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avd_id: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 ootb: Optional[bool] = None,
                 script_id: Optional[int] = None,
                 severity: Optional[str] = None):
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[str]:
        return pulumi.get(self, "avd_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ootb(self) -> Optional[bool]:
        return pulumi.get(self, "ootb")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[int]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class FunctionAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class FunctionAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class FunctionAssurancePolicyPolicySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAuditChecked":
            suggest = "is_audit_checked"
        elif key == "warningMessage":
            suggest = "warning_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyPolicySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyPolicySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyPolicySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enforce: Optional[bool] = None,
                 is_audit_checked: Optional[bool] = None,
                 warn: Optional[bool] = None,
                 warning_message: Optional[str] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[bool]:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[bool]:
        return pulumi.get(self, "is_audit_checked")

    @property
    @pulumi.getter
    def warn(self) -> Optional[bool]:
        return pulumi.get(self, "warn")

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[str]:
        return pulumi.get(self, "warning_message")


@pulumi.output_type
class FunctionAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.FunctionAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.FunctionAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class FunctionAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class FunctionRuntimePolicyAllowedExecutable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowExecutables":
            suggest = "allow_executables"
        elif key == "allowRootExecutables":
            suggest = "allow_root_executables"
        elif key == "separateExecutables":
            suggest = "separate_executables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyAllowedExecutable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyAllowedExecutable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyAllowedExecutable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_executables: Optional[Sequence[str]] = None,
                 allow_root_executables: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 separate_executables: Optional[bool] = None):
        """
        :param Sequence[str] allow_executables: List of allowed executables.
        :param Sequence[str] allow_root_executables: List of allowed root executables.
        :param bool enabled: Whether allowed executables configuration is enabled.
        :param bool separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[bool]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")


@pulumi.output_type
class FunctionRuntimePolicyAllowedRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedRegistries":
            suggest = "allowed_registries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyAllowedRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyAllowedRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyAllowedRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_registries: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[str] allowed_registries: List of allowed registries.
        :param bool enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[Sequence[str]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class FunctionRuntimePolicyAuditing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditAllNetwork":
            suggest = "audit_all_network"
        elif key == "auditAllProcesses":
            suggest = "audit_all_processes"
        elif key == "auditFailedLogin":
            suggest = "audit_failed_login"
        elif key == "auditOsUserActivity":
            suggest = "audit_os_user_activity"
        elif key == "auditProcessCmdline":
            suggest = "audit_process_cmdline"
        elif key == "auditSuccessLogin":
            suggest = "audit_success_login"
        elif key == "auditUserAccountManagement":
            suggest = "audit_user_account_management"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyAuditing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyAuditing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyAuditing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_all_network: Optional[bool] = None,
                 audit_all_processes: Optional[bool] = None,
                 audit_failed_login: Optional[bool] = None,
                 audit_os_user_activity: Optional[bool] = None,
                 audit_process_cmdline: Optional[bool] = None,
                 audit_success_login: Optional[bool] = None,
                 audit_user_account_management: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_network")

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_processes")

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_failed_login")

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[bool]:
        return pulumi.get(self, "audit_os_user_activity")

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[bool]:
        return pulumi.get(self, "audit_process_cmdline")

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_success_login")

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[bool]:
        return pulumi.get(self, "audit_user_account_management")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class FunctionRuntimePolicyBlacklistedOsUsers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBlackLists":
            suggest = "group_black_lists"
        elif key == "userBlackLists":
            suggest = "user_black_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyBlacklistedOsUsers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyBlacklistedOsUsers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyBlacklistedOsUsers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group_black_lists: Optional[Sequence[str]] = None,
                 user_black_lists: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_black_lists is not None:
            pulumi.set(__self__, "group_black_lists", group_black_lists)
        if user_black_lists is not None:
            pulumi.set(__self__, "user_black_lists", user_black_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupBlackLists")
    def group_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_black_lists")

    @property
    @pulumi.getter(name="userBlackLists")
    def user_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_black_lists")


@pulumi.output_type
class FunctionRuntimePolicyBypassScope(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 scopes: Optional[Sequence['outputs.FunctionRuntimePolicyBypassScopeScope']] = None):
        """
        :param bool enabled: Whether bypassing the scope is enabled.
        :param Sequence['FunctionRuntimePolicyBypassScopeScopeArgs'] scopes: Scope configuration.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether bypassing the scope is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.FunctionRuntimePolicyBypassScopeScope']]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class FunctionRuntimePolicyBypassScopeScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.FunctionRuntimePolicyBypassScopeScopeVariable']] = None):
        """
        :param str expression: Scope expression.
        :param Sequence['FunctionRuntimePolicyBypassScopeScopeVariableArgs'] variables: List of variables in the scope.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.FunctionRuntimePolicyBypassScopeScopeVariable']]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class FunctionRuntimePolicyBypassScopeScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str attribute: Variable attribute.
        :param str value: Variable value.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        """
        Variable attribute.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionRuntimePolicyContainerExec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockContainerExec":
            suggest = "block_container_exec"
        elif key == "containerExecProcWhiteLists":
            suggest = "container_exec_proc_white_lists"
        elif key == "reverseShellIpWhiteLists":
            suggest = "reverse_shell_ip_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyContainerExec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyContainerExec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyContainerExec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_container_exec: Optional[bool] = None,
                 container_exec_proc_white_lists: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[bool]:
        return pulumi.get(self, "block_container_exec")

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")


@pulumi.output_type
class FunctionRuntimePolicyDriftPrevention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "execLockdown":
            suggest = "exec_lockdown"
        elif key == "execLockdownWhiteLists":
            suggest = "exec_lockdown_white_lists"
        elif key == "imageLockdown":
            suggest = "image_lockdown"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyDriftPrevention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyDriftPrevention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyDriftPrevention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exec_lockdown: Optional[bool] = None,
                 exec_lockdown_white_lists: Optional[Sequence[str]] = None,
                 image_lockdown: Optional[bool] = None):
        """
        :param bool enabled: Whether drift prevention is enabled.
        :param bool exec_lockdown: Whether to lockdown execution drift.
        :param Sequence[str] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param bool image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[Sequence[str]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")


@pulumi.output_type
class FunctionRuntimePolicyExecutableBlacklist(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 executables: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether the executable blacklist is enabled.
        :param Sequence[str] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def executables(self) -> Optional[Sequence[str]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")


@pulumi.output_type
class FunctionRuntimePolicyFailedKubernetesChecks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedChecks":
            suggest = "failed_checks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyFailedKubernetesChecks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyFailedKubernetesChecks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyFailedKubernetesChecks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 failed_checks: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed_checks is not None:
            pulumi.set(__self__, "failed_checks", failed_checks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failedChecks")
    def failed_checks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failed_checks")


@pulumi.output_type
class FunctionRuntimePolicyFileBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockFilesProcesses":
            suggest = "block_files_processes"
        elif key == "blockFilesUsers":
            suggest = "block_files_users"
        elif key == "exceptionalBlockFiles":
            suggest = "exceptional_block_files"
        elif key == "exceptionalBlockFilesProcesses":
            suggest = "exceptional_block_files_processes"
        elif key == "exceptionalBlockFilesUsers":
            suggest = "exceptional_block_files_users"
        elif key == "filenameBlockLists":
            suggest = "filename_block_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyFileBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyFileBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyFileBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_files_processes: Optional[Sequence[str]] = None,
                 block_files_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_files: Optional[Sequence[str]] = None,
                 exceptional_block_files_processes: Optional[Sequence[str]] = None,
                 exceptional_block_files_users: Optional[Sequence[str]] = None,
                 filename_block_lists: Optional[Sequence[str]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_processes")

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files")

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filename_block_lists")


@pulumi.output_type
class FunctionRuntimePolicyFileIntegrityMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalMonitoredFiles":
            suggest = "exceptional_monitored_files"
        elif key == "exceptionalMonitoredFilesProcesses":
            suggest = "exceptional_monitored_files_processes"
        elif key == "exceptionalMonitoredFilesUsers":
            suggest = "exceptional_monitored_files_users"
        elif key == "monitoredFiles":
            suggest = "monitored_files"
        elif key == "monitoredFilesAttributes":
            suggest = "monitored_files_attributes"
        elif key == "monitoredFilesCreate":
            suggest = "monitored_files_create"
        elif key == "monitoredFilesDelete":
            suggest = "monitored_files_delete"
        elif key == "monitoredFilesModify":
            suggest = "monitored_files_modify"
        elif key == "monitoredFilesProcesses":
            suggest = "monitored_files_processes"
        elif key == "monitoredFilesRead":
            suggest = "monitored_files_read"
        elif key == "monitoredFilesUsers":
            suggest = "monitored_files_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyFileIntegrityMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_files: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_users: Optional[Sequence[str]] = None,
                 monitored_files: Optional[Sequence[str]] = None,
                 monitored_files_attributes: Optional[bool] = None,
                 monitored_files_create: Optional[bool] = None,
                 monitored_files_delete: Optional[bool] = None,
                 monitored_files_modify: Optional[bool] = None,
                 monitored_files_processes: Optional[Sequence[str]] = None,
                 monitored_files_read: Optional[bool] = None,
                 monitored_files_users: Optional[Sequence[str]] = None):
        """
        :param bool enabled: If true, file integrity monitoring is enabled.
        :param Sequence[str] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param Sequence[str] monitored_files: List of paths to be monitored.
        :param bool monitored_files_attributes: Whether to monitor file attribute operations.
        :param bool monitored_files_create: Whether to monitor file create operations.
        :param bool monitored_files_delete: Whether to monitor file delete operations.
        :param bool monitored_files_modify: Whether to monitor file modify operations.
        :param Sequence[str] monitored_files_processes: List of processes associated with monitored files.
        :param bool monitored_files_read: Whether to monitor file read operations.
        :param Sequence[str] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[bool]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[bool]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[bool]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[bool]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[bool]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")


@pulumi.output_type
class FunctionRuntimePolicyLimitContainerPrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAddCapabilities":
            suggest = "block_add_capabilities"
        elif key == "preventLowPortBinding":
            suggest = "prevent_low_port_binding"
        elif key == "preventRootUser":
            suggest = "prevent_root_user"
        elif key == "useHostUser":
            suggest = "use_host_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyLimitContainerPrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyLimitContainerPrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyLimitContainerPrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_add_capabilities: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ipcmode: Optional[bool] = None,
                 netmode: Optional[bool] = None,
                 pidmode: Optional[bool] = None,
                 prevent_low_port_binding: Optional[bool] = None,
                 prevent_root_user: Optional[bool] = None,
                 privileged: Optional[bool] = None,
                 use_host_user: Optional[bool] = None,
                 usermode: Optional[bool] = None,
                 utsmode: Optional[bool] = None):
        """
        :param bool block_add_capabilities: Whether to block adding capabilities.
        :param bool enabled: Whether container privilege limitations are enabled.
        :param bool ipcmode: Whether to limit IPC-related capabilities.
        :param bool netmode: Whether to limit network-related capabilities.
        :param bool pidmode: Whether to limit process-related capabilities.
        :param bool prevent_low_port_binding: Whether to prevent low port binding.
        :param bool prevent_root_user: Whether to prevent the use of the root user.
        :param bool privileged: Whether the container is run in privileged mode.
        :param bool use_host_user: Whether to use the host user.
        :param bool usermode: Whether to limit user-related capabilities.
        :param bool utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[bool]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[bool]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @property
    @pulumi.getter
    def netmode(self) -> Optional[bool]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[bool]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[bool]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[bool]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[bool]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @property
    @pulumi.getter
    def usermode(self) -> Optional[bool]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[bool]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")


@pulumi.output_type
class FunctionRuntimePolicyLinuxCapabilities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeLinuxCapabilities":
            suggest = "remove_linux_capabilities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyLinuxCapabilities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyLinuxCapabilities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyLinuxCapabilities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 remove_linux_capabilities: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if remove_linux_capabilities is not None:
            pulumi.set(__self__, "remove_linux_capabilities", remove_linux_capabilities)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="removeLinuxCapabilities")
    def remove_linux_capabilities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "remove_linux_capabilities")


@pulumi.output_type
class FunctionRuntimePolicyMalwareScanOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeDirectories":
            suggest = "exclude_directories"
        elif key == "excludeProcesses":
            suggest = "exclude_processes"
        elif key == "includeDirectories":
            suggest = "include_directories"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyMalwareScanOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyMalwareScanOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyMalwareScanOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exclude_directories: Optional[Sequence[str]] = None,
                 exclude_processes: Optional[Sequence[str]] = None,
                 include_directories: Optional[Sequence[str]] = None):
        """
        :param str action: Set Action, Defaults to 'Alert' when empty
        :param bool enabled: Defines if enabled or not
        :param Sequence[str] exclude_directories: List of registry paths to be excluded from being protected.
        :param Sequence[str] exclude_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")


@pulumi.output_type
class FunctionRuntimePolicyPackageBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockPackagesProcesses":
            suggest = "block_packages_processes"
        elif key == "blockPackagesUsers":
            suggest = "block_packages_users"
        elif key == "exceptionalBlockPackagesFiles":
            suggest = "exceptional_block_packages_files"
        elif key == "exceptionalBlockPackagesProcesses":
            suggest = "exceptional_block_packages_processes"
        elif key == "exceptionalBlockPackagesUsers":
            suggest = "exceptional_block_packages_users"
        elif key == "packagesBlackLists":
            suggest = "packages_black_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyPackageBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyPackageBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyPackageBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_packages_processes: Optional[Sequence[str]] = None,
                 block_packages_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_packages_files: Optional[Sequence[str]] = None,
                 exceptional_block_packages_processes: Optional[Sequence[str]] = None,
                 exceptional_block_packages_users: Optional[Sequence[str]] = None,
                 packages_black_lists: Optional[Sequence[str]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_processes")

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages_black_lists")


@pulumi.output_type
class FunctionRuntimePolicyPortBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockInboundPorts":
            suggest = "block_inbound_ports"
        elif key == "blockOutboundPorts":
            suggest = "block_outbound_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyPortBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyPortBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyPortBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_inbound_ports: Optional[Sequence[str]] = None,
                 block_outbound_ports: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_inbound_ports")

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_outbound_ports")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class FunctionRuntimePolicyReadonlyFiles(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalReadonlyFiles":
            suggest = "exceptional_readonly_files"
        elif key == "exceptionalReadonlyFilesProcesses":
            suggest = "exceptional_readonly_files_processes"
        elif key == "exceptionalReadonlyFilesUsers":
            suggest = "exceptional_readonly_files_users"
        elif key == "readonlyFiles":
            suggest = "readonly_files"
        elif key == "readonlyFilesProcesses":
            suggest = "readonly_files_processes"
        elif key == "readonlyFilesUsers":
            suggest = "readonly_files_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyReadonlyFiles. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyReadonlyFiles.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyReadonlyFiles.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_files: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_users: Optional[Sequence[str]] = None,
                 readonly_files: Optional[Sequence[str]] = None,
                 readonly_files_processes: Optional[Sequence[str]] = None,
                 readonly_files_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files")

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_processes")

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_users")


@pulumi.output_type
class FunctionRuntimePolicyReadonlyRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalReadonlyRegistryPaths":
            suggest = "exceptional_readonly_registry_paths"
        elif key == "exceptionalReadonlyRegistryProcesses":
            suggest = "exceptional_readonly_registry_processes"
        elif key == "exceptionalReadonlyRegistryUsers":
            suggest = "exceptional_readonly_registry_users"
        elif key == "readonlyRegistryPaths":
            suggest = "readonly_registry_paths"
        elif key == "readonlyRegistryProcesses":
            suggest = "readonly_registry_processes"
        elif key == "readonlyRegistryUsers":
            suggest = "readonly_registry_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyReadonlyRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyReadonlyRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyReadonlyRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_registry_paths: Optional[Sequence[str]] = None,
                 exceptional_readonly_registry_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_registry_users: Optional[Sequence[str]] = None,
                 readonly_registry_paths: Optional[Sequence[str]] = None,
                 readonly_registry_processes: Optional[Sequence[str]] = None,
                 readonly_registry_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_registry_paths is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_paths", exceptional_readonly_registry_paths)
        if exceptional_readonly_registry_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_processes", exceptional_readonly_registry_processes)
        if exceptional_readonly_registry_users is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_users", exceptional_readonly_registry_users)
        if readonly_registry_paths is not None:
            pulumi.set(__self__, "readonly_registry_paths", readonly_registry_paths)
        if readonly_registry_processes is not None:
            pulumi.set(__self__, "readonly_registry_processes", readonly_registry_processes)
        if readonly_registry_users is not None:
            pulumi.set(__self__, "readonly_registry_users", readonly_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryPaths")
    def exceptional_readonly_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_paths")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryProcesses")
    def exceptional_readonly_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_processes")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryUsers")
    def exceptional_readonly_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_users")

    @property
    @pulumi.getter(name="readonlyRegistryPaths")
    def readonly_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_paths")

    @property
    @pulumi.getter(name="readonlyRegistryProcesses")
    def readonly_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_processes")

    @property
    @pulumi.getter(name="readonlyRegistryUsers")
    def readonly_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_users")


@pulumi.output_type
class FunctionRuntimePolicyRegistryAccessMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalMonitoredRegistryPaths":
            suggest = "exceptional_monitored_registry_paths"
        elif key == "exceptionalMonitoredRegistryProcesses":
            suggest = "exceptional_monitored_registry_processes"
        elif key == "exceptionalMonitoredRegistryUsers":
            suggest = "exceptional_monitored_registry_users"
        elif key == "monitoredRegistryAttributes":
            suggest = "monitored_registry_attributes"
        elif key == "monitoredRegistryCreate":
            suggest = "monitored_registry_create"
        elif key == "monitoredRegistryDelete":
            suggest = "monitored_registry_delete"
        elif key == "monitoredRegistryModify":
            suggest = "monitored_registry_modify"
        elif key == "monitoredRegistryPaths":
            suggest = "monitored_registry_paths"
        elif key == "monitoredRegistryProcesses":
            suggest = "monitored_registry_processes"
        elif key == "monitoredRegistryRead":
            suggest = "monitored_registry_read"
        elif key == "monitoredRegistryUsers":
            suggest = "monitored_registry_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyRegistryAccessMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyRegistryAccessMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyRegistryAccessMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_registry_paths: Optional[Sequence[str]] = None,
                 exceptional_monitored_registry_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_registry_users: Optional[Sequence[str]] = None,
                 monitored_registry_attributes: Optional[bool] = None,
                 monitored_registry_create: Optional[bool] = None,
                 monitored_registry_delete: Optional[bool] = None,
                 monitored_registry_modify: Optional[bool] = None,
                 monitored_registry_paths: Optional[Sequence[str]] = None,
                 monitored_registry_processes: Optional[Sequence[str]] = None,
                 monitored_registry_read: Optional[bool] = None,
                 monitored_registry_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_registry_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_paths", exceptional_monitored_registry_paths)
        if exceptional_monitored_registry_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_processes", exceptional_monitored_registry_processes)
        if exceptional_monitored_registry_users is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_users", exceptional_monitored_registry_users)
        if monitored_registry_attributes is not None:
            pulumi.set(__self__, "monitored_registry_attributes", monitored_registry_attributes)
        if monitored_registry_create is not None:
            pulumi.set(__self__, "monitored_registry_create", monitored_registry_create)
        if monitored_registry_delete is not None:
            pulumi.set(__self__, "monitored_registry_delete", monitored_registry_delete)
        if monitored_registry_modify is not None:
            pulumi.set(__self__, "monitored_registry_modify", monitored_registry_modify)
        if monitored_registry_paths is not None:
            pulumi.set(__self__, "monitored_registry_paths", monitored_registry_paths)
        if monitored_registry_processes is not None:
            pulumi.set(__self__, "monitored_registry_processes", monitored_registry_processes)
        if monitored_registry_read is not None:
            pulumi.set(__self__, "monitored_registry_read", monitored_registry_read)
        if monitored_registry_users is not None:
            pulumi.set(__self__, "monitored_registry_users", monitored_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryPaths")
    def exceptional_monitored_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_paths")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryProcesses")
    def exceptional_monitored_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryUsers")
    def exceptional_monitored_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_users")

    @property
    @pulumi.getter(name="monitoredRegistryAttributes")
    def monitored_registry_attributes(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_attributes")

    @property
    @pulumi.getter(name="monitoredRegistryCreate")
    def monitored_registry_create(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_create")

    @property
    @pulumi.getter(name="monitoredRegistryDelete")
    def monitored_registry_delete(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_delete")

    @property
    @pulumi.getter(name="monitoredRegistryModify")
    def monitored_registry_modify(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_modify")

    @property
    @pulumi.getter(name="monitoredRegistryPaths")
    def monitored_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_paths")

    @property
    @pulumi.getter(name="monitoredRegistryProcesses")
    def monitored_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_processes")

    @property
    @pulumi.getter(name="monitoredRegistryRead")
    def monitored_registry_read(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_read")

    @property
    @pulumi.getter(name="monitoredRegistryUsers")
    def monitored_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_users")


@pulumi.output_type
class FunctionRuntimePolicyRestrictedVolume(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 volumes: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether restricted volumes are enabled.
        :param Sequence[str] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[str]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class FunctionRuntimePolicyReverseShell(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockReverseShell":
            suggest = "block_reverse_shell"
        elif key == "reverseShellIpWhiteLists":
            suggest = "reverse_shell_ip_white_lists"
        elif key == "reverseShellProcWhiteLists":
            suggest = "reverse_shell_proc_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyReverseShell. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyReverseShell.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyReverseShell.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_reverse_shell: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None,
                 reverse_shell_proc_white_lists: Optional[Sequence[str]] = None):
        if block_reverse_shell is not None:
            pulumi.set(__self__, "block_reverse_shell", block_reverse_shell)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)
        if reverse_shell_proc_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_proc_white_lists", reverse_shell_proc_white_lists)

    @property
    @pulumi.getter(name="blockReverseShell")
    def block_reverse_shell(self) -> Optional[bool]:
        return pulumi.get(self, "block_reverse_shell")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @property
    @pulumi.getter(name="reverseShellProcWhiteLists")
    def reverse_shell_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_proc_white_lists")


@pulumi.output_type
class FunctionRuntimePolicyScope(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Sequence['outputs.FunctionRuntimePolicyScopeVariable']):
        """
        :param str expression: Scope expression.
        :param Sequence['FunctionRuntimePolicyScopeVariableArgs'] variables: List of variables in the scope.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.FunctionRuntimePolicyScopeVariable']:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class FunctionRuntimePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str,
                 name: Optional[str] = None):
        """
        :param str attribute: Class of supported scope.
        :param str value: Value assigned to the attribute.
        :param str name: Name assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FunctionRuntimePolicySystemIntegrityProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditSystemtimeChange":
            suggest = "audit_systemtime_change"
        elif key == "monitorAuditLogIntegrity":
            suggest = "monitor_audit_log_integrity"
        elif key == "windowsServicesMonitoring":
            suggest = "windows_services_monitoring"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicySystemIntegrityProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicySystemIntegrityProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicySystemIntegrityProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_systemtime_change: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 monitor_audit_log_integrity: Optional[bool] = None,
                 windows_services_monitoring: Optional[bool] = None):
        if audit_systemtime_change is not None:
            pulumi.set(__self__, "audit_systemtime_change", audit_systemtime_change)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monitor_audit_log_integrity is not None:
            pulumi.set(__self__, "monitor_audit_log_integrity", monitor_audit_log_integrity)
        if windows_services_monitoring is not None:
            pulumi.set(__self__, "windows_services_monitoring", windows_services_monitoring)

    @property
    @pulumi.getter(name="auditSystemtimeChange")
    def audit_systemtime_change(self) -> Optional[bool]:
        return pulumi.get(self, "audit_systemtime_change")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="monitorAuditLogIntegrity")
    def monitor_audit_log_integrity(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_audit_log_integrity")

    @property
    @pulumi.getter(name="windowsServicesMonitoring")
    def windows_services_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "windows_services_monitoring")


@pulumi.output_type
class FunctionRuntimePolicyTripwire(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyOns":
            suggest = "apply_ons"
        elif key == "serverlessApp":
            suggest = "serverless_app"
        elif key == "userId":
            suggest = "user_id"
        elif key == "userPassword":
            suggest = "user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyTripwire. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyTripwire.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyTripwire.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_ons: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 serverless_app: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_password: Optional[str] = None):
        if apply_ons is not None:
            pulumi.set(__self__, "apply_ons", apply_ons)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if serverless_app is not None:
            pulumi.set(__self__, "serverless_app", serverless_app)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="applyOns")
    def apply_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "apply_ons")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="serverlessApp")
    def serverless_app(self) -> Optional[str]:
        return pulumi.get(self, "serverless_app")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[str]:
        return pulumi.get(self, "user_password")


@pulumi.output_type
class FunctionRuntimePolicyWhitelistedOsUsers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupWhiteLists":
            suggest = "group_white_lists"
        elif key == "userWhiteLists":
            suggest = "user_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuntimePolicyWhitelistedOsUsers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuntimePolicyWhitelistedOsUsers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuntimePolicyWhitelistedOsUsers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group_white_lists: Optional[Sequence[str]] = None,
                 user_white_lists: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_white_lists is not None:
            pulumi.set(__self__, "group_white_lists", group_white_lists)
        if user_white_lists is not None:
            pulumi.set(__self__, "user_white_lists", user_white_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupWhiteLists")
    def group_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_white_lists")

    @property
    @pulumi.getter(name="userWhiteLists")
    def user_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_white_lists")


@pulumi.output_type
class HostAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class HostAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        """
        :param str author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class HostAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HostAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class HostAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class HostAssurancePolicyPolicySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAuditChecked":
            suggest = "is_audit_checked"
        elif key == "warningMessage":
            suggest = "warning_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyPolicySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyPolicySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyPolicySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enforce: Optional[bool] = None,
                 is_audit_checked: Optional[bool] = None,
                 warn: Optional[bool] = None,
                 warning_message: Optional[str] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[bool]:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[bool]:
        return pulumi.get(self, "is_audit_checked")

    @property
    @pulumi.getter
    def warn(self) -> Optional[bool]:
        return pulumi.get(self, "warn")

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[str]:
        return pulumi.get(self, "warning_message")


@pulumi.output_type
class HostAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HostAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.HostAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.HostAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class HostAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HostAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class HostRuntimePolicyAllowedExecutable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowExecutables":
            suggest = "allow_executables"
        elif key == "allowRootExecutables":
            suggest = "allow_root_executables"
        elif key == "separateExecutables":
            suggest = "separate_executables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyAllowedExecutable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyAllowedExecutable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyAllowedExecutable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_executables: Optional[Sequence[str]] = None,
                 allow_root_executables: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 separate_executables: Optional[bool] = None):
        """
        :param Sequence[str] allow_executables: List of allowed executables.
        :param Sequence[str] allow_root_executables: List of allowed root executables.
        :param bool enabled: Whether allowed executables configuration is enabled.
        :param bool separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[bool]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")


@pulumi.output_type
class HostRuntimePolicyAllowedRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedRegistries":
            suggest = "allowed_registries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyAllowedRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyAllowedRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyAllowedRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_registries: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[str] allowed_registries: List of allowed registries.
        :param bool enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[Sequence[str]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class HostRuntimePolicyAuditing(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditAllNetwork":
            suggest = "audit_all_network"
        elif key == "auditAllProcesses":
            suggest = "audit_all_processes"
        elif key == "auditFailedLogin":
            suggest = "audit_failed_login"
        elif key == "auditOsUserActivity":
            suggest = "audit_os_user_activity"
        elif key == "auditProcessCmdline":
            suggest = "audit_process_cmdline"
        elif key == "auditSuccessLogin":
            suggest = "audit_success_login"
        elif key == "auditUserAccountManagement":
            suggest = "audit_user_account_management"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyAuditing. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyAuditing.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyAuditing.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_all_network: Optional[bool] = None,
                 audit_all_processes: Optional[bool] = None,
                 audit_failed_login: Optional[bool] = None,
                 audit_os_user_activity: Optional[bool] = None,
                 audit_process_cmdline: Optional[bool] = None,
                 audit_success_login: Optional[bool] = None,
                 audit_user_account_management: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_network")

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_processes")

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_failed_login")

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[bool]:
        return pulumi.get(self, "audit_os_user_activity")

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[bool]:
        return pulumi.get(self, "audit_process_cmdline")

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_success_login")

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[bool]:
        return pulumi.get(self, "audit_user_account_management")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class HostRuntimePolicyBlacklistedOsUsers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupBlackLists":
            suggest = "group_black_lists"
        elif key == "userBlackLists":
            suggest = "user_black_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyBlacklistedOsUsers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyBlacklistedOsUsers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyBlacklistedOsUsers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group_black_lists: Optional[Sequence[str]] = None,
                 user_black_lists: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_black_lists is not None:
            pulumi.set(__self__, "group_black_lists", group_black_lists)
        if user_black_lists is not None:
            pulumi.set(__self__, "user_black_lists", user_black_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupBlackLists")
    def group_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_black_lists")

    @property
    @pulumi.getter(name="userBlackLists")
    def user_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_black_lists")


@pulumi.output_type
class HostRuntimePolicyBypassScope(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 scopes: Optional[Sequence['outputs.HostRuntimePolicyBypassScopeScope']] = None):
        """
        :param bool enabled: Whether bypassing the scope is enabled.
        :param Sequence['HostRuntimePolicyBypassScopeScopeArgs'] scopes: Scope configuration.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether bypassing the scope is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.HostRuntimePolicyBypassScopeScope']]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class HostRuntimePolicyBypassScopeScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.HostRuntimePolicyBypassScopeScopeVariable']] = None):
        """
        :param str expression: Scope expression.
        :param Sequence['HostRuntimePolicyBypassScopeScopeVariableArgs'] variables: List of variables in the scope.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.HostRuntimePolicyBypassScopeScopeVariable']]:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class HostRuntimePolicyBypassScopeScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str attribute: Variable attribute.
        :param str value: Variable value.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        """
        Variable attribute.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HostRuntimePolicyContainerExec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockContainerExec":
            suggest = "block_container_exec"
        elif key == "containerExecProcWhiteLists":
            suggest = "container_exec_proc_white_lists"
        elif key == "reverseShellIpWhiteLists":
            suggest = "reverse_shell_ip_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyContainerExec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyContainerExec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyContainerExec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_container_exec: Optional[bool] = None,
                 container_exec_proc_white_lists: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[bool]:
        return pulumi.get(self, "block_container_exec")

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")


@pulumi.output_type
class HostRuntimePolicyDriftPrevention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "execLockdown":
            suggest = "exec_lockdown"
        elif key == "execLockdownWhiteLists":
            suggest = "exec_lockdown_white_lists"
        elif key == "imageLockdown":
            suggest = "image_lockdown"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyDriftPrevention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyDriftPrevention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyDriftPrevention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exec_lockdown: Optional[bool] = None,
                 exec_lockdown_white_lists: Optional[Sequence[str]] = None,
                 image_lockdown: Optional[bool] = None):
        """
        :param bool enabled: Whether drift prevention is enabled.
        :param bool exec_lockdown: Whether to lockdown execution drift.
        :param Sequence[str] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param bool image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[Sequence[str]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")


@pulumi.output_type
class HostRuntimePolicyExecutableBlacklist(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 executables: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether the executable blacklist is enabled.
        :param Sequence[str] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def executables(self) -> Optional[Sequence[str]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")


@pulumi.output_type
class HostRuntimePolicyFailedKubernetesChecks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedChecks":
            suggest = "failed_checks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyFailedKubernetesChecks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyFailedKubernetesChecks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyFailedKubernetesChecks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 failed_checks: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failed_checks is not None:
            pulumi.set(__self__, "failed_checks", failed_checks)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failedChecks")
    def failed_checks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failed_checks")


@pulumi.output_type
class HostRuntimePolicyFileBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockFilesProcesses":
            suggest = "block_files_processes"
        elif key == "blockFilesUsers":
            suggest = "block_files_users"
        elif key == "exceptionalBlockFiles":
            suggest = "exceptional_block_files"
        elif key == "exceptionalBlockFilesProcesses":
            suggest = "exceptional_block_files_processes"
        elif key == "exceptionalBlockFilesUsers":
            suggest = "exceptional_block_files_users"
        elif key == "filenameBlockLists":
            suggest = "filename_block_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyFileBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyFileBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyFileBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_files_processes: Optional[Sequence[str]] = None,
                 block_files_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_files: Optional[Sequence[str]] = None,
                 exceptional_block_files_processes: Optional[Sequence[str]] = None,
                 exceptional_block_files_users: Optional[Sequence[str]] = None,
                 filename_block_lists: Optional[Sequence[str]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_processes")

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files")

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filename_block_lists")


@pulumi.output_type
class HostRuntimePolicyFileIntegrityMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalMonitoredFiles":
            suggest = "exceptional_monitored_files"
        elif key == "exceptionalMonitoredFilesProcesses":
            suggest = "exceptional_monitored_files_processes"
        elif key == "exceptionalMonitoredFilesUsers":
            suggest = "exceptional_monitored_files_users"
        elif key == "monitoredFiles":
            suggest = "monitored_files"
        elif key == "monitoredFilesAttributes":
            suggest = "monitored_files_attributes"
        elif key == "monitoredFilesCreate":
            suggest = "monitored_files_create"
        elif key == "monitoredFilesDelete":
            suggest = "monitored_files_delete"
        elif key == "monitoredFilesModify":
            suggest = "monitored_files_modify"
        elif key == "monitoredFilesProcesses":
            suggest = "monitored_files_processes"
        elif key == "monitoredFilesRead":
            suggest = "monitored_files_read"
        elif key == "monitoredFilesUsers":
            suggest = "monitored_files_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyFileIntegrityMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_files: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_users: Optional[Sequence[str]] = None,
                 monitored_files: Optional[Sequence[str]] = None,
                 monitored_files_attributes: Optional[bool] = None,
                 monitored_files_create: Optional[bool] = None,
                 monitored_files_delete: Optional[bool] = None,
                 monitored_files_modify: Optional[bool] = None,
                 monitored_files_processes: Optional[Sequence[str]] = None,
                 monitored_files_read: Optional[bool] = None,
                 monitored_files_users: Optional[Sequence[str]] = None):
        """
        :param bool enabled: If true, file integrity monitoring is enabled.
        :param Sequence[str] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param Sequence[str] monitored_files: List of paths to be monitored.
        :param bool monitored_files_attributes: Whether to monitor file attribute operations.
        :param bool monitored_files_create: Whether to monitor file create operations.
        :param bool monitored_files_delete: Whether to monitor file delete operations.
        :param bool monitored_files_modify: Whether to monitor file modify operations.
        :param Sequence[str] monitored_files_processes: List of processes associated with monitored files.
        :param bool monitored_files_read: Whether to monitor file read operations.
        :param Sequence[str] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[bool]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[bool]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[bool]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[bool]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[bool]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")


@pulumi.output_type
class HostRuntimePolicyLimitContainerPrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAddCapabilities":
            suggest = "block_add_capabilities"
        elif key == "preventLowPortBinding":
            suggest = "prevent_low_port_binding"
        elif key == "preventRootUser":
            suggest = "prevent_root_user"
        elif key == "useHostUser":
            suggest = "use_host_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyLimitContainerPrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyLimitContainerPrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyLimitContainerPrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_add_capabilities: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ipcmode: Optional[bool] = None,
                 netmode: Optional[bool] = None,
                 pidmode: Optional[bool] = None,
                 prevent_low_port_binding: Optional[bool] = None,
                 prevent_root_user: Optional[bool] = None,
                 privileged: Optional[bool] = None,
                 use_host_user: Optional[bool] = None,
                 usermode: Optional[bool] = None,
                 utsmode: Optional[bool] = None):
        """
        :param bool block_add_capabilities: Whether to block adding capabilities.
        :param bool enabled: Whether container privilege limitations are enabled.
        :param bool ipcmode: Whether to limit IPC-related capabilities.
        :param bool netmode: Whether to limit network-related capabilities.
        :param bool pidmode: Whether to limit process-related capabilities.
        :param bool prevent_low_port_binding: Whether to prevent low port binding.
        :param bool prevent_root_user: Whether to prevent the use of the root user.
        :param bool privileged: Whether the container is run in privileged mode.
        :param bool use_host_user: Whether to use the host user.
        :param bool usermode: Whether to limit user-related capabilities.
        :param bool utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[bool]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[bool]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @property
    @pulumi.getter
    def netmode(self) -> Optional[bool]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[bool]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[bool]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[bool]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[bool]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @property
    @pulumi.getter
    def usermode(self) -> Optional[bool]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[bool]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")


@pulumi.output_type
class HostRuntimePolicyLinuxCapabilities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeLinuxCapabilities":
            suggest = "remove_linux_capabilities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyLinuxCapabilities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyLinuxCapabilities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyLinuxCapabilities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 remove_linux_capabilities: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if remove_linux_capabilities is not None:
            pulumi.set(__self__, "remove_linux_capabilities", remove_linux_capabilities)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="removeLinuxCapabilities")
    def remove_linux_capabilities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "remove_linux_capabilities")


@pulumi.output_type
class HostRuntimePolicyMalwareScanOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeDirectories":
            suggest = "exclude_directories"
        elif key == "excludeProcesses":
            suggest = "exclude_processes"
        elif key == "includeDirectories":
            suggest = "include_directories"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyMalwareScanOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyMalwareScanOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyMalwareScanOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exclude_directories: Optional[Sequence[str]] = None,
                 exclude_processes: Optional[Sequence[str]] = None,
                 include_directories: Optional[Sequence[str]] = None):
        """
        :param str action: Set Action, Defaults to 'Alert' when empty
        :param bool enabled: Defines if enabled or not
        :param Sequence[str] exclude_directories: List of registry paths to be excluded from being protected.
        :param Sequence[str] exclude_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")


@pulumi.output_type
class HostRuntimePolicyPackageBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockPackagesProcesses":
            suggest = "block_packages_processes"
        elif key == "blockPackagesUsers":
            suggest = "block_packages_users"
        elif key == "exceptionalBlockPackagesFiles":
            suggest = "exceptional_block_packages_files"
        elif key == "exceptionalBlockPackagesProcesses":
            suggest = "exceptional_block_packages_processes"
        elif key == "exceptionalBlockPackagesUsers":
            suggest = "exceptional_block_packages_users"
        elif key == "packagesBlackLists":
            suggest = "packages_black_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyPackageBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyPackageBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyPackageBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_packages_processes: Optional[Sequence[str]] = None,
                 block_packages_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_packages_files: Optional[Sequence[str]] = None,
                 exceptional_block_packages_processes: Optional[Sequence[str]] = None,
                 exceptional_block_packages_users: Optional[Sequence[str]] = None,
                 packages_black_lists: Optional[Sequence[str]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_processes")

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages_black_lists")


@pulumi.output_type
class HostRuntimePolicyPortBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockInboundPorts":
            suggest = "block_inbound_ports"
        elif key == "blockOutboundPorts":
            suggest = "block_outbound_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyPortBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyPortBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyPortBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_inbound_ports: Optional[Sequence[str]] = None,
                 block_outbound_ports: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_inbound_ports")

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_outbound_ports")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class HostRuntimePolicyReadonlyFiles(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalReadonlyFiles":
            suggest = "exceptional_readonly_files"
        elif key == "exceptionalReadonlyFilesProcesses":
            suggest = "exceptional_readonly_files_processes"
        elif key == "exceptionalReadonlyFilesUsers":
            suggest = "exceptional_readonly_files_users"
        elif key == "readonlyFiles":
            suggest = "readonly_files"
        elif key == "readonlyFilesProcesses":
            suggest = "readonly_files_processes"
        elif key == "readonlyFilesUsers":
            suggest = "readonly_files_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyReadonlyFiles. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyReadonlyFiles.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyReadonlyFiles.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_files: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_users: Optional[Sequence[str]] = None,
                 readonly_files: Optional[Sequence[str]] = None,
                 readonly_files_processes: Optional[Sequence[str]] = None,
                 readonly_files_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files")

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_processes")

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_users")


@pulumi.output_type
class HostRuntimePolicyReadonlyRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalReadonlyRegistryPaths":
            suggest = "exceptional_readonly_registry_paths"
        elif key == "exceptionalReadonlyRegistryProcesses":
            suggest = "exceptional_readonly_registry_processes"
        elif key == "exceptionalReadonlyRegistryUsers":
            suggest = "exceptional_readonly_registry_users"
        elif key == "readonlyRegistryPaths":
            suggest = "readonly_registry_paths"
        elif key == "readonlyRegistryProcesses":
            suggest = "readonly_registry_processes"
        elif key == "readonlyRegistryUsers":
            suggest = "readonly_registry_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyReadonlyRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyReadonlyRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyReadonlyRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_registry_paths: Optional[Sequence[str]] = None,
                 exceptional_readonly_registry_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_registry_users: Optional[Sequence[str]] = None,
                 readonly_registry_paths: Optional[Sequence[str]] = None,
                 readonly_registry_processes: Optional[Sequence[str]] = None,
                 readonly_registry_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_registry_paths is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_paths", exceptional_readonly_registry_paths)
        if exceptional_readonly_registry_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_processes", exceptional_readonly_registry_processes)
        if exceptional_readonly_registry_users is not None:
            pulumi.set(__self__, "exceptional_readonly_registry_users", exceptional_readonly_registry_users)
        if readonly_registry_paths is not None:
            pulumi.set(__self__, "readonly_registry_paths", readonly_registry_paths)
        if readonly_registry_processes is not None:
            pulumi.set(__self__, "readonly_registry_processes", readonly_registry_processes)
        if readonly_registry_users is not None:
            pulumi.set(__self__, "readonly_registry_users", readonly_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryPaths")
    def exceptional_readonly_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_paths")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryProcesses")
    def exceptional_readonly_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_processes")

    @property
    @pulumi.getter(name="exceptionalReadonlyRegistryUsers")
    def exceptional_readonly_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_registry_users")

    @property
    @pulumi.getter(name="readonlyRegistryPaths")
    def readonly_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_paths")

    @property
    @pulumi.getter(name="readonlyRegistryProcesses")
    def readonly_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_processes")

    @property
    @pulumi.getter(name="readonlyRegistryUsers")
    def readonly_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_registry_users")


@pulumi.output_type
class HostRuntimePolicyRegistryAccessMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptionalMonitoredRegistryPaths":
            suggest = "exceptional_monitored_registry_paths"
        elif key == "exceptionalMonitoredRegistryProcesses":
            suggest = "exceptional_monitored_registry_processes"
        elif key == "exceptionalMonitoredRegistryUsers":
            suggest = "exceptional_monitored_registry_users"
        elif key == "monitoredRegistryAttributes":
            suggest = "monitored_registry_attributes"
        elif key == "monitoredRegistryCreate":
            suggest = "monitored_registry_create"
        elif key == "monitoredRegistryDelete":
            suggest = "monitored_registry_delete"
        elif key == "monitoredRegistryModify":
            suggest = "monitored_registry_modify"
        elif key == "monitoredRegistryPaths":
            suggest = "monitored_registry_paths"
        elif key == "monitoredRegistryProcesses":
            suggest = "monitored_registry_processes"
        elif key == "monitoredRegistryRead":
            suggest = "monitored_registry_read"
        elif key == "monitoredRegistryUsers":
            suggest = "monitored_registry_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyRegistryAccessMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyRegistryAccessMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyRegistryAccessMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_registry_paths: Optional[Sequence[str]] = None,
                 exceptional_monitored_registry_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_registry_users: Optional[Sequence[str]] = None,
                 monitored_registry_attributes: Optional[bool] = None,
                 monitored_registry_create: Optional[bool] = None,
                 monitored_registry_delete: Optional[bool] = None,
                 monitored_registry_modify: Optional[bool] = None,
                 monitored_registry_paths: Optional[Sequence[str]] = None,
                 monitored_registry_processes: Optional[Sequence[str]] = None,
                 monitored_registry_read: Optional[bool] = None,
                 monitored_registry_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_registry_paths is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_paths", exceptional_monitored_registry_paths)
        if exceptional_monitored_registry_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_processes", exceptional_monitored_registry_processes)
        if exceptional_monitored_registry_users is not None:
            pulumi.set(__self__, "exceptional_monitored_registry_users", exceptional_monitored_registry_users)
        if monitored_registry_attributes is not None:
            pulumi.set(__self__, "monitored_registry_attributes", monitored_registry_attributes)
        if monitored_registry_create is not None:
            pulumi.set(__self__, "monitored_registry_create", monitored_registry_create)
        if monitored_registry_delete is not None:
            pulumi.set(__self__, "monitored_registry_delete", monitored_registry_delete)
        if monitored_registry_modify is not None:
            pulumi.set(__self__, "monitored_registry_modify", monitored_registry_modify)
        if monitored_registry_paths is not None:
            pulumi.set(__self__, "monitored_registry_paths", monitored_registry_paths)
        if monitored_registry_processes is not None:
            pulumi.set(__self__, "monitored_registry_processes", monitored_registry_processes)
        if monitored_registry_read is not None:
            pulumi.set(__self__, "monitored_registry_read", monitored_registry_read)
        if monitored_registry_users is not None:
            pulumi.set(__self__, "monitored_registry_users", monitored_registry_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryPaths")
    def exceptional_monitored_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_paths")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryProcesses")
    def exceptional_monitored_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredRegistryUsers")
    def exceptional_monitored_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_monitored_registry_users")

    @property
    @pulumi.getter(name="monitoredRegistryAttributes")
    def monitored_registry_attributes(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_attributes")

    @property
    @pulumi.getter(name="monitoredRegistryCreate")
    def monitored_registry_create(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_create")

    @property
    @pulumi.getter(name="monitoredRegistryDelete")
    def monitored_registry_delete(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_delete")

    @property
    @pulumi.getter(name="monitoredRegistryModify")
    def monitored_registry_modify(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_modify")

    @property
    @pulumi.getter(name="monitoredRegistryPaths")
    def monitored_registry_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_paths")

    @property
    @pulumi.getter(name="monitoredRegistryProcesses")
    def monitored_registry_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_processes")

    @property
    @pulumi.getter(name="monitoredRegistryRead")
    def monitored_registry_read(self) -> Optional[bool]:
        return pulumi.get(self, "monitored_registry_read")

    @property
    @pulumi.getter(name="monitoredRegistryUsers")
    def monitored_registry_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitored_registry_users")


@pulumi.output_type
class HostRuntimePolicyRestrictedVolume(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 volumes: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether restricted volumes are enabled.
        :param Sequence[str] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[str]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class HostRuntimePolicyReverseShell(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockReverseShell":
            suggest = "block_reverse_shell"
        elif key == "reverseShellIpWhiteLists":
            suggest = "reverse_shell_ip_white_lists"
        elif key == "reverseShellProcWhiteLists":
            suggest = "reverse_shell_proc_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyReverseShell. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyReverseShell.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyReverseShell.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_reverse_shell: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None,
                 reverse_shell_proc_white_lists: Optional[Sequence[str]] = None):
        if block_reverse_shell is not None:
            pulumi.set(__self__, "block_reverse_shell", block_reverse_shell)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)
        if reverse_shell_proc_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_proc_white_lists", reverse_shell_proc_white_lists)

    @property
    @pulumi.getter(name="blockReverseShell")
    def block_reverse_shell(self) -> Optional[bool]:
        return pulumi.get(self, "block_reverse_shell")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")

    @property
    @pulumi.getter(name="reverseShellProcWhiteLists")
    def reverse_shell_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_proc_white_lists")


@pulumi.output_type
class HostRuntimePolicyScope(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Sequence['outputs.HostRuntimePolicyScopeVariable']):
        """
        :param str expression: Scope expression.
        :param Sequence['HostRuntimePolicyScopeVariableArgs'] variables: List of variables in the scope.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Scope expression.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.HostRuntimePolicyScopeVariable']:
        """
        List of variables in the scope.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class HostRuntimePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str,
                 name: Optional[str] = None):
        """
        :param str attribute: Class of supported scope.
        :param str value: Value assigned to the attribute.
        :param str name: Name assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class HostRuntimePolicySystemIntegrityProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditSystemtimeChange":
            suggest = "audit_systemtime_change"
        elif key == "monitorAuditLogIntegrity":
            suggest = "monitor_audit_log_integrity"
        elif key == "windowsServicesMonitoring":
            suggest = "windows_services_monitoring"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicySystemIntegrityProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicySystemIntegrityProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicySystemIntegrityProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_systemtime_change: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 monitor_audit_log_integrity: Optional[bool] = None,
                 windows_services_monitoring: Optional[bool] = None):
        if audit_systemtime_change is not None:
            pulumi.set(__self__, "audit_systemtime_change", audit_systemtime_change)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monitor_audit_log_integrity is not None:
            pulumi.set(__self__, "monitor_audit_log_integrity", monitor_audit_log_integrity)
        if windows_services_monitoring is not None:
            pulumi.set(__self__, "windows_services_monitoring", windows_services_monitoring)

    @property
    @pulumi.getter(name="auditSystemtimeChange")
    def audit_systemtime_change(self) -> Optional[bool]:
        return pulumi.get(self, "audit_systemtime_change")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="monitorAuditLogIntegrity")
    def monitor_audit_log_integrity(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_audit_log_integrity")

    @property
    @pulumi.getter(name="windowsServicesMonitoring")
    def windows_services_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "windows_services_monitoring")


@pulumi.output_type
class HostRuntimePolicyTripwire(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyOns":
            suggest = "apply_ons"
        elif key == "serverlessApp":
            suggest = "serverless_app"
        elif key == "userId":
            suggest = "user_id"
        elif key == "userPassword":
            suggest = "user_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyTripwire. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyTripwire.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyTripwire.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_ons: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 serverless_app: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_password: Optional[str] = None):
        if apply_ons is not None:
            pulumi.set(__self__, "apply_ons", apply_ons)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if serverless_app is not None:
            pulumi.set(__self__, "serverless_app", serverless_app)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_password is not None:
            pulumi.set(__self__, "user_password", user_password)

    @property
    @pulumi.getter(name="applyOns")
    def apply_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "apply_ons")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="serverlessApp")
    def serverless_app(self) -> Optional[str]:
        return pulumi.get(self, "serverless_app")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userPassword")
    def user_password(self) -> Optional[str]:
        return pulumi.get(self, "user_password")


@pulumi.output_type
class HostRuntimePolicyWhitelistedOsUsers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupWhiteLists":
            suggest = "group_white_lists"
        elif key == "userWhiteLists":
            suggest = "user_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostRuntimePolicyWhitelistedOsUsers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostRuntimePolicyWhitelistedOsUsers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostRuntimePolicyWhitelistedOsUsers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group_white_lists: Optional[Sequence[str]] = None,
                 user_white_lists: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_white_lists is not None:
            pulumi.set(__self__, "group_white_lists", group_white_lists)
        if user_white_lists is not None:
            pulumi.set(__self__, "user_white_lists", user_white_lists)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupWhiteLists")
    def group_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_white_lists")

    @property
    @pulumi.getter(name="userWhiteLists")
    def user_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_white_lists")


@pulumi.output_type
class ImageAssuranceChecksPerformed(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assuranceType":
            suggest = "assurance_type"
        elif key == "dtaSkipped":
            suggest = "dta_skipped"
        elif key == "dtaSkippedReason":
            suggest = "dta_skipped_reason"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssuranceChecksPerformed. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssuranceChecksPerformed.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssuranceChecksPerformed.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assurance_type: Optional[str] = None,
                 blocking: Optional[bool] = None,
                 control: Optional[str] = None,
                 dta_skipped: Optional[bool] = None,
                 dta_skipped_reason: Optional[str] = None,
                 failed: Optional[bool] = None,
                 policy_name: Optional[str] = None):
        """
        :param str assurance_type: The type of the Assurance Policy the check originated from.
        :param bool blocking: Whether the check is blocking (i.e. a failure should trigger a disallow).
        :param str control: The name of the image assurance control.
        :param bool dta_skipped: If DTA was skipped.
        :param str dta_skipped_reason: The reason why DTA was skipped.
        :param bool failed: Whether the image failed the check.
        :param str policy_name: The name of the Image Assurance Policy the check originated from.
        """
        if assurance_type is not None:
            pulumi.set(__self__, "assurance_type", assurance_type)
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if dta_skipped is not None:
            pulumi.set(__self__, "dta_skipped", dta_skipped)
        if dta_skipped_reason is not None:
            pulumi.set(__self__, "dta_skipped_reason", dta_skipped_reason)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> Optional[str]:
        """
        The type of the Assurance Policy the check originated from.
        """
        return pulumi.get(self, "assurance_type")

    @property
    @pulumi.getter
    def blocking(self) -> Optional[bool]:
        """
        Whether the check is blocking (i.e. a failure should trigger a disallow).
        """
        return pulumi.get(self, "blocking")

    @property
    @pulumi.getter
    def control(self) -> Optional[str]:
        """
        The name of the image assurance control.
        """
        return pulumi.get(self, "control")

    @property
    @pulumi.getter(name="dtaSkipped")
    def dta_skipped(self) -> Optional[bool]:
        """
        If DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped")

    @property
    @pulumi.getter(name="dtaSkippedReason")
    def dta_skipped_reason(self) -> Optional[str]:
        """
        The reason why DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped_reason")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        """
        Whether the image failed the check.
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        """
        The name of the Image Assurance Policy the check originated from.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class ImageAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class ImageAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        """
        :param str author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class ImageAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageAssurancePolicyKubernetesControls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avdId":
            suggest = "avd_id"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyKubernetesControls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyKubernetesControls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyKubernetesControls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avd_id: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 ootb: Optional[bool] = None,
                 script_id: Optional[int] = None,
                 severity: Optional[str] = None):
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[str]:
        return pulumi.get(self, "avd_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ootb(self) -> Optional[bool]:
        return pulumi.get(self, "ootb")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[int]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class ImageAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class ImageAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class ImageAssurancePolicyPolicySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAuditChecked":
            suggest = "is_audit_checked"
        elif key == "warningMessage":
            suggest = "warning_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyPolicySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyPolicySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyPolicySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enforce: Optional[bool] = None,
                 is_audit_checked: Optional[bool] = None,
                 warn: Optional[bool] = None,
                 warning_message: Optional[str] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[bool]:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[bool]:
        return pulumi.get(self, "is_audit_checked")

    @property
    @pulumi.getter
    def warn(self) -> Optional[bool]:
        return pulumi.get(self, "warn")

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[str]:
        return pulumi.get(self, "warning_message")


@pulumi.output_type
class ImageAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ImageAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ImageAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ImageAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class ImageHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created: Optional[str] = None,
                 created_by: Optional[str] = None,
                 id: Optional[str] = None,
                 size: Optional[int] = None):
        """
        :param str comment: The commit comment for the image, if any.
        :param str created: The date of creation of the layer.
        :param str created_by: The command that generated the layer.
        :param str id: The image ID of the layer (if any).
        :param int size: The size of the image.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        The commit comment for the image, if any.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The date of creation of the layer.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The command that generated the layer.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The image ID of the layer (if any).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The size of the image.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class ImageVulnerability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ackAuthor":
            suggest = "ack_author"
        elif key == "ackComment":
            suggest = "ack_comment"
        elif key == "ackExpirationConfiguredAt":
            suggest = "ack_expiration_configured_at"
        elif key == "ackExpirationConfiguredBy":
            suggest = "ack_expiration_configured_by"
        elif key == "ackExpirationDays":
            suggest = "ack_expiration_days"
        elif key == "ackScope":
            suggest = "ack_scope"
        elif key == "acknowledgeDate":
            suggest = "acknowledge_date"
        elif key == "ancestorPkg":
            suggest = "ancestor_pkg"
        elif key == "aquaScore":
            suggest = "aqua_score"
        elif key == "aquaScoreClassification":
            suggest = "aqua_score_classification"
        elif key == "aquaScoringSystem":
            suggest = "aqua_scoring_system"
        elif key == "aquaSeverity":
            suggest = "aqua_severity"
        elif key == "aquaSeverityClassification":
            suggest = "aqua_severity_classification"
        elif key == "aquaVectors":
            suggest = "aqua_vectors"
        elif key == "auditEventsCount":
            suggest = "audit_events_count"
        elif key == "blockEventsCount":
            suggest = "block_events_count"
        elif key == "exploitReference":
            suggest = "exploit_reference"
        elif key == "exploitType":
            suggest = "exploit_type"
        elif key == "firstFoundDate":
            suggest = "first_found_date"
        elif key == "fixVersion":
            suggest = "fix_version"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "lastFoundDate":
            suggest = "last_found_date"
        elif key == "modificationDate":
            suggest = "modification_date"
        elif key == "nvdCvss2Score":
            suggest = "nvd_cvss2_score"
        elif key == "nvdCvss2Vectors":
            suggest = "nvd_cvss2_vectors"
        elif key == "nvdCvss3Score":
            suggest = "nvd_cvss3_score"
        elif key == "nvdCvss3Severity":
            suggest = "nvd_cvss3_severity"
        elif key == "nvdCvss3Vectors":
            suggest = "nvd_cvss3_vectors"
        elif key == "nvdSeverity":
            suggest = "nvd_severity"
        elif key == "nvdUrl":
            suggest = "nvd_url"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "publishDate":
            suggest = "publish_date"
        elif key == "resourceArchitecture":
            suggest = "resource_architecture"
        elif key == "resourceCpe":
            suggest = "resource_cpe"
        elif key == "resourceFormat":
            suggest = "resource_format"
        elif key == "resourceHash":
            suggest = "resource_hash"
        elif key == "resourceLicenses":
            suggest = "resource_licenses"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourcePath":
            suggest = "resource_path"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "resourceVersion":
            suggest = "resource_version"
        elif key == "severityClassification":
            suggest = "severity_classification"
        elif key == "temporalVector":
            suggest = "temporal_vector"
        elif key == "vPatchAppliedBy":
            suggest = "v_patch_applied_by"
        elif key == "vPatchAppliedOn":
            suggest = "v_patch_applied_on"
        elif key == "vPatchEnforcedBy":
            suggest = "v_patch_enforced_by"
        elif key == "vPatchEnforcedOn":
            suggest = "v_patch_enforced_on"
        elif key == "vPatchPolicyEnforce":
            suggest = "v_patch_policy_enforce"
        elif key == "vPatchPolicyName":
            suggest = "v_patch_policy_name"
        elif key == "vPatchRevertedBy":
            suggest = "v_patch_reverted_by"
        elif key == "vPatchRevertedOn":
            suggest = "v_patch_reverted_on"
        elif key == "vPatchStatus":
            suggest = "v_patch_status"
        elif key == "vendorCvss2Score":
            suggest = "vendor_cvss2_score"
        elif key == "vendorCvss2Vectors":
            suggest = "vendor_cvss2_vectors"
        elif key == "vendorSeverity":
            suggest = "vendor_severity"
        elif key == "vendorStatement":
            suggest = "vendor_statement"
        elif key == "vendorUrl":
            suggest = "vendor_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageVulnerability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageVulnerability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageVulnerability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ack_author: Optional[str] = None,
                 ack_comment: Optional[str] = None,
                 ack_expiration_configured_at: Optional[str] = None,
                 ack_expiration_configured_by: Optional[str] = None,
                 ack_expiration_days: Optional[int] = None,
                 ack_scope: Optional[str] = None,
                 acknowledge_date: Optional[str] = None,
                 ancestor_pkg: Optional[str] = None,
                 aqua_score: Optional[float] = None,
                 aqua_score_classification: Optional[str] = None,
                 aqua_scoring_system: Optional[str] = None,
                 aqua_severity: Optional[str] = None,
                 aqua_severity_classification: Optional[str] = None,
                 aqua_vectors: Optional[str] = None,
                 audit_events_count: Optional[int] = None,
                 block_events_count: Optional[int] = None,
                 classification: Optional[str] = None,
                 description: Optional[str] = None,
                 digest: Optional[str] = None,
                 exploit_reference: Optional[str] = None,
                 exploit_type: Optional[str] = None,
                 first_found_date: Optional[str] = None,
                 fix_version: Optional[str] = None,
                 image_name: Optional[str] = None,
                 last_found_date: Optional[str] = None,
                 modification_date: Optional[str] = None,
                 name: Optional[str] = None,
                 nvd_cvss2_score: Optional[float] = None,
                 nvd_cvss2_vectors: Optional[str] = None,
                 nvd_cvss3_score: Optional[float] = None,
                 nvd_cvss3_severity: Optional[str] = None,
                 nvd_cvss3_vectors: Optional[str] = None,
                 nvd_severity: Optional[str] = None,
                 nvd_url: Optional[str] = None,
                 os: Optional[str] = None,
                 os_version: Optional[str] = None,
                 permission: Optional[str] = None,
                 publish_date: Optional[str] = None,
                 registry: Optional[str] = None,
                 repository: Optional[str] = None,
                 resource_architecture: Optional[str] = None,
                 resource_cpe: Optional[str] = None,
                 resource_format: Optional[str] = None,
                 resource_hash: Optional[str] = None,
                 resource_licenses: Optional[Sequence[str]] = None,
                 resource_name: Optional[str] = None,
                 resource_path: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 severity_classification: Optional[str] = None,
                 solution: Optional[str] = None,
                 temporal_vector: Optional[str] = None,
                 v_patch_applied_by: Optional[str] = None,
                 v_patch_applied_on: Optional[str] = None,
                 v_patch_enforced_by: Optional[str] = None,
                 v_patch_enforced_on: Optional[str] = None,
                 v_patch_policy_enforce: Optional[bool] = None,
                 v_patch_policy_name: Optional[str] = None,
                 v_patch_reverted_by: Optional[str] = None,
                 v_patch_reverted_on: Optional[str] = None,
                 v_patch_status: Optional[str] = None,
                 vendor_cvss2_score: Optional[float] = None,
                 vendor_cvss2_vectors: Optional[str] = None,
                 vendor_severity: Optional[str] = None,
                 vendor_statement: Optional[str] = None,
                 vendor_url: Optional[str] = None):
        """
        :param str ancestor_pkg: The ancestor of this package.
        :param float aqua_score: The score generated for the vulnerability by Aqua.
        :param str aqua_score_classification: Score classification by Aqua.
        :param str aqua_scoring_system: The score system for the vulnerability by Aqua
        :param str aqua_severity: The severity generated for the vulnerability by Aqua.
        :param str aqua_severity_classification: Classification of the severity defined by Aqua.
        :param str aqua_vectors: The vectors generated for the vulnerability by Aqua
        :param int audit_events_count: Number of audit events.
        :param int block_events_count: Number of blocked events.
        :param str classification: Classification of the vulnerability.
        :param str description: The description of the vulnerability.
        :param str digest: The content digest of the image.
        :param str exploit_reference: Reference of the exploit.
        :param str exploit_type: Type of the exploit.
        :param str first_found_date: The date when this vulnerability was first found.
        :param str fix_version: Fixed version of the resource.
        :param str image_name: Name of the image.
        :param str last_found_date: The date when this vulnerability was last found.
        :param str modification_date: Thhe date when this vulnerability was modified.
        :param str name: The name of the vulnerability.
        :param float nvd_cvss2_score: CVSS2 score by NVD
        :param str nvd_cvss2_vectors: CVSS2 vectors by NVD
        :param float nvd_cvss3_score: CVSS3 score by NVD
        :param str nvd_cvss3_severity: CVSS3 severity by NVD
        :param str nvd_cvss3_vectors: CVSS3 vectors by NVD
        :param str nvd_severity: Type of the severity identified by NVD.
        :param str nvd_url: URL of the details of this vulnerability by NVD.
        :param str os: Name of the Operating System.
        :param str os_version: The version of the OS.
        :param str permission: permission on the image
        :param str publish_date: The date this vulnerability was published.
        :param str registry: Registry of the image.
        :param str repository: Repository of the image.
        :param str resource_architecture: Architecture of the resource.
        :param str resource_cpe: Common Platform Enumeration (CPE) of the resource.
        :param str resource_format: Code format of the resource (java, apk etc.).
        :param str resource_hash: Hash of the resource.
        :param Sequence[str] resource_licenses: List of license supported by the resource.
        :param str resource_name: Name of the resource.
        :param str resource_path: Path of the resource.
        :param str resource_type: Type of the resource
        :param str resource_version: Version of the resource.
        :param str severity_classification: Classification of the severity.
        :param str solution: Solution for the vulnerability.
        """
        if ack_author is not None:
            pulumi.set(__self__, "ack_author", ack_author)
        if ack_comment is not None:
            pulumi.set(__self__, "ack_comment", ack_comment)
        if ack_expiration_configured_at is not None:
            pulumi.set(__self__, "ack_expiration_configured_at", ack_expiration_configured_at)
        if ack_expiration_configured_by is not None:
            pulumi.set(__self__, "ack_expiration_configured_by", ack_expiration_configured_by)
        if ack_expiration_days is not None:
            pulumi.set(__self__, "ack_expiration_days", ack_expiration_days)
        if ack_scope is not None:
            pulumi.set(__self__, "ack_scope", ack_scope)
        if acknowledge_date is not None:
            pulumi.set(__self__, "acknowledge_date", acknowledge_date)
        if ancestor_pkg is not None:
            pulumi.set(__self__, "ancestor_pkg", ancestor_pkg)
        if aqua_score is not None:
            pulumi.set(__self__, "aqua_score", aqua_score)
        if aqua_score_classification is not None:
            pulumi.set(__self__, "aqua_score_classification", aqua_score_classification)
        if aqua_scoring_system is not None:
            pulumi.set(__self__, "aqua_scoring_system", aqua_scoring_system)
        if aqua_severity is not None:
            pulumi.set(__self__, "aqua_severity", aqua_severity)
        if aqua_severity_classification is not None:
            pulumi.set(__self__, "aqua_severity_classification", aqua_severity_classification)
        if aqua_vectors is not None:
            pulumi.set(__self__, "aqua_vectors", aqua_vectors)
        if audit_events_count is not None:
            pulumi.set(__self__, "audit_events_count", audit_events_count)
        if block_events_count is not None:
            pulumi.set(__self__, "block_events_count", block_events_count)
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if exploit_reference is not None:
            pulumi.set(__self__, "exploit_reference", exploit_reference)
        if exploit_type is not None:
            pulumi.set(__self__, "exploit_type", exploit_type)
        if first_found_date is not None:
            pulumi.set(__self__, "first_found_date", first_found_date)
        if fix_version is not None:
            pulumi.set(__self__, "fix_version", fix_version)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if last_found_date is not None:
            pulumi.set(__self__, "last_found_date", last_found_date)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nvd_cvss2_score is not None:
            pulumi.set(__self__, "nvd_cvss2_score", nvd_cvss2_score)
        if nvd_cvss2_vectors is not None:
            pulumi.set(__self__, "nvd_cvss2_vectors", nvd_cvss2_vectors)
        if nvd_cvss3_score is not None:
            pulumi.set(__self__, "nvd_cvss3_score", nvd_cvss3_score)
        if nvd_cvss3_severity is not None:
            pulumi.set(__self__, "nvd_cvss3_severity", nvd_cvss3_severity)
        if nvd_cvss3_vectors is not None:
            pulumi.set(__self__, "nvd_cvss3_vectors", nvd_cvss3_vectors)
        if nvd_severity is not None:
            pulumi.set(__self__, "nvd_severity", nvd_severity)
        if nvd_url is not None:
            pulumi.set(__self__, "nvd_url", nvd_url)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if publish_date is not None:
            pulumi.set(__self__, "publish_date", publish_date)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if resource_architecture is not None:
            pulumi.set(__self__, "resource_architecture", resource_architecture)
        if resource_cpe is not None:
            pulumi.set(__self__, "resource_cpe", resource_cpe)
        if resource_format is not None:
            pulumi.set(__self__, "resource_format", resource_format)
        if resource_hash is not None:
            pulumi.set(__self__, "resource_hash", resource_hash)
        if resource_licenses is not None:
            pulumi.set(__self__, "resource_licenses", resource_licenses)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if severity_classification is not None:
            pulumi.set(__self__, "severity_classification", severity_classification)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)
        if temporal_vector is not None:
            pulumi.set(__self__, "temporal_vector", temporal_vector)
        if v_patch_applied_by is not None:
            pulumi.set(__self__, "v_patch_applied_by", v_patch_applied_by)
        if v_patch_applied_on is not None:
            pulumi.set(__self__, "v_patch_applied_on", v_patch_applied_on)
        if v_patch_enforced_by is not None:
            pulumi.set(__self__, "v_patch_enforced_by", v_patch_enforced_by)
        if v_patch_enforced_on is not None:
            pulumi.set(__self__, "v_patch_enforced_on", v_patch_enforced_on)
        if v_patch_policy_enforce is not None:
            pulumi.set(__self__, "v_patch_policy_enforce", v_patch_policy_enforce)
        if v_patch_policy_name is not None:
            pulumi.set(__self__, "v_patch_policy_name", v_patch_policy_name)
        if v_patch_reverted_by is not None:
            pulumi.set(__self__, "v_patch_reverted_by", v_patch_reverted_by)
        if v_patch_reverted_on is not None:
            pulumi.set(__self__, "v_patch_reverted_on", v_patch_reverted_on)
        if v_patch_status is not None:
            pulumi.set(__self__, "v_patch_status", v_patch_status)
        if vendor_cvss2_score is not None:
            pulumi.set(__self__, "vendor_cvss2_score", vendor_cvss2_score)
        if vendor_cvss2_vectors is not None:
            pulumi.set(__self__, "vendor_cvss2_vectors", vendor_cvss2_vectors)
        if vendor_severity is not None:
            pulumi.set(__self__, "vendor_severity", vendor_severity)
        if vendor_statement is not None:
            pulumi.set(__self__, "vendor_statement", vendor_statement)
        if vendor_url is not None:
            pulumi.set(__self__, "vendor_url", vendor_url)

    @property
    @pulumi.getter(name="ackAuthor")
    def ack_author(self) -> Optional[str]:
        return pulumi.get(self, "ack_author")

    @property
    @pulumi.getter(name="ackComment")
    def ack_comment(self) -> Optional[str]:
        return pulumi.get(self, "ack_comment")

    @property
    @pulumi.getter(name="ackExpirationConfiguredAt")
    def ack_expiration_configured_at(self) -> Optional[str]:
        return pulumi.get(self, "ack_expiration_configured_at")

    @property
    @pulumi.getter(name="ackExpirationConfiguredBy")
    def ack_expiration_configured_by(self) -> Optional[str]:
        return pulumi.get(self, "ack_expiration_configured_by")

    @property
    @pulumi.getter(name="ackExpirationDays")
    def ack_expiration_days(self) -> Optional[int]:
        return pulumi.get(self, "ack_expiration_days")

    @property
    @pulumi.getter(name="ackScope")
    def ack_scope(self) -> Optional[str]:
        return pulumi.get(self, "ack_scope")

    @property
    @pulumi.getter(name="acknowledgeDate")
    def acknowledge_date(self) -> Optional[str]:
        return pulumi.get(self, "acknowledge_date")

    @property
    @pulumi.getter(name="ancestorPkg")
    def ancestor_pkg(self) -> Optional[str]:
        """
        The ancestor of this package.
        """
        return pulumi.get(self, "ancestor_pkg")

    @property
    @pulumi.getter(name="aquaScore")
    def aqua_score(self) -> Optional[float]:
        """
        The score generated for the vulnerability by Aqua.
        """
        return pulumi.get(self, "aqua_score")

    @property
    @pulumi.getter(name="aquaScoreClassification")
    def aqua_score_classification(self) -> Optional[str]:
        """
        Score classification by Aqua.
        """
        return pulumi.get(self, "aqua_score_classification")

    @property
    @pulumi.getter(name="aquaScoringSystem")
    def aqua_scoring_system(self) -> Optional[str]:
        """
        The score system for the vulnerability by Aqua
        """
        return pulumi.get(self, "aqua_scoring_system")

    @property
    @pulumi.getter(name="aquaSeverity")
    def aqua_severity(self) -> Optional[str]:
        """
        The severity generated for the vulnerability by Aqua.
        """
        return pulumi.get(self, "aqua_severity")

    @property
    @pulumi.getter(name="aquaSeverityClassification")
    def aqua_severity_classification(self) -> Optional[str]:
        """
        Classification of the severity defined by Aqua.
        """
        return pulumi.get(self, "aqua_severity_classification")

    @property
    @pulumi.getter(name="aquaVectors")
    def aqua_vectors(self) -> Optional[str]:
        """
        The vectors generated for the vulnerability by Aqua
        """
        return pulumi.get(self, "aqua_vectors")

    @property
    @pulumi.getter(name="auditEventsCount")
    def audit_events_count(self) -> Optional[int]:
        """
        Number of audit events.
        """
        return pulumi.get(self, "audit_events_count")

    @property
    @pulumi.getter(name="blockEventsCount")
    def block_events_count(self) -> Optional[int]:
        """
        Number of blocked events.
        """
        return pulumi.get(self, "block_events_count")

    @property
    @pulumi.getter
    def classification(self) -> Optional[str]:
        """
        Classification of the vulnerability.
        """
        return pulumi.get(self, "classification")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the vulnerability.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def digest(self) -> Optional[str]:
        """
        The content digest of the image.
        """
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter(name="exploitReference")
    def exploit_reference(self) -> Optional[str]:
        """
        Reference of the exploit.
        """
        return pulumi.get(self, "exploit_reference")

    @property
    @pulumi.getter(name="exploitType")
    def exploit_type(self) -> Optional[str]:
        """
        Type of the exploit.
        """
        return pulumi.get(self, "exploit_type")

    @property
    @pulumi.getter(name="firstFoundDate")
    def first_found_date(self) -> Optional[str]:
        """
        The date when this vulnerability was first found.
        """
        return pulumi.get(self, "first_found_date")

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> Optional[str]:
        """
        Fixed version of the resource.
        """
        return pulumi.get(self, "fix_version")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        """
        Name of the image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="lastFoundDate")
    def last_found_date(self) -> Optional[str]:
        """
        The date when this vulnerability was last found.
        """
        return pulumi.get(self, "last_found_date")

    @property
    @pulumi.getter(name="modificationDate")
    def modification_date(self) -> Optional[str]:
        """
        Thhe date when this vulnerability was modified.
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the vulnerability.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nvdCvss2Score")
    def nvd_cvss2_score(self) -> Optional[float]:
        """
        CVSS2 score by NVD
        """
        return pulumi.get(self, "nvd_cvss2_score")

    @property
    @pulumi.getter(name="nvdCvss2Vectors")
    def nvd_cvss2_vectors(self) -> Optional[str]:
        """
        CVSS2 vectors by NVD
        """
        return pulumi.get(self, "nvd_cvss2_vectors")

    @property
    @pulumi.getter(name="nvdCvss3Score")
    def nvd_cvss3_score(self) -> Optional[float]:
        """
        CVSS3 score by NVD
        """
        return pulumi.get(self, "nvd_cvss3_score")

    @property
    @pulumi.getter(name="nvdCvss3Severity")
    def nvd_cvss3_severity(self) -> Optional[str]:
        """
        CVSS3 severity by NVD
        """
        return pulumi.get(self, "nvd_cvss3_severity")

    @property
    @pulumi.getter(name="nvdCvss3Vectors")
    def nvd_cvss3_vectors(self) -> Optional[str]:
        """
        CVSS3 vectors by NVD
        """
        return pulumi.get(self, "nvd_cvss3_vectors")

    @property
    @pulumi.getter(name="nvdSeverity")
    def nvd_severity(self) -> Optional[str]:
        """
        Type of the severity identified by NVD.
        """
        return pulumi.get(self, "nvd_severity")

    @property
    @pulumi.getter(name="nvdUrl")
    def nvd_url(self) -> Optional[str]:
        """
        URL of the details of this vulnerability by NVD.
        """
        return pulumi.get(self, "nvd_url")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        Name of the Operating System.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        """
        The version of the OS.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def permission(self) -> Optional[str]:
        """
        permission on the image
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="publishDate")
    def publish_date(self) -> Optional[str]:
        """
        The date this vulnerability was published.
        """
        return pulumi.get(self, "publish_date")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        """
        Registry of the image.
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        Repository of the image.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="resourceArchitecture")
    def resource_architecture(self) -> Optional[str]:
        """
        Architecture of the resource.
        """
        return pulumi.get(self, "resource_architecture")

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> Optional[str]:
        """
        Common Platform Enumeration (CPE) of the resource.
        """
        return pulumi.get(self, "resource_cpe")

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> Optional[str]:
        """
        Code format of the resource (java, apk etc.).
        """
        return pulumi.get(self, "resource_format")

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> Optional[str]:
        """
        Hash of the resource.
        """
        return pulumi.get(self, "resource_hash")

    @property
    @pulumi.getter(name="resourceLicenses")
    def resource_licenses(self) -> Optional[Sequence[str]]:
        """
        List of license supported by the resource.
        """
        return pulumi.get(self, "resource_licenses")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        Name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[str]:
        """
        Path of the resource.
        """
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Version of the resource.
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter(name="severityClassification")
    def severity_classification(self) -> Optional[str]:
        """
        Classification of the severity.
        """
        return pulumi.get(self, "severity_classification")

    @property
    @pulumi.getter
    def solution(self) -> Optional[str]:
        """
        Solution for the vulnerability.
        """
        return pulumi.get(self, "solution")

    @property
    @pulumi.getter(name="temporalVector")
    def temporal_vector(self) -> Optional[str]:
        return pulumi.get(self, "temporal_vector")

    @property
    @pulumi.getter(name="vPatchAppliedBy")
    def v_patch_applied_by(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_applied_by")

    @property
    @pulumi.getter(name="vPatchAppliedOn")
    def v_patch_applied_on(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_applied_on")

    @property
    @pulumi.getter(name="vPatchEnforcedBy")
    def v_patch_enforced_by(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_enforced_by")

    @property
    @pulumi.getter(name="vPatchEnforcedOn")
    def v_patch_enforced_on(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_enforced_on")

    @property
    @pulumi.getter(name="vPatchPolicyEnforce")
    def v_patch_policy_enforce(self) -> Optional[bool]:
        return pulumi.get(self, "v_patch_policy_enforce")

    @property
    @pulumi.getter(name="vPatchPolicyName")
    def v_patch_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_policy_name")

    @property
    @pulumi.getter(name="vPatchRevertedBy")
    def v_patch_reverted_by(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_reverted_by")

    @property
    @pulumi.getter(name="vPatchRevertedOn")
    def v_patch_reverted_on(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_reverted_on")

    @property
    @pulumi.getter(name="vPatchStatus")
    def v_patch_status(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_status")

    @property
    @pulumi.getter(name="vendorCvss2Score")
    def vendor_cvss2_score(self) -> Optional[float]:
        return pulumi.get(self, "vendor_cvss2_score")

    @property
    @pulumi.getter(name="vendorCvss2Vectors")
    def vendor_cvss2_vectors(self) -> Optional[str]:
        return pulumi.get(self, "vendor_cvss2_vectors")

    @property
    @pulumi.getter(name="vendorSeverity")
    def vendor_severity(self) -> Optional[str]:
        return pulumi.get(self, "vendor_severity")

    @property
    @pulumi.getter(name="vendorStatement")
    def vendor_statement(self) -> Optional[str]:
        return pulumi.get(self, "vendor_statement")

    @property
    @pulumi.getter(name="vendorUrl")
    def vendor_url(self) -> Optional[str]:
        return pulumi.get(self, "vendor_url")


@pulumi.output_type
class IntegrationRegistryOption(dict):
    def __init__(__self__, *,
                 option: Optional[str] = None,
                 value: Optional[str] = None):
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[str]:
        return pulumi.get(self, "option")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRegistryWebhook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "unQuarantine":
            suggest = "un_quarantine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationRegistryWebhook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationRegistryWebhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationRegistryWebhook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 un_quarantine: Optional[bool] = None,
                 url: Optional[str] = None):
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if un_quarantine is not None:
            pulumi.set(__self__, "un_quarantine", un_quarantine)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="unQuarantine")
    def un_quarantine(self) -> Optional[bool]:
        return pulumi.get(self, "un_quarantine")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class KubernetesAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class KubernetesAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        """
        :param str author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class KubernetesAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class KubernetesAssurancePolicyKubernetesControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avdId":
            suggest = "avd_id"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesAssurancePolicyKubernetesControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesAssurancePolicyKubernetesControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesAssurancePolicyKubernetesControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avd_id: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 ootb: Optional[bool] = None,
                 script_id: Optional[int] = None,
                 severity: Optional[str] = None):
        """
        :param str avd_id: AVD ID.
        :param str description: Description of the control.
        :param bool enabled: Is the control enabled?
        :param str kind: Kind of the control.
        :param str name: Name of the control.
        :param bool ootb: Out-of-the-box status of the control.
        :param int script_id: Script ID.
        :param str severity: Severity of the control.
        """
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[str]:
        """
        AVD ID.
        """
        return pulumi.get(self, "avd_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the control.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the control enabled?
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the control.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the control.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ootb(self) -> Optional[bool]:
        """
        Out-of-the-box status of the control.
        """
        return pulumi.get(self, "ootb")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[int]:
        """
        Script ID.
        """
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity of the control.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class KubernetesAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class KubernetesAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class KubernetesAssurancePolicyPolicySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAuditChecked":
            suggest = "is_audit_checked"
        elif key == "warningMessage":
            suggest = "warning_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesAssurancePolicyPolicySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesAssurancePolicyPolicySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesAssurancePolicyPolicySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enforce: Optional[bool] = None,
                 is_audit_checked: Optional[bool] = None,
                 warn: Optional[bool] = None,
                 warning_message: Optional[str] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[bool]:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[bool]:
        return pulumi.get(self, "is_audit_checked")

    @property
    @pulumi.getter
    def warn(self) -> Optional[bool]:
        return pulumi.get(self, "warn")

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[str]:
        return pulumi.get(self, "warning_message")


@pulumi.output_type
class KubernetesAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class KubernetesAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.KubernetesAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.KubernetesAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class KubernetesAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class KubernetesAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class RoleMappingLdap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleMapping":
            suggest = "role_mapping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleMappingLdap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleMappingLdap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleMappingLdap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class RoleMappingOauth2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleMapping":
            suggest = "role_mapping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleMappingOauth2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleMappingOauth2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleMappingOauth2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class RoleMappingOpenid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleMapping":
            suggest = "role_mapping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleMappingOpenid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleMappingOpenid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleMappingOpenid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class RoleMappingSaml(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleMapping":
            suggest = "role_mapping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleMappingSaml. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleMappingSaml.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleMappingSaml.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua. Use '|' as a separator for multiple roles.
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class ServiceScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str attribute: Class of supported scope.
        :param str name: Name assigned to the attribute.
        :param str value: Value assigned to the attribute.
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserSaasGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupAdmin":
            suggest = "group_admin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSaasGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSaasGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSaasGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_admin: Optional[bool] = None,
                 name: Optional[str] = None):
        if group_admin is not None:
            pulumi.set(__self__, "group_admin", group_admin)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="groupAdmin")
    def group_admin(self) -> Optional[bool]:
        return pulumi.get(self, "group_admin")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserSaasLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSaasLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSaasLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSaasLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 user_id: Optional[int] = None):
        if created is not None:
            pulumi.set(__self__, "created", created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[int]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class VmwareAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class VmwareAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        """
        :param str author: Name of user account that created the policy.
        """
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class VmwareAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VmwareAssurancePolicyKubernetesControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avdId":
            suggest = "avd_id"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareAssurancePolicyKubernetesControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareAssurancePolicyKubernetesControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareAssurancePolicyKubernetesControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avd_id: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 ootb: Optional[bool] = None,
                 script_id: Optional[int] = None,
                 severity: Optional[str] = None):
        if avd_id is not None:
            pulumi.set(__self__, "avd_id", avd_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ootb is not None:
            pulumi.set(__self__, "ootb", ootb)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="avdId")
    def avd_id(self) -> Optional[str]:
        return pulumi.get(self, "avd_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ootb(self) -> Optional[bool]:
        return pulumi.get(self, "ootb")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[int]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class VmwareAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class VmwareAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class VmwareAssurancePolicyPolicySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAuditChecked":
            suggest = "is_audit_checked"
        elif key == "warningMessage":
            suggest = "warning_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmwareAssurancePolicyPolicySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmwareAssurancePolicyPolicySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmwareAssurancePolicyPolicySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enforce: Optional[bool] = None,
                 is_audit_checked: Optional[bool] = None,
                 warn: Optional[bool] = None,
                 warning_message: Optional[str] = None):
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if is_audit_checked is not None:
            pulumi.set(__self__, "is_audit_checked", is_audit_checked)
        if warn is not None:
            pulumi.set(__self__, "warn", warn)
        if warning_message is not None:
            pulumi.set(__self__, "warning_message", warning_message)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[bool]:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="isAuditChecked")
    def is_audit_checked(self) -> Optional[bool]:
        return pulumi.get(self, "is_audit_checked")

    @property
    @pulumi.getter
    def warn(self) -> Optional[bool]:
        return pulumi.get(self, "warn")

    @property
    @pulumi.getter(name="warningMessage")
    def warning_message(self) -> Optional[str]:
        return pulumi.get(self, "warning_message")


@pulumi.output_type
class VmwareAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VmwareAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.VmwareAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.VmwareAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class VmwareAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VmwareAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetAcknowledgesAcknowledgeResult(dict):
    def __init__(__self__, *,
                 author: str,
                 comment: str,
                 date: str,
                 docker_id: str,
                 expiration_configured_at: str,
                 expiration_configured_by: str,
                 expiration_days: int,
                 fix_version: str,
                 image_name: str,
                 issue_name: str,
                 issue_type: str,
                 os: str,
                 os_version: str,
                 permission: str,
                 registry_name: str,
                 resource_cpe: str,
                 resource_format: str,
                 resource_hash: str,
                 resource_name: str,
                 resource_path: str,
                 resource_type: str,
                 resource_version: str):
        """
        :param str author: The user who acknowledged the issue.
        :param str comment: A comment describing the reason for the acknowledgment
        :param str date: The date and time of the acknowledgment.
        :param str expiration_configured_at: The current dat and time when the expiration was set
        :param str expiration_configured_by: The user who set the expiration of the issue.
        :param int expiration_days: Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
        :param str fix_version: The version of the package that having a fix for the issue.
        :param str image_name: Only acknowledge the issue in the context of the specified image (also requires 'registry_name')
        :param str issue_name: The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
        :param str issue_type: The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')
        :param str os: When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').
        :param str os_version: When the resource_type is 'package', the operating system version is required.
        :param str permission: The permissions of the user who acknowledged the issue.
        :param str registry_name: Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').
        :param str resource_cpe: The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.
        :param str resource_format: The format of the resource.
        :param str resource_hash: When the resource_type is 'file', the hash of the file is required
        :param str resource_name: When the resource_type is 'package', the name of the package is required.
        :param str resource_path: The path of the resource. This is required for resources of type 'file' and 'executable'.
        :param str resource_type: The type of the resource where the issue was detected (either 'package', 'file' or 'executable')
        :param str resource_version: When the resource_type is 'package', the version of the package is required
        """
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "docker_id", docker_id)
        pulumi.set(__self__, "expiration_configured_at", expiration_configured_at)
        pulumi.set(__self__, "expiration_configured_by", expiration_configured_by)
        pulumi.set(__self__, "expiration_days", expiration_days)
        pulumi.set(__self__, "fix_version", fix_version)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "issue_name", issue_name)
        pulumi.set(__self__, "issue_type", issue_type)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "registry_name", registry_name)
        pulumi.set(__self__, "resource_cpe", resource_cpe)
        pulumi.set(__self__, "resource_format", resource_format)
        pulumi.set(__self__, "resource_hash", resource_hash)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_path", resource_path)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "resource_version", resource_version)

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        The user who acknowledged the issue.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        A comment describing the reason for the acknowledgment
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def date(self) -> str:
        """
        The date and time of the acknowledgment.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="dockerId")
    def docker_id(self) -> str:
        return pulumi.get(self, "docker_id")

    @property
    @pulumi.getter(name="expirationConfiguredAt")
    def expiration_configured_at(self) -> str:
        """
        The current dat and time when the expiration was set
        """
        return pulumi.get(self, "expiration_configured_at")

    @property
    @pulumi.getter(name="expirationConfiguredBy")
    def expiration_configured_by(self) -> str:
        """
        The user who set the expiration of the issue.
        """
        return pulumi.get(self, "expiration_configured_by")

    @property
    @pulumi.getter(name="expirationDays")
    def expiration_days(self) -> int:
        """
        Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
        """
        return pulumi.get(self, "expiration_days")

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> str:
        """
        The version of the package that having a fix for the issue.
        """
        return pulumi.get(self, "fix_version")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        Only acknowledge the issue in the context of the specified image (also requires 'registry_name')
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="issueName")
    def issue_name(self) -> str:
        """
        The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
        """
        return pulumi.get(self, "issue_name")

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> str:
        """
        The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')
        """
        return pulumi.get(self, "issue_type")

    @property
    @pulumi.getter
    def os(self) -> str:
        """
        When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        When the resource_type is 'package', the operating system version is required.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        The permissions of the user who acknowledged the issue.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> str:
        """
        Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').
        """
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> str:
        """
        The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.
        """
        return pulumi.get(self, "resource_cpe")

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> str:
        """
        The format of the resource.
        """
        return pulumi.get(self, "resource_format")

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> str:
        """
        When the resource_type is 'file', the hash of the file is required
        """
        return pulumi.get(self, "resource_hash")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        When the resource_type is 'package', the name of the package is required.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> str:
        """
        The path of the resource. This is required for resources of type 'file' and 'executable'.
        """
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The type of the resource where the issue was detected (either 'package', 'file' or 'executable')
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> str:
        """
        When the resource_type is 'package', the version of the package is required
        """
        return pulumi.get(self, "resource_version")


@pulumi.output_type
class GetApplicationScopeCategoryResult(dict):
    def __init__(__self__, *,
                 artifacts: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactResult']] = None,
                 entity_scopes: Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeResult']] = None,
                 infrastructures: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureResult']] = None,
                 workloads: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadResult']] = None):
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactResult']]:
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeResult']]:
        return pulumi.get(self, "entity_scopes")

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureResult']]:
        return pulumi.get(self, "infrastructures")

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadResult']]:
        return pulumi.get(self, "workloads")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactResult(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfResult']] = None,
                 functions: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionResult']] = None,
                 images: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageResult']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfResult']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionResult']]:
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageResult']]:
        return pulumi.get(self, "images")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactCfResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactCfVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactFunctionResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactFunctionVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactImageResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactImageVariableResult(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryEntityScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryEntityScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureResult(dict):
    def __init__(__self__, *,
                 kubernetes: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteResult']] = None,
                 os: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOResult']] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteResult']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOResult']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureKuberneteResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureKuberneteVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureOResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureOVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadResult(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfResult']] = None,
                 kubernetes: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteResult']] = None,
                 os: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOResult']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfResult']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteResult']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOResult']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadCfResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadCfVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadKuberneteResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadKuberneteVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadOResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadOVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAquaLabelsAquaLabelResult(dict):
    def __init__(__self__, *,
                 author: str,
                 created: str,
                 description: str,
                 name: str):
        """
        :param str author: The name of the user who created the Aqua label.
        :param str created: The creation date of the Aqua label.
        :param str description: Aqua label description.
        :param str name: Aqua label name.
        """
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        The name of the user who created the Aqua label.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The creation date of the Aqua label.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Aqua label description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Aqua label name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetContainerRuntimePolicyAllowedExecutableResult(dict):
    def __init__(__self__, *,
                 allow_executables: Optional[Sequence[str]] = None,
                 allow_root_executables: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 separate_executables: Optional[bool] = None):
        """
        :param Sequence[str] allow_executables: List of allowed executables.
        :param Sequence[str] allow_root_executables: List of allowed root executables.
        :param bool enabled: Whether allowed executables configuration is enabled.
        :param bool separate_executables: Whether to treat executables separately.
        """
        if allow_executables is not None:
            pulumi.set(__self__, "allow_executables", allow_executables)
        if allow_root_executables is not None:
            pulumi.set(__self__, "allow_root_executables", allow_root_executables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if separate_executables is not None:
            pulumi.set(__self__, "separate_executables", separate_executables)

    @property
    @pulumi.getter(name="allowExecutables")
    def allow_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed executables.
        """
        return pulumi.get(self, "allow_executables")

    @property
    @pulumi.getter(name="allowRootExecutables")
    def allow_root_executables(self) -> Optional[Sequence[str]]:
        """
        List of allowed root executables.
        """
        return pulumi.get(self, "allow_root_executables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed executables configuration is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="separateExecutables")
    def separate_executables(self) -> Optional[bool]:
        """
        Whether to treat executables separately.
        """
        return pulumi.get(self, "separate_executables")


@pulumi.output_type
class GetContainerRuntimePolicyAllowedRegistryResult(dict):
    def __init__(__self__, *,
                 allowed_registries: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[str] allowed_registries: List of allowed registries.
        :param bool enabled: Whether allowed registries are enabled.
        """
        if allowed_registries is not None:
            pulumi.set(__self__, "allowed_registries", allowed_registries)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Optional[Sequence[str]]:
        """
        List of allowed registries.
        """
        return pulumi.get(self, "allowed_registries")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether allowed registries are enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetContainerRuntimePolicyAuditingResult(dict):
    def __init__(__self__, *,
                 audit_all_network: Optional[bool] = None,
                 audit_all_processes: Optional[bool] = None,
                 audit_failed_login: Optional[bool] = None,
                 audit_os_user_activity: Optional[bool] = None,
                 audit_process_cmdline: Optional[bool] = None,
                 audit_success_login: Optional[bool] = None,
                 audit_user_account_management: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_network")

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_processes")

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_failed_login")

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[bool]:
        return pulumi.get(self, "audit_os_user_activity")

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[bool]:
        return pulumi.get(self, "audit_process_cmdline")

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_success_login")

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[bool]:
        return pulumi.get(self, "audit_user_account_management")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetContainerRuntimePolicyContainerExecResult(dict):
    def __init__(__self__, *,
                 block_container_exec: Optional[bool] = None,
                 container_exec_proc_white_lists: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 reverse_shell_ip_white_lists: Optional[Sequence[str]] = None):
        if block_container_exec is not None:
            pulumi.set(__self__, "block_container_exec", block_container_exec)
        if container_exec_proc_white_lists is not None:
            pulumi.set(__self__, "container_exec_proc_white_lists", container_exec_proc_white_lists)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if reverse_shell_ip_white_lists is not None:
            pulumi.set(__self__, "reverse_shell_ip_white_lists", reverse_shell_ip_white_lists)

    @property
    @pulumi.getter(name="blockContainerExec")
    def block_container_exec(self) -> Optional[bool]:
        return pulumi.get(self, "block_container_exec")

    @property
    @pulumi.getter(name="containerExecProcWhiteLists")
    def container_exec_proc_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "container_exec_proc_white_lists")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="reverseShellIpWhiteLists")
    def reverse_shell_ip_white_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reverse_shell_ip_white_lists")


@pulumi.output_type
class GetContainerRuntimePolicyFileBlockResult(dict):
    def __init__(__self__, *,
                 block_files_processes: Optional[Sequence[str]] = None,
                 block_files_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_files: Optional[Sequence[str]] = None,
                 exceptional_block_files_processes: Optional[Sequence[str]] = None,
                 exceptional_block_files_users: Optional[Sequence[str]] = None,
                 filename_block_lists: Optional[Sequence[str]] = None):
        if block_files_processes is not None:
            pulumi.set(__self__, "block_files_processes", block_files_processes)
        if block_files_users is not None:
            pulumi.set(__self__, "block_files_users", block_files_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_files is not None:
            pulumi.set(__self__, "exceptional_block_files", exceptional_block_files)
        if exceptional_block_files_processes is not None:
            pulumi.set(__self__, "exceptional_block_files_processes", exceptional_block_files_processes)
        if exceptional_block_files_users is not None:
            pulumi.set(__self__, "exceptional_block_files_users", exceptional_block_files_users)
        if filename_block_lists is not None:
            pulumi.set(__self__, "filename_block_lists", filename_block_lists)

    @property
    @pulumi.getter(name="blockFilesProcesses")
    def block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_processes")

    @property
    @pulumi.getter(name="blockFilesUsers")
    def block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_files_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockFiles")
    def exceptional_block_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files")

    @property
    @pulumi.getter(name="exceptionalBlockFilesProcesses")
    def exceptional_block_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_processes")

    @property
    @pulumi.getter(name="exceptionalBlockFilesUsers")
    def exceptional_block_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_files_users")

    @property
    @pulumi.getter(name="filenameBlockLists")
    def filename_block_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filename_block_lists")


@pulumi.output_type
class GetContainerRuntimePolicyFileIntegrityMonitoringResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_files: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_users: Optional[Sequence[str]] = None,
                 monitored_files: Optional[Sequence[str]] = None,
                 monitored_files_attributes: Optional[bool] = None,
                 monitored_files_create: Optional[bool] = None,
                 monitored_files_delete: Optional[bool] = None,
                 monitored_files_modify: Optional[bool] = None,
                 monitored_files_processes: Optional[Sequence[str]] = None,
                 monitored_files_read: Optional[bool] = None,
                 monitored_files_users: Optional[Sequence[str]] = None):
        """
        :param bool enabled: If true, file integrity monitoring is enabled.
        :param Sequence[str] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param Sequence[str] monitored_files: List of paths to be monitored.
        :param bool monitored_files_attributes: Whether to monitor file attribute operations.
        :param bool monitored_files_create: Whether to monitor file create operations.
        :param bool monitored_files_delete: Whether to monitor file delete operations.
        :param bool monitored_files_modify: Whether to monitor file modify operations.
        :param Sequence[str] monitored_files_processes: List of processes associated with monitored files.
        :param bool monitored_files_read: Whether to monitor file read operations.
        :param Sequence[str] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[bool]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[bool]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[bool]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[bool]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[bool]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")


@pulumi.output_type
class GetContainerRuntimePolicyLimitContainerPrivilegeResult(dict):
    def __init__(__self__, *,
                 block_add_capabilities: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ipcmode: Optional[bool] = None,
                 netmode: Optional[bool] = None,
                 pidmode: Optional[bool] = None,
                 prevent_low_port_binding: Optional[bool] = None,
                 prevent_root_user: Optional[bool] = None,
                 privileged: Optional[bool] = None,
                 use_host_user: Optional[bool] = None,
                 usermode: Optional[bool] = None,
                 utsmode: Optional[bool] = None):
        """
        :param bool block_add_capabilities: Whether to block adding capabilities.
        :param bool enabled: Whether container privilege limitations are enabled.
        :param bool ipcmode: Whether to limit IPC-related capabilities.
        :param bool netmode: Whether to limit network-related capabilities.
        :param bool pidmode: Whether to limit process-related capabilities.
        :param bool prevent_low_port_binding: Whether to prevent low port binding.
        :param bool prevent_root_user: Whether to prevent the use of the root user.
        :param bool privileged: Whether the container is run in privileged mode.
        :param bool use_host_user: Whether to use the host user.
        :param bool usermode: Whether to limit user-related capabilities.
        :param bool utsmode: Whether to limit UTS-related capabilities.
        """
        if block_add_capabilities is not None:
            pulumi.set(__self__, "block_add_capabilities", block_add_capabilities)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipcmode is not None:
            pulumi.set(__self__, "ipcmode", ipcmode)
        if netmode is not None:
            pulumi.set(__self__, "netmode", netmode)
        if pidmode is not None:
            pulumi.set(__self__, "pidmode", pidmode)
        if prevent_low_port_binding is not None:
            pulumi.set(__self__, "prevent_low_port_binding", prevent_low_port_binding)
        if prevent_root_user is not None:
            pulumi.set(__self__, "prevent_root_user", prevent_root_user)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if use_host_user is not None:
            pulumi.set(__self__, "use_host_user", use_host_user)
        if usermode is not None:
            pulumi.set(__self__, "usermode", usermode)
        if utsmode is not None:
            pulumi.set(__self__, "utsmode", utsmode)

    @property
    @pulumi.getter(name="blockAddCapabilities")
    def block_add_capabilities(self) -> Optional[bool]:
        """
        Whether to block adding capabilities.
        """
        return pulumi.get(self, "block_add_capabilities")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether container privilege limitations are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ipcmode(self) -> Optional[bool]:
        """
        Whether to limit IPC-related capabilities.
        """
        return pulumi.get(self, "ipcmode")

    @property
    @pulumi.getter
    def netmode(self) -> Optional[bool]:
        """
        Whether to limit network-related capabilities.
        """
        return pulumi.get(self, "netmode")

    @property
    @pulumi.getter
    def pidmode(self) -> Optional[bool]:
        """
        Whether to limit process-related capabilities.
        """
        return pulumi.get(self, "pidmode")

    @property
    @pulumi.getter(name="preventLowPortBinding")
    def prevent_low_port_binding(self) -> Optional[bool]:
        """
        Whether to prevent low port binding.
        """
        return pulumi.get(self, "prevent_low_port_binding")

    @property
    @pulumi.getter(name="preventRootUser")
    def prevent_root_user(self) -> Optional[bool]:
        """
        Whether to prevent the use of the root user.
        """
        return pulumi.get(self, "prevent_root_user")

    @property
    @pulumi.getter
    def privileged(self) -> Optional[bool]:
        """
        Whether the container is run in privileged mode.
        """
        return pulumi.get(self, "privileged")

    @property
    @pulumi.getter(name="useHostUser")
    def use_host_user(self) -> Optional[bool]:
        """
        Whether to use the host user.
        """
        return pulumi.get(self, "use_host_user")

    @property
    @pulumi.getter
    def usermode(self) -> Optional[bool]:
        """
        Whether to limit user-related capabilities.
        """
        return pulumi.get(self, "usermode")

    @property
    @pulumi.getter
    def utsmode(self) -> Optional[bool]:
        """
        Whether to limit UTS-related capabilities.
        """
        return pulumi.get(self, "utsmode")


@pulumi.output_type
class GetContainerRuntimePolicyMalwareScanOptionResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exclude_directories: Optional[Sequence[str]] = None,
                 exclude_processes: Optional[Sequence[str]] = None,
                 include_directories: Optional[Sequence[str]] = None):
        """
        :param str action: Set Action, Defaults to 'Alert' when empty
        :param bool enabled: Defines if enabled or not
        :param Sequence[str] exclude_directories: List of registry paths to be excluded from being protected.
        :param Sequence[str] exclude_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")


@pulumi.output_type
class GetContainerRuntimePolicyPortBlockResult(dict):
    def __init__(__self__, *,
                 block_inbound_ports: Optional[Sequence[str]] = None,
                 block_outbound_ports: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if block_inbound_ports is not None:
            pulumi.set(__self__, "block_inbound_ports", block_inbound_ports)
        if block_outbound_ports is not None:
            pulumi.set(__self__, "block_outbound_ports", block_outbound_ports)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="blockInboundPorts")
    def block_inbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_inbound_ports")

    @property
    @pulumi.getter(name="blockOutboundPorts")
    def block_outbound_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_outbound_ports")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetContainerRuntimePolicyReadonlyFilesResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_readonly_files: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_processes: Optional[Sequence[str]] = None,
                 exceptional_readonly_files_users: Optional[Sequence[str]] = None,
                 readonly_files: Optional[Sequence[str]] = None,
                 readonly_files_processes: Optional[Sequence[str]] = None,
                 readonly_files_users: Optional[Sequence[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_readonly_files is not None:
            pulumi.set(__self__, "exceptional_readonly_files", exceptional_readonly_files)
        if exceptional_readonly_files_processes is not None:
            pulumi.set(__self__, "exceptional_readonly_files_processes", exceptional_readonly_files_processes)
        if exceptional_readonly_files_users is not None:
            pulumi.set(__self__, "exceptional_readonly_files_users", exceptional_readonly_files_users)
        if readonly_files is not None:
            pulumi.set(__self__, "readonly_files", readonly_files)
        if readonly_files_processes is not None:
            pulumi.set(__self__, "readonly_files_processes", readonly_files_processes)
        if readonly_files_users is not None:
            pulumi.set(__self__, "readonly_files_users", readonly_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalReadonlyFiles")
    def exceptional_readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesProcesses")
    def exceptional_readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_processes")

    @property
    @pulumi.getter(name="exceptionalReadonlyFilesUsers")
    def exceptional_readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_readonly_files_users")

    @property
    @pulumi.getter(name="readonlyFiles")
    def readonly_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files")

    @property
    @pulumi.getter(name="readonlyFilesProcesses")
    def readonly_files_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_processes")

    @property
    @pulumi.getter(name="readonlyFilesUsers")
    def readonly_files_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "readonly_files_users")


@pulumi.output_type
class GetContainerRuntimePolicyRestrictedVolumeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 volumes: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether restricted volumes are enabled.
        :param Sequence[str] volumes: List of restricted volumes.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether restricted volumes are enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence[str]]:
        """
        List of restricted volumes.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class GetContainerRuntimePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str name: Name assigned to the attribute.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEnforcerGroupsCommandResult(dict):
    def __init__(__self__, *,
                 default: str,
                 kubernetes: str,
                 swarm: str,
                 windows: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "kubernetes", kubernetes)
        pulumi.set(__self__, "swarm", swarm)
        pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def kubernetes(self) -> str:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def swarm(self) -> str:
        return pulumi.get(self, "swarm")

    @property
    @pulumi.getter
    def windows(self) -> str:
        return pulumi.get(self, "windows")


@pulumi.output_type
class GetEnforcerGroupsOrchestratorResult(dict):
    def __init__(__self__, *,
                 master: bool,
                 namespace: str,
                 service_account: str,
                 type: str):
        """
        :param str namespace: May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        :param str service_account: May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        pulumi.set(__self__, "master", master)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def master(self) -> bool:
        return pulumi.get(self, "master")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        """
        May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFirewallPolicyInboundNetworkResult(dict):
    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource: str,
                 resource_type: str):
        """
        :param bool allow: Indicates whether the specified resources are allowed to pass in data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource: Information of the resource.
        :param str resource_type: Type of the resource
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to pass in data or requests.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetFirewallPolicyOutboundNetworkResult(dict):
    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource: str,
                 resource_type: str):
        """
        :param bool allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource: Information of the resource.
        :param str resource_type: Type of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetFunctionAssurancePolicyAutoScanTimeResult(dict):
    def __init__(__self__, *,
                 iteration: int,
                 iteration_type: str,
                 time: str,
                 week_days: Sequence[str]):
        pulumi.set(__self__, "iteration", iteration)
        pulumi.set(__self__, "iteration_type", iteration_type)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> int:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> str:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Sequence[str]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class GetFunctionAssurancePolicyCustomCheckResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 engine: str,
                 last_modified: int,
                 name: str,
                 path: str,
                 read_only: bool,
                 script_id: str,
                 severity: str,
                 snippet: str):
        """
        :param str author: Name of user account that created the policy.
        """
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> int:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> str:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class GetFunctionAssurancePolicyForbiddenLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionAssurancePolicyPackagesBlackListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetFunctionAssurancePolicyPackagesWhiteListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetFunctionAssurancePolicyRequiredLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionAssurancePolicyScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetFunctionAssurancePolicyScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetFunctionAssurancePolicyScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetFunctionAssurancePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionAssurancePolicyTrustedBaseImageResult(dict):
    def __init__(__self__, *,
                 imagename: str,
                 registry: str):
        pulumi.set(__self__, "imagename", imagename)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> str:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetFunctionRuntimePolicyDriftPreventionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exec_lockdown: Optional[bool] = None,
                 exec_lockdown_white_lists: Optional[Sequence[str]] = None,
                 image_lockdown: Optional[bool] = None):
        """
        :param bool enabled: Whether drift prevention is enabled.
        :param bool exec_lockdown: Whether to lockdown execution drift.
        :param Sequence[str] exec_lockdown_white_lists: List of items in the execution lockdown white list.
        :param bool image_lockdown: Whether to lockdown image drift.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exec_lockdown is not None:
            pulumi.set(__self__, "exec_lockdown", exec_lockdown)
        if exec_lockdown_white_lists is not None:
            pulumi.set(__self__, "exec_lockdown_white_lists", exec_lockdown_white_lists)
        if image_lockdown is not None:
            pulumi.set(__self__, "image_lockdown", image_lockdown)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether drift prevention is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="execLockdown")
    def exec_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown execution drift.
        """
        return pulumi.get(self, "exec_lockdown")

    @property
    @pulumi.getter(name="execLockdownWhiteLists")
    def exec_lockdown_white_lists(self) -> Optional[Sequence[str]]:
        """
        List of items in the execution lockdown white list.
        """
        return pulumi.get(self, "exec_lockdown_white_lists")

    @property
    @pulumi.getter(name="imageLockdown")
    def image_lockdown(self) -> Optional[bool]:
        """
        Whether to lockdown image drift.
        """
        return pulumi.get(self, "image_lockdown")


@pulumi.output_type
class GetFunctionRuntimePolicyExecutableBlacklistResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 executables: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Whether the executable blacklist is enabled.
        :param Sequence[str] executables: List of blacklisted executables.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether the executable blacklist is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def executables(self) -> Optional[Sequence[str]]:
        """
        List of blacklisted executables.
        """
        return pulumi.get(self, "executables")


@pulumi.output_type
class GetFunctionRuntimePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str name: Name assigned to the attribute.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 description: str,
                 grpc_address: str,
                 hostname: str,
                 id: str,
                 logicalname: str,
                 public_address: str,
                 status: str,
                 version: str):
        """
        :param str description: The description of the gateway.
        :param str grpc_address: The GRPC address of the gateway.
        :param str hostname: The name of the gateway's host.
        :param str id: The ID of the gateway (for example: 8522744b25e2_gateway)
        :param str logicalname: The logical name of the gateway (for example: 8522744b25e2)
        :param str public_address: The public IP address of the gateway.
        :param str status: The status of the gateway.
        :param str version: The version of the gateway.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grpc_address", grpc_address)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logicalname", logicalname)
        pulumi.set(__self__, "public_address", public_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the gateway.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grpcAddress")
    def grpc_address(self) -> str:
        """
        The GRPC address of the gateway.
        """
        return pulumi.get(self, "grpc_address")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The name of the gateway's host.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the gateway (for example: 8522744b25e2_gateway)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logicalname(self) -> str:
        """
        The logical name of the gateway (for example: 8522744b25e2)
        """
        return pulumi.get(self, "logicalname")

    @property
    @pulumi.getter(name="publicAddress")
    def public_address(self) -> str:
        """
        The public IP address of the gateway.
        """
        return pulumi.get(self, "public_address")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the gateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the gateway.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created: str,
                 group_id: str,
                 name: str):
        """
        :param str created: The creation date of the group.
        :param str group_id: The ID of the created group.
        :param str name: The desired name of the group.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The creation date of the group.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The ID of the created group.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The desired name of the group.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHostAssurancePolicyAutoScanTimeResult(dict):
    def __init__(__self__, *,
                 iteration: int,
                 iteration_type: str,
                 time: str,
                 week_days: Sequence[str]):
        pulumi.set(__self__, "iteration", iteration)
        pulumi.set(__self__, "iteration_type", iteration_type)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> int:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> str:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Sequence[str]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class GetHostAssurancePolicyCustomCheckResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 engine: str,
                 last_modified: int,
                 name: str,
                 path: str,
                 read_only: bool,
                 script_id: str,
                 severity: str,
                 snippet: str):
        """
        :param str author: Name of user account that created the policy.
        """
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> int:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> str:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class GetHostAssurancePolicyForbiddenLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostAssurancePolicyPackagesBlackListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetHostAssurancePolicyPackagesWhiteListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetHostAssurancePolicyRequiredLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostAssurancePolicyScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetHostAssurancePolicyScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetHostAssurancePolicyScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetHostAssurancePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostAssurancePolicyTrustedBaseImageResult(dict):
    def __init__(__self__, *,
                 imagename: str,
                 registry: str):
        pulumi.set(__self__, "imagename", imagename)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> str:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetHostRuntimePolicyAuditingResult(dict):
    def __init__(__self__, *,
                 audit_all_network: Optional[bool] = None,
                 audit_all_processes: Optional[bool] = None,
                 audit_failed_login: Optional[bool] = None,
                 audit_os_user_activity: Optional[bool] = None,
                 audit_process_cmdline: Optional[bool] = None,
                 audit_success_login: Optional[bool] = None,
                 audit_user_account_management: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if audit_all_network is not None:
            pulumi.set(__self__, "audit_all_network", audit_all_network)
        if audit_all_processes is not None:
            pulumi.set(__self__, "audit_all_processes", audit_all_processes)
        if audit_failed_login is not None:
            pulumi.set(__self__, "audit_failed_login", audit_failed_login)
        if audit_os_user_activity is not None:
            pulumi.set(__self__, "audit_os_user_activity", audit_os_user_activity)
        if audit_process_cmdline is not None:
            pulumi.set(__self__, "audit_process_cmdline", audit_process_cmdline)
        if audit_success_login is not None:
            pulumi.set(__self__, "audit_success_login", audit_success_login)
        if audit_user_account_management is not None:
            pulumi.set(__self__, "audit_user_account_management", audit_user_account_management)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="auditAllNetwork")
    def audit_all_network(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_network")

    @property
    @pulumi.getter(name="auditAllProcesses")
    def audit_all_processes(self) -> Optional[bool]:
        return pulumi.get(self, "audit_all_processes")

    @property
    @pulumi.getter(name="auditFailedLogin")
    def audit_failed_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_failed_login")

    @property
    @pulumi.getter(name="auditOsUserActivity")
    def audit_os_user_activity(self) -> Optional[bool]:
        return pulumi.get(self, "audit_os_user_activity")

    @property
    @pulumi.getter(name="auditProcessCmdline")
    def audit_process_cmdline(self) -> Optional[bool]:
        return pulumi.get(self, "audit_process_cmdline")

    @property
    @pulumi.getter(name="auditSuccessLogin")
    def audit_success_login(self) -> Optional[bool]:
        return pulumi.get(self, "audit_success_login")

    @property
    @pulumi.getter(name="auditUserAccountManagement")
    def audit_user_account_management(self) -> Optional[bool]:
        return pulumi.get(self, "audit_user_account_management")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetHostRuntimePolicyFileIntegrityMonitoringResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 exceptional_monitored_files: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_processes: Optional[Sequence[str]] = None,
                 exceptional_monitored_files_users: Optional[Sequence[str]] = None,
                 monitored_files: Optional[Sequence[str]] = None,
                 monitored_files_attributes: Optional[bool] = None,
                 monitored_files_create: Optional[bool] = None,
                 monitored_files_delete: Optional[bool] = None,
                 monitored_files_modify: Optional[bool] = None,
                 monitored_files_processes: Optional[Sequence[str]] = None,
                 monitored_files_read: Optional[bool] = None,
                 monitored_files_users: Optional[Sequence[str]] = None):
        """
        :param bool enabled: If true, file integrity monitoring is enabled.
        :param Sequence[str] exceptional_monitored_files: List of paths to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_processes: List of processes to be excluded from monitoring.
        :param Sequence[str] exceptional_monitored_files_users: List of users to be excluded from monitoring.
        :param Sequence[str] monitored_files: List of paths to be monitored.
        :param bool monitored_files_attributes: Whether to monitor file attribute operations.
        :param bool monitored_files_create: Whether to monitor file create operations.
        :param bool monitored_files_delete: Whether to monitor file delete operations.
        :param bool monitored_files_modify: Whether to monitor file modify operations.
        :param Sequence[str] monitored_files_processes: List of processes associated with monitored files.
        :param bool monitored_files_read: Whether to monitor file read operations.
        :param Sequence[str] monitored_files_users: List of users associated with monitored files.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_monitored_files is not None:
            pulumi.set(__self__, "exceptional_monitored_files", exceptional_monitored_files)
        if exceptional_monitored_files_processes is not None:
            pulumi.set(__self__, "exceptional_monitored_files_processes", exceptional_monitored_files_processes)
        if exceptional_monitored_files_users is not None:
            pulumi.set(__self__, "exceptional_monitored_files_users", exceptional_monitored_files_users)
        if monitored_files is not None:
            pulumi.set(__self__, "monitored_files", monitored_files)
        if monitored_files_attributes is not None:
            pulumi.set(__self__, "monitored_files_attributes", monitored_files_attributes)
        if monitored_files_create is not None:
            pulumi.set(__self__, "monitored_files_create", monitored_files_create)
        if monitored_files_delete is not None:
            pulumi.set(__self__, "monitored_files_delete", monitored_files_delete)
        if monitored_files_modify is not None:
            pulumi.set(__self__, "monitored_files_modify", monitored_files_modify)
        if monitored_files_processes is not None:
            pulumi.set(__self__, "monitored_files_processes", monitored_files_processes)
        if monitored_files_read is not None:
            pulumi.set(__self__, "monitored_files_read", monitored_files_read)
        if monitored_files_users is not None:
            pulumi.set(__self__, "monitored_files_users", monitored_files_users)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If true, file integrity monitoring is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalMonitoredFiles")
    def exceptional_monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesProcesses")
    def exceptional_monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_processes")

    @property
    @pulumi.getter(name="exceptionalMonitoredFilesUsers")
    def exceptional_monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from monitoring.
        """
        return pulumi.get(self, "exceptional_monitored_files_users")

    @property
    @pulumi.getter(name="monitoredFiles")
    def monitored_files(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_files")

    @property
    @pulumi.getter(name="monitoredFilesAttributes")
    def monitored_files_attributes(self) -> Optional[bool]:
        """
        Whether to monitor file attribute operations.
        """
        return pulumi.get(self, "monitored_files_attributes")

    @property
    @pulumi.getter(name="monitoredFilesCreate")
    def monitored_files_create(self) -> Optional[bool]:
        """
        Whether to monitor file create operations.
        """
        return pulumi.get(self, "monitored_files_create")

    @property
    @pulumi.getter(name="monitoredFilesDelete")
    def monitored_files_delete(self) -> Optional[bool]:
        """
        Whether to monitor file delete operations.
        """
        return pulumi.get(self, "monitored_files_delete")

    @property
    @pulumi.getter(name="monitoredFilesModify")
    def monitored_files_modify(self) -> Optional[bool]:
        """
        Whether to monitor file modify operations.
        """
        return pulumi.get(self, "monitored_files_modify")

    @property
    @pulumi.getter(name="monitoredFilesProcesses")
    def monitored_files_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_processes")

    @property
    @pulumi.getter(name="monitoredFilesRead")
    def monitored_files_read(self) -> Optional[bool]:
        """
        Whether to monitor file read operations.
        """
        return pulumi.get(self, "monitored_files_read")

    @property
    @pulumi.getter(name="monitoredFilesUsers")
    def monitored_files_users(self) -> Optional[Sequence[str]]:
        """
        List of users associated with monitored files.
        """
        return pulumi.get(self, "monitored_files_users")


@pulumi.output_type
class GetHostRuntimePolicyMalwareScanOptionResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exclude_directories: Optional[Sequence[str]] = None,
                 exclude_processes: Optional[Sequence[str]] = None,
                 include_directories: Optional[Sequence[str]] = None):
        """
        :param str action: Set Action, Defaults to 'Alert' when empty
        :param bool enabled: Defines if enabled or not
        :param Sequence[str] exclude_directories: List of registry paths to be excluded from being protected.
        :param Sequence[str] exclude_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] include_directories: List of registry paths to be excluded from being protected.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_directories is not None:
            pulumi.set(__self__, "exclude_directories", exclude_directories)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if include_directories is not None:
            pulumi.set(__self__, "include_directories", include_directories)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Set Action, Defaults to 'Alert' when empty
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Defines if enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeDirectories")
    def exclude_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_directories")

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "exclude_processes")

    @property
    @pulumi.getter(name="includeDirectories")
    def include_directories(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "include_directories")


@pulumi.output_type
class GetHostRuntimePolicyPackageBlockResult(dict):
    def __init__(__self__, *,
                 block_packages_processes: Optional[Sequence[str]] = None,
                 block_packages_users: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 exceptional_block_packages_files: Optional[Sequence[str]] = None,
                 exceptional_block_packages_processes: Optional[Sequence[str]] = None,
                 exceptional_block_packages_users: Optional[Sequence[str]] = None,
                 packages_black_lists: Optional[Sequence[str]] = None):
        if block_packages_processes is not None:
            pulumi.set(__self__, "block_packages_processes", block_packages_processes)
        if block_packages_users is not None:
            pulumi.set(__self__, "block_packages_users", block_packages_users)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exceptional_block_packages_files is not None:
            pulumi.set(__self__, "exceptional_block_packages_files", exceptional_block_packages_files)
        if exceptional_block_packages_processes is not None:
            pulumi.set(__self__, "exceptional_block_packages_processes", exceptional_block_packages_processes)
        if exceptional_block_packages_users is not None:
            pulumi.set(__self__, "exceptional_block_packages_users", exceptional_block_packages_users)
        if packages_black_lists is not None:
            pulumi.set(__self__, "packages_black_lists", packages_black_lists)

    @property
    @pulumi.getter(name="blockPackagesProcesses")
    def block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_processes")

    @property
    @pulumi.getter(name="blockPackagesUsers")
    def block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "block_packages_users")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesFiles")
    def exceptional_block_packages_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_files")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesProcesses")
    def exceptional_block_packages_processes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_processes")

    @property
    @pulumi.getter(name="exceptionalBlockPackagesUsers")
    def exceptional_block_packages_users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exceptional_block_packages_users")

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages_black_lists")


@pulumi.output_type
class GetHostRuntimePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str name: Name assigned to the attribute.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostRuntimePolicyWindowsRegistryMonitoringResult(dict):
    def __init__(__self__, *,
                 excluded_paths: Sequence[str],
                 excluded_processes: Sequence[str],
                 excluded_users: Sequence[str],
                 monitor_attributes: bool,
                 monitor_create: bool,
                 monitor_delete: bool,
                 monitor_modify: bool,
                 monitor_read: bool,
                 monitored_paths: Sequence[str],
                 monitored_processes: Sequence[str],
                 monitored_users: Sequence[str]):
        """
        :param Sequence[str] excluded_paths: List of paths to be excluded from being monitored.
        :param Sequence[str] excluded_processes: List of registry processes to be excluded from being monitored.
        :param Sequence[str] excluded_users: List of registry users to be excluded from being monitored.
        :param bool monitor_attributes: If true, add attributes operations will be monitored.
        :param bool monitor_create: If true, create operations will be monitored.
        :param bool monitor_delete: If true, deletion operations will be monitored.
        :param bool monitor_modify: If true, modification operations will be monitored.
        :param bool monitor_read: If true, read operations will be monitored.
        :param Sequence[str] monitored_paths: List of paths to be monitored.
        :param Sequence[str] monitored_processes: List of registry processes to be monitored.
        :param Sequence[str] monitored_users: List of registry users to be monitored.
        """
        pulumi.set(__self__, "excluded_paths", excluded_paths)
        pulumi.set(__self__, "excluded_processes", excluded_processes)
        pulumi.set(__self__, "excluded_users", excluded_users)
        pulumi.set(__self__, "monitor_attributes", monitor_attributes)
        pulumi.set(__self__, "monitor_create", monitor_create)
        pulumi.set(__self__, "monitor_delete", monitor_delete)
        pulumi.set(__self__, "monitor_modify", monitor_modify)
        pulumi.set(__self__, "monitor_read", monitor_read)
        pulumi.set(__self__, "monitored_paths", monitored_paths)
        pulumi.set(__self__, "monitored_processes", monitored_processes)
        pulumi.set(__self__, "monitored_users", monitored_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Sequence[str]:
        """
        List of paths to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Sequence[str]:
        """
        List of registry processes to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Sequence[str]:
        """
        List of registry users to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="monitorAttributes")
    def monitor_attributes(self) -> bool:
        """
        If true, add attributes operations will be monitored.
        """
        return pulumi.get(self, "monitor_attributes")

    @property
    @pulumi.getter(name="monitorCreate")
    def monitor_create(self) -> bool:
        """
        If true, create operations will be monitored.
        """
        return pulumi.get(self, "monitor_create")

    @property
    @pulumi.getter(name="monitorDelete")
    def monitor_delete(self) -> bool:
        """
        If true, deletion operations will be monitored.
        """
        return pulumi.get(self, "monitor_delete")

    @property
    @pulumi.getter(name="monitorModify")
    def monitor_modify(self) -> bool:
        """
        If true, modification operations will be monitored.
        """
        return pulumi.get(self, "monitor_modify")

    @property
    @pulumi.getter(name="monitorRead")
    def monitor_read(self) -> bool:
        """
        If true, read operations will be monitored.
        """
        return pulumi.get(self, "monitor_read")

    @property
    @pulumi.getter(name="monitoredPaths")
    def monitored_paths(self) -> Sequence[str]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_paths")

    @property
    @pulumi.getter(name="monitoredProcesses")
    def monitored_processes(self) -> Sequence[str]:
        """
        List of registry processes to be monitored.
        """
        return pulumi.get(self, "monitored_processes")

    @property
    @pulumi.getter(name="monitoredUsers")
    def monitored_users(self) -> Sequence[str]:
        """
        List of registry users to be monitored.
        """
        return pulumi.get(self, "monitored_users")


@pulumi.output_type
class GetHostRuntimePolicyWindowsRegistryProtectionResult(dict):
    def __init__(__self__, *,
                 excluded_paths: Sequence[str],
                 excluded_processes: Sequence[str],
                 excluded_users: Sequence[str],
                 protected_paths: Sequence[str],
                 protected_processes: Sequence[str],
                 protected_users: Sequence[str]):
        """
        :param Sequence[str] excluded_paths: List of registry paths to be excluded from being protected.
        :param Sequence[str] excluded_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] excluded_users: List of registry paths to be users from being protected.
        :param Sequence[str] protected_paths: List of registry paths to be protected.
        :param Sequence[str] protected_processes: List of registry processes to be protected.
        :param Sequence[str] protected_users: List of registry users to be protected.
        """
        pulumi.set(__self__, "excluded_paths", excluded_paths)
        pulumi.set(__self__, "excluded_processes", excluded_processes)
        pulumi.set(__self__, "excluded_users", excluded_users)
        pulumi.set(__self__, "protected_paths", protected_paths)
        pulumi.set(__self__, "protected_processes", protected_processes)
        pulumi.set(__self__, "protected_users", protected_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Sequence[str]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Sequence[str]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Sequence[str]:
        """
        List of registry paths to be users from being protected.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="protectedPaths")
    def protected_paths(self) -> Sequence[str]:
        """
        List of registry paths to be protected.
        """
        return pulumi.get(self, "protected_paths")

    @property
    @pulumi.getter(name="protectedProcesses")
    def protected_processes(self) -> Sequence[str]:
        """
        List of registry processes to be protected.
        """
        return pulumi.get(self, "protected_processes")

    @property
    @pulumi.getter(name="protectedUsers")
    def protected_users(self) -> Sequence[str]:
        """
        List of registry users to be protected.
        """
        return pulumi.get(self, "protected_users")


@pulumi.output_type
class GetImageAssuranceChecksPerformedResult(dict):
    def __init__(__self__, *,
                 assurance_type: str,
                 blocking: bool,
                 control: str,
                 dta_skipped: bool,
                 dta_skipped_reason: str,
                 failed: bool,
                 policy_name: str):
        """
        :param str assurance_type: The type of the Assurance Policy the check originated from.
        :param bool blocking: Whether the check is blocking (i.e. a failure should trigger a disallow).
        :param str control: The name of the image assurance control.
        :param bool dta_skipped: If DTA was skipped.
        :param str dta_skipped_reason: The reason why DTA was skipped.
        :param bool failed: Whether the image failed the check.
        :param str policy_name: The name of the Image Assurance Policy the check originated from.
        """
        pulumi.set(__self__, "assurance_type", assurance_type)
        pulumi.set(__self__, "blocking", blocking)
        pulumi.set(__self__, "control", control)
        pulumi.set(__self__, "dta_skipped", dta_skipped)
        pulumi.set(__self__, "dta_skipped_reason", dta_skipped_reason)
        pulumi.set(__self__, "failed", failed)
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> str:
        """
        The type of the Assurance Policy the check originated from.
        """
        return pulumi.get(self, "assurance_type")

    @property
    @pulumi.getter
    def blocking(self) -> bool:
        """
        Whether the check is blocking (i.e. a failure should trigger a disallow).
        """
        return pulumi.get(self, "blocking")

    @property
    @pulumi.getter
    def control(self) -> str:
        """
        The name of the image assurance control.
        """
        return pulumi.get(self, "control")

    @property
    @pulumi.getter(name="dtaSkipped")
    def dta_skipped(self) -> bool:
        """
        If DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped")

    @property
    @pulumi.getter(name="dtaSkippedReason")
    def dta_skipped_reason(self) -> str:
        """
        The reason why DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped_reason")

    @property
    @pulumi.getter
    def failed(self) -> bool:
        """
        Whether the image failed the check.
        """
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        The name of the Image Assurance Policy the check originated from.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetImageAssurancePolicyAutoScanTimeResult(dict):
    def __init__(__self__, *,
                 iteration: int,
                 iteration_type: str,
                 time: str,
                 week_days: Sequence[str]):
        pulumi.set(__self__, "iteration", iteration)
        pulumi.set(__self__, "iteration_type", iteration_type)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> int:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> str:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Sequence[str]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class GetImageAssurancePolicyCustomCheckResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 engine: str,
                 last_modified: int,
                 name: str,
                 path: str,
                 read_only: bool,
                 script_id: str,
                 severity: str,
                 snippet: str):
        """
        :param str author: Name of user account that created the policy.
        """
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> int:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> str:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class GetImageAssurancePolicyForbiddenLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageAssurancePolicyPackagesBlackListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetImageAssurancePolicyPackagesWhiteListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetImageAssurancePolicyRequiredLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageAssurancePolicyScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetImageAssurancePolicyScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetImageAssurancePolicyScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetImageAssurancePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageAssurancePolicyTrustedBaseImageResult(dict):
    def __init__(__self__, *,
                 imagename: str,
                 registry: str):
        pulumi.set(__self__, "imagename", imagename)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> str:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetImageHistoryResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created: str,
                 created_by: str,
                 id: str,
                 size: int):
        """
        :param str comment: The commit comment for the image, if any.
        :param str created: The date of creation of the layer.
        :param str created_by: The command that generated the layer.
        :param str id: The image ID of the layer (if any).
        :param int size: The size of the image.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        The commit comment for the image, if any.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The date of creation of the layer.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The command that generated the layer.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The image ID of the layer (if any).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the image.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetImageVulnerabilityResult(dict):
    def __init__(__self__, *,
                 ack_author: str,
                 ack_comment: str,
                 ack_expiration_configured_at: str,
                 ack_expiration_configured_by: str,
                 ack_expiration_days: int,
                 ack_scope: str,
                 acknowledge_date: str,
                 ancestor_pkg: str,
                 aqua_score: float,
                 aqua_score_classification: str,
                 aqua_scoring_system: str,
                 aqua_severity: str,
                 aqua_severity_classification: str,
                 aqua_vectors: str,
                 audit_events_count: int,
                 block_events_count: int,
                 classification: str,
                 description: str,
                 digest: str,
                 exploit_reference: str,
                 exploit_type: str,
                 first_found_date: str,
                 fix_version: str,
                 image_name: str,
                 last_found_date: str,
                 modification_date: str,
                 name: str,
                 nvd_cvss2_score: float,
                 nvd_cvss2_vectors: str,
                 nvd_cvss3_score: float,
                 nvd_cvss3_severity: str,
                 nvd_cvss3_vectors: str,
                 nvd_severity: str,
                 nvd_url: str,
                 os: str,
                 os_version: str,
                 permission: str,
                 publish_date: str,
                 registry: str,
                 repository: str,
                 resource_architecture: str,
                 resource_cpe: str,
                 resource_format: str,
                 resource_hash: str,
                 resource_licenses: Sequence[str],
                 resource_name: str,
                 resource_path: str,
                 resource_type: str,
                 resource_version: str,
                 severity_classification: str,
                 solution: str,
                 temporal_vector: str,
                 v_patch_applied_by: str,
                 v_patch_applied_on: str,
                 v_patch_enforced_by: str,
                 v_patch_enforced_on: str,
                 v_patch_policy_enforce: bool,
                 v_patch_policy_name: str,
                 v_patch_reverted_by: str,
                 v_patch_reverted_on: str,
                 v_patch_status: str,
                 vendor_cvss2_score: float,
                 vendor_cvss2_vectors: str,
                 vendor_severity: str,
                 vendor_statement: str,
                 vendor_url: str):
        """
        :param str ancestor_pkg: The ancestor of this package.
        :param float aqua_score: The score generated for the vulnerability by Aqua.
        :param str aqua_score_classification: Score classification by Aqua.
        :param str aqua_scoring_system: The score system for the vulnerability by Aqua
        :param str aqua_severity: The severity generated for the vulnerability by Aqua.
        :param str aqua_severity_classification: Classification of the severity defined by Aqua.
        :param str aqua_vectors: The vectors generated for the vulnerability by Aqua
        :param int audit_events_count: Number of audit events.
        :param int block_events_count: Number of blocked events.
        :param str classification: Classification of the vulnerability.
        :param str description: The description of the vulnerability.
        :param str digest: The content digest of the image.
        :param str exploit_reference: Reference of the exploit.
        :param str exploit_type: Type of the exploit.
        :param str first_found_date: The date when this vulnerability was first found.
        :param str fix_version: Fixed version of the resource.
        :param str image_name: Name of the image.
        :param str last_found_date: The date when this vulnerability was last found.
        :param str modification_date: Thhe date when this vulnerability was modified.
        :param str name: The name of the vulnerability.
        :param float nvd_cvss2_score: CVSS2 score by NVD
        :param str nvd_cvss2_vectors: CVSS2 vectors by NVD
        :param float nvd_cvss3_score: CVSS3 score by NVD
        :param str nvd_cvss3_severity: CVSS3 severity by NVD
        :param str nvd_cvss3_vectors: CVSS3 vectors by NVD
        :param str nvd_severity: Type of the severity identified by NVD.
        :param str nvd_url: URL of the details of this vulnerability by NVD.
        :param str os: Name of the Operating System.
        :param str os_version: The version of the OS.
        :param str permission: permission on the image
        :param str publish_date: The date this vulnerability was published.
        :param str registry: Registry of the image.
        :param str repository: Repository of the image.
        :param str resource_architecture: Architecture of the resource.
        :param str resource_cpe: Common Platform Enumeration (CPE) of the resource.
        :param str resource_format: Code format of the resource (java, apk etc.).
        :param str resource_hash: Hash of the resource.
        :param Sequence[str] resource_licenses: List of license supported by the resource.
        :param str resource_name: Name of the resource.
        :param str resource_path: Path of the resource.
        :param str resource_type: Type of the resource
        :param str resource_version: Version of the resource.
        :param str severity_classification: Classification of the severity.
        :param str solution: Solution for the vulnerability.
        """
        pulumi.set(__self__, "ack_author", ack_author)
        pulumi.set(__self__, "ack_comment", ack_comment)
        pulumi.set(__self__, "ack_expiration_configured_at", ack_expiration_configured_at)
        pulumi.set(__self__, "ack_expiration_configured_by", ack_expiration_configured_by)
        pulumi.set(__self__, "ack_expiration_days", ack_expiration_days)
        pulumi.set(__self__, "ack_scope", ack_scope)
        pulumi.set(__self__, "acknowledge_date", acknowledge_date)
        pulumi.set(__self__, "ancestor_pkg", ancestor_pkg)
        pulumi.set(__self__, "aqua_score", aqua_score)
        pulumi.set(__self__, "aqua_score_classification", aqua_score_classification)
        pulumi.set(__self__, "aqua_scoring_system", aqua_scoring_system)
        pulumi.set(__self__, "aqua_severity", aqua_severity)
        pulumi.set(__self__, "aqua_severity_classification", aqua_severity_classification)
        pulumi.set(__self__, "aqua_vectors", aqua_vectors)
        pulumi.set(__self__, "audit_events_count", audit_events_count)
        pulumi.set(__self__, "block_events_count", block_events_count)
        pulumi.set(__self__, "classification", classification)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "exploit_reference", exploit_reference)
        pulumi.set(__self__, "exploit_type", exploit_type)
        pulumi.set(__self__, "first_found_date", first_found_date)
        pulumi.set(__self__, "fix_version", fix_version)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "last_found_date", last_found_date)
        pulumi.set(__self__, "modification_date", modification_date)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nvd_cvss2_score", nvd_cvss2_score)
        pulumi.set(__self__, "nvd_cvss2_vectors", nvd_cvss2_vectors)
        pulumi.set(__self__, "nvd_cvss3_score", nvd_cvss3_score)
        pulumi.set(__self__, "nvd_cvss3_severity", nvd_cvss3_severity)
        pulumi.set(__self__, "nvd_cvss3_vectors", nvd_cvss3_vectors)
        pulumi.set(__self__, "nvd_severity", nvd_severity)
        pulumi.set(__self__, "nvd_url", nvd_url)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "publish_date", publish_date)
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "resource_architecture", resource_architecture)
        pulumi.set(__self__, "resource_cpe", resource_cpe)
        pulumi.set(__self__, "resource_format", resource_format)
        pulumi.set(__self__, "resource_hash", resource_hash)
        pulumi.set(__self__, "resource_licenses", resource_licenses)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_path", resource_path)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "severity_classification", severity_classification)
        pulumi.set(__self__, "solution", solution)
        pulumi.set(__self__, "temporal_vector", temporal_vector)
        pulumi.set(__self__, "v_patch_applied_by", v_patch_applied_by)
        pulumi.set(__self__, "v_patch_applied_on", v_patch_applied_on)
        pulumi.set(__self__, "v_patch_enforced_by", v_patch_enforced_by)
        pulumi.set(__self__, "v_patch_enforced_on", v_patch_enforced_on)
        pulumi.set(__self__, "v_patch_policy_enforce", v_patch_policy_enforce)
        pulumi.set(__self__, "v_patch_policy_name", v_patch_policy_name)
        pulumi.set(__self__, "v_patch_reverted_by", v_patch_reverted_by)
        pulumi.set(__self__, "v_patch_reverted_on", v_patch_reverted_on)
        pulumi.set(__self__, "v_patch_status", v_patch_status)
        pulumi.set(__self__, "vendor_cvss2_score", vendor_cvss2_score)
        pulumi.set(__self__, "vendor_cvss2_vectors", vendor_cvss2_vectors)
        pulumi.set(__self__, "vendor_severity", vendor_severity)
        pulumi.set(__self__, "vendor_statement", vendor_statement)
        pulumi.set(__self__, "vendor_url", vendor_url)

    @property
    @pulumi.getter(name="ackAuthor")
    def ack_author(self) -> str:
        return pulumi.get(self, "ack_author")

    @property
    @pulumi.getter(name="ackComment")
    def ack_comment(self) -> str:
        return pulumi.get(self, "ack_comment")

    @property
    @pulumi.getter(name="ackExpirationConfiguredAt")
    def ack_expiration_configured_at(self) -> str:
        return pulumi.get(self, "ack_expiration_configured_at")

    @property
    @pulumi.getter(name="ackExpirationConfiguredBy")
    def ack_expiration_configured_by(self) -> str:
        return pulumi.get(self, "ack_expiration_configured_by")

    @property
    @pulumi.getter(name="ackExpirationDays")
    def ack_expiration_days(self) -> int:
        return pulumi.get(self, "ack_expiration_days")

    @property
    @pulumi.getter(name="ackScope")
    def ack_scope(self) -> str:
        return pulumi.get(self, "ack_scope")

    @property
    @pulumi.getter(name="acknowledgeDate")
    def acknowledge_date(self) -> str:
        return pulumi.get(self, "acknowledge_date")

    @property
    @pulumi.getter(name="ancestorPkg")
    def ancestor_pkg(self) -> str:
        """
        The ancestor of this package.
        """
        return pulumi.get(self, "ancestor_pkg")

    @property
    @pulumi.getter(name="aquaScore")
    def aqua_score(self) -> float:
        """
        The score generated for the vulnerability by Aqua.
        """
        return pulumi.get(self, "aqua_score")

    @property
    @pulumi.getter(name="aquaScoreClassification")
    def aqua_score_classification(self) -> str:
        """
        Score classification by Aqua.
        """
        return pulumi.get(self, "aqua_score_classification")

    @property
    @pulumi.getter(name="aquaScoringSystem")
    def aqua_scoring_system(self) -> str:
        """
        The score system for the vulnerability by Aqua
        """
        return pulumi.get(self, "aqua_scoring_system")

    @property
    @pulumi.getter(name="aquaSeverity")
    def aqua_severity(self) -> str:
        """
        The severity generated for the vulnerability by Aqua.
        """
        return pulumi.get(self, "aqua_severity")

    @property
    @pulumi.getter(name="aquaSeverityClassification")
    def aqua_severity_classification(self) -> str:
        """
        Classification of the severity defined by Aqua.
        """
        return pulumi.get(self, "aqua_severity_classification")

    @property
    @pulumi.getter(name="aquaVectors")
    def aqua_vectors(self) -> str:
        """
        The vectors generated for the vulnerability by Aqua
        """
        return pulumi.get(self, "aqua_vectors")

    @property
    @pulumi.getter(name="auditEventsCount")
    def audit_events_count(self) -> int:
        """
        Number of audit events.
        """
        return pulumi.get(self, "audit_events_count")

    @property
    @pulumi.getter(name="blockEventsCount")
    def block_events_count(self) -> int:
        """
        Number of blocked events.
        """
        return pulumi.get(self, "block_events_count")

    @property
    @pulumi.getter
    def classification(self) -> str:
        """
        Classification of the vulnerability.
        """
        return pulumi.get(self, "classification")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the vulnerability.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def digest(self) -> str:
        """
        The content digest of the image.
        """
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter(name="exploitReference")
    def exploit_reference(self) -> str:
        """
        Reference of the exploit.
        """
        return pulumi.get(self, "exploit_reference")

    @property
    @pulumi.getter(name="exploitType")
    def exploit_type(self) -> str:
        """
        Type of the exploit.
        """
        return pulumi.get(self, "exploit_type")

    @property
    @pulumi.getter(name="firstFoundDate")
    def first_found_date(self) -> str:
        """
        The date when this vulnerability was first found.
        """
        return pulumi.get(self, "first_found_date")

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> str:
        """
        Fixed version of the resource.
        """
        return pulumi.get(self, "fix_version")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        Name of the image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="lastFoundDate")
    def last_found_date(self) -> str:
        """
        The date when this vulnerability was last found.
        """
        return pulumi.get(self, "last_found_date")

    @property
    @pulumi.getter(name="modificationDate")
    def modification_date(self) -> str:
        """
        Thhe date when this vulnerability was modified.
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the vulnerability.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nvdCvss2Score")
    def nvd_cvss2_score(self) -> float:
        """
        CVSS2 score by NVD
        """
        return pulumi.get(self, "nvd_cvss2_score")

    @property
    @pulumi.getter(name="nvdCvss2Vectors")
    def nvd_cvss2_vectors(self) -> str:
        """
        CVSS2 vectors by NVD
        """
        return pulumi.get(self, "nvd_cvss2_vectors")

    @property
    @pulumi.getter(name="nvdCvss3Score")
    def nvd_cvss3_score(self) -> float:
        """
        CVSS3 score by NVD
        """
        return pulumi.get(self, "nvd_cvss3_score")

    @property
    @pulumi.getter(name="nvdCvss3Severity")
    def nvd_cvss3_severity(self) -> str:
        """
        CVSS3 severity by NVD
        """
        return pulumi.get(self, "nvd_cvss3_severity")

    @property
    @pulumi.getter(name="nvdCvss3Vectors")
    def nvd_cvss3_vectors(self) -> str:
        """
        CVSS3 vectors by NVD
        """
        return pulumi.get(self, "nvd_cvss3_vectors")

    @property
    @pulumi.getter(name="nvdSeverity")
    def nvd_severity(self) -> str:
        """
        Type of the severity identified by NVD.
        """
        return pulumi.get(self, "nvd_severity")

    @property
    @pulumi.getter(name="nvdUrl")
    def nvd_url(self) -> str:
        """
        URL of the details of this vulnerability by NVD.
        """
        return pulumi.get(self, "nvd_url")

    @property
    @pulumi.getter
    def os(self) -> str:
        """
        Name of the Operating System.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        The version of the OS.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        permission on the image
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="publishDate")
    def publish_date(self) -> str:
        """
        The date this vulnerability was published.
        """
        return pulumi.get(self, "publish_date")

    @property
    @pulumi.getter
    def registry(self) -> str:
        """
        Registry of the image.
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        Repository of the image.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="resourceArchitecture")
    def resource_architecture(self) -> str:
        """
        Architecture of the resource.
        """
        return pulumi.get(self, "resource_architecture")

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> str:
        """
        Common Platform Enumeration (CPE) of the resource.
        """
        return pulumi.get(self, "resource_cpe")

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> str:
        """
        Code format of the resource (java, apk etc.).
        """
        return pulumi.get(self, "resource_format")

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> str:
        """
        Hash of the resource.
        """
        return pulumi.get(self, "resource_hash")

    @property
    @pulumi.getter(name="resourceLicenses")
    def resource_licenses(self) -> Sequence[str]:
        """
        List of license supported by the resource.
        """
        return pulumi.get(self, "resource_licenses")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        Name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> str:
        """
        Path of the resource.
        """
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> str:
        """
        Version of the resource.
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter(name="severityClassification")
    def severity_classification(self) -> str:
        """
        Classification of the severity.
        """
        return pulumi.get(self, "severity_classification")

    @property
    @pulumi.getter
    def solution(self) -> str:
        """
        Solution for the vulnerability.
        """
        return pulumi.get(self, "solution")

    @property
    @pulumi.getter(name="temporalVector")
    def temporal_vector(self) -> str:
        return pulumi.get(self, "temporal_vector")

    @property
    @pulumi.getter(name="vPatchAppliedBy")
    def v_patch_applied_by(self) -> str:
        return pulumi.get(self, "v_patch_applied_by")

    @property
    @pulumi.getter(name="vPatchAppliedOn")
    def v_patch_applied_on(self) -> str:
        return pulumi.get(self, "v_patch_applied_on")

    @property
    @pulumi.getter(name="vPatchEnforcedBy")
    def v_patch_enforced_by(self) -> str:
        return pulumi.get(self, "v_patch_enforced_by")

    @property
    @pulumi.getter(name="vPatchEnforcedOn")
    def v_patch_enforced_on(self) -> str:
        return pulumi.get(self, "v_patch_enforced_on")

    @property
    @pulumi.getter(name="vPatchPolicyEnforce")
    def v_patch_policy_enforce(self) -> bool:
        return pulumi.get(self, "v_patch_policy_enforce")

    @property
    @pulumi.getter(name="vPatchPolicyName")
    def v_patch_policy_name(self) -> str:
        return pulumi.get(self, "v_patch_policy_name")

    @property
    @pulumi.getter(name="vPatchRevertedBy")
    def v_patch_reverted_by(self) -> str:
        return pulumi.get(self, "v_patch_reverted_by")

    @property
    @pulumi.getter(name="vPatchRevertedOn")
    def v_patch_reverted_on(self) -> str:
        return pulumi.get(self, "v_patch_reverted_on")

    @property
    @pulumi.getter(name="vPatchStatus")
    def v_patch_status(self) -> str:
        return pulumi.get(self, "v_patch_status")

    @property
    @pulumi.getter(name="vendorCvss2Score")
    def vendor_cvss2_score(self) -> float:
        return pulumi.get(self, "vendor_cvss2_score")

    @property
    @pulumi.getter(name="vendorCvss2Vectors")
    def vendor_cvss2_vectors(self) -> str:
        return pulumi.get(self, "vendor_cvss2_vectors")

    @property
    @pulumi.getter(name="vendorSeverity")
    def vendor_severity(self) -> str:
        return pulumi.get(self, "vendor_severity")

    @property
    @pulumi.getter(name="vendorStatement")
    def vendor_statement(self) -> str:
        return pulumi.get(self, "vendor_statement")

    @property
    @pulumi.getter(name="vendorUrl")
    def vendor_url(self) -> str:
        return pulumi.get(self, "vendor_url")


@pulumi.output_type
class GetIntegrationRegistriesOptionResult(dict):
    def __init__(__self__, *,
                 option: Optional[str] = None,
                 value: Optional[str] = None):
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[str]:
        return pulumi.get(self, "option")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetIntegrationRegistriesWebhookResult(dict):
    def __init__(__self__, *,
                 auth_token: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 un_quarantine: Optional[bool] = None,
                 url: Optional[str] = None):
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if un_quarantine is not None:
            pulumi.set(__self__, "un_quarantine", un_quarantine)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="unQuarantine")
    def un_quarantine(self) -> Optional[bool]:
        return pulumi.get(self, "un_quarantine")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetIntegrationRegistryOptionResult(dict):
    def __init__(__self__, *,
                 option: Optional[str] = None,
                 value: Optional[str] = None):
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def option(self) -> Optional[str]:
        return pulumi.get(self, "option")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetIntegrationRegistryWebhookResult(dict):
    def __init__(__self__, *,
                 auth_token: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 un_quarantine: Optional[bool] = None,
                 url: Optional[str] = None):
        if auth_token is not None:
            pulumi.set(__self__, "auth_token", auth_token)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if un_quarantine is not None:
            pulumi.set(__self__, "un_quarantine", un_quarantine)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="unQuarantine")
    def un_quarantine(self) -> Optional[bool]:
        return pulumi.get(self, "un_quarantine")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetKubernetesAssurancePolicyAutoScanTimeResult(dict):
    def __init__(__self__, *,
                 iteration: int,
                 iteration_type: str,
                 time: str,
                 week_days: Sequence[str]):
        pulumi.set(__self__, "iteration", iteration)
        pulumi.set(__self__, "iteration_type", iteration_type)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> int:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> str:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Sequence[str]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class GetKubernetesAssurancePolicyCustomCheckResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 engine: str,
                 last_modified: int,
                 name: str,
                 path: str,
                 read_only: bool,
                 script_id: str,
                 severity: str,
                 snippet: str):
        """
        :param str author: Name of user account that created the policy.
        """
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Name of user account that created the policy.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> int:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> str:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class GetKubernetesAssurancePolicyForbiddenLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetKubernetesAssurancePolicyPackagesBlackListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetKubernetesAssurancePolicyPackagesWhiteListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetKubernetesAssurancePolicyRequiredLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetKubernetesAssurancePolicyScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetKubernetesAssurancePolicyScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetKubernetesAssurancePolicyScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetKubernetesAssurancePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetKubernetesAssurancePolicyTrustedBaseImageResult(dict):
    def __init__(__self__, *,
                 imagename: str,
                 registry: str):
        pulumi.set(__self__, "imagename", imagename)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> str:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetNotificationsEmailResult(dict):
    def __init__(__self__, *,
                 author: str,
                 id: int,
                 last_updated: str,
                 name: str,
                 properties: Mapping[str, str],
                 template: Mapping[str, str],
                 type: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNotificationsJiraResult(dict):
    def __init__(__self__, *,
                 author: str,
                 id: int,
                 last_updated: str,
                 name: str,
                 properties: Mapping[str, str],
                 template: Mapping[str, str],
                 type: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNotificationsServicenowResult(dict):
    def __init__(__self__, *,
                 author: str,
                 id: int,
                 last_updated: str,
                 name: str,
                 properties: Mapping[str, str],
                 template: Mapping[str, str],
                 type: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNotificationsSlackResult(dict):
    def __init__(__self__, *,
                 author: str,
                 id: int,
                 last_updated: str,
                 name: str,
                 properties: Mapping[str, str],
                 template: Mapping[str, str],
                 type: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNotificationsSplunkResult(dict):
    def __init__(__self__, *,
                 author: str,
                 id: int,
                 last_updated: str,
                 name: str,
                 properties: Mapping[str, str],
                 template: Mapping[str, str],
                 type: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNotificationsTeamResult(dict):
    def __init__(__self__, *,
                 author: str,
                 id: int,
                 last_updated: str,
                 name: str,
                 properties: Mapping[str, str],
                 template: Mapping[str, str],
                 type: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNotificationsWebhookResult(dict):
    def __init__(__self__, *,
                 author: str,
                 id: int,
                 last_updated: str,
                 name: str,
                 properties: Mapping[str, str],
                 template: Mapping[str, str],
                 type: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "template", template)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def template(self) -> Mapping[str, str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPermissionsSetsPermissionsSetResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 author: str,
                 description: str,
                 is_super: bool,
                 name: str,
                 ui_access: bool,
                 updated_at: str):
        """
        :param Sequence[str] actions: List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
        :param str author: The name of the user who created the Permission Set.
        :param str description: Free text description for the Permission Set.
        :param bool is_super: Give the Permission Set full access, meaning all actions are allowed without restriction.
        :param str name: The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
        :param bool ui_access: Whether to allow UI access for users with this Permission Set.
        :param str updated_at: The date of the last modification of the Role.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_super", is_super)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ui_access", ui_access)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        The name of the user who created the Permission Set.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Free text description for the Permission Set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSuper")
    def is_super(self) -> bool:
        """
        Give the Permission Set full access, meaning all actions are allowed without restriction.
        """
        return pulumi.get(self, "is_super")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="uiAccess")
    def ui_access(self) -> bool:
        """
        Whether to allow UI access for users with this Permission Set.
        """
        return pulumi.get(self, "ui_access")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The date of the last modification of the Role.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetRolesMappingLdapResult(dict):
    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class GetRolesMappingOauth2Result(dict):
    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class GetRolesMappingOpenidResult(dict):
    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class GetRolesMappingSaasRolesMappingResult(dict):
    def __init__(__self__, *,
                 account_id: int,
                 created: str,
                 csp_role: str,
                 id: int,
                 saml_groups: Sequence[str]):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "csp_role", csp_role)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "saml_groups", saml_groups)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> int:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="cspRole")
    def csp_role(self) -> str:
        return pulumi.get(self, "csp_role")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="samlGroups")
    def saml_groups(self) -> Sequence[str]:
        return pulumi.get(self, "saml_groups")


@pulumi.output_type
class GetRolesMappingSamlResult(dict):
    def __init__(__self__, *,
                 role_mapping: Mapping[str, str]):
        """
        :param Mapping[str, str] role_mapping: Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        pulumi.set(__self__, "role_mapping", role_mapping)

    @property
    @pulumi.getter(name="roleMapping")
    def role_mapping(self) -> Mapping[str, str]:
        """
        Role Mapping is used to define the IdP role that the user will assume in Aqua
        """
        return pulumi.get(self, "role_mapping")


@pulumi.output_type
class GetRolesRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 permission: str,
                 scopes: Sequence[str],
                 updated_at: str):
        """
        :param str description: Free text description for the role.
        :param str name: The name of the role, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
        :param str permission: The name of the Permission Set that will affect the users assigned to this specific Role.
        :param Sequence[str] scopes: List of Application Scopes that will affect the users assigned to this specific Role.
        :param str updated_at: The date of the last modification of the role.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Free text description for the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        The name of the Permission Set that will affect the users assigned to this specific Role.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        """
        List of Application Scopes that will affect the users assigned to this specific Role.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The date of the last modification of the role.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetServiceScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str name: Name assigned to the attribute.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name assigned to the attribute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersSaasUserResult(dict):
    def __init__(__self__, *,
                 account_admin: bool,
                 confirmed: bool,
                 created: str,
                 csp_roles: Sequence[str],
                 dashboard: bool,
                 email: str,
                 groups: Sequence['outputs.GetUsersSaasUserGroupResult'],
                 logins: Sequence['outputs.GetUsersSaasUserLoginResult'],
                 multiaccount: bool,
                 password_reset: bool,
                 provider: str,
                 send_announcements: bool,
                 send_new_plugins: bool,
                 send_new_risks: bool,
                 send_scan_results: bool,
                 user_id: str):
        pulumi.set(__self__, "account_admin", account_admin)
        pulumi.set(__self__, "confirmed", confirmed)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "csp_roles", csp_roles)
        pulumi.set(__self__, "dashboard", dashboard)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "logins", logins)
        pulumi.set(__self__, "multiaccount", multiaccount)
        pulumi.set(__self__, "password_reset", password_reset)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "send_announcements", send_announcements)
        pulumi.set(__self__, "send_new_plugins", send_new_plugins)
        pulumi.set(__self__, "send_new_risks", send_new_risks)
        pulumi.set(__self__, "send_scan_results", send_scan_results)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accountAdmin")
    def account_admin(self) -> bool:
        return pulumi.get(self, "account_admin")

    @property
    @pulumi.getter
    def confirmed(self) -> bool:
        return pulumi.get(self, "confirmed")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="cspRoles")
    def csp_roles(self) -> Sequence[str]:
        return pulumi.get(self, "csp_roles")

    @property
    @pulumi.getter
    def dashboard(self) -> bool:
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetUsersSaasUserGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def logins(self) -> Sequence['outputs.GetUsersSaasUserLoginResult']:
        return pulumi.get(self, "logins")

    @property
    @pulumi.getter
    def multiaccount(self) -> bool:
        return pulumi.get(self, "multiaccount")

    @property
    @pulumi.getter(name="passwordReset")
    def password_reset(self) -> bool:
        return pulumi.get(self, "password_reset")

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="sendAnnouncements")
    def send_announcements(self) -> bool:
        return pulumi.get(self, "send_announcements")

    @property
    @pulumi.getter(name="sendNewPlugins")
    def send_new_plugins(self) -> bool:
        return pulumi.get(self, "send_new_plugins")

    @property
    @pulumi.getter(name="sendNewRisks")
    def send_new_risks(self) -> bool:
        return pulumi.get(self, "send_new_risks")

    @property
    @pulumi.getter(name="sendScanResults")
    def send_scan_results(self) -> bool:
        return pulumi.get(self, "send_scan_results")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetUsersSaasUserGroupResult(dict):
    def __init__(__self__, *,
                 created: str,
                 id: int,
                 name: str):
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUsersSaasUserLoginResult(dict):
    def __init__(__self__, *,
                 created: str,
                 id: int,
                 ip_address: str,
                 user_id: int):
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> int:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 email: str,
                 first_time: bool,
                 is_super: bool,
                 name: str,
                 plan: str,
                 role: str,
                 roles: Sequence[str],
                 type: str,
                 ui_access: bool,
                 user_id: str):
        """
        :param str email: The user Email.
        :param bool first_time: If the user must change password at next login.
        :param bool is_super: Give the Permission Set full access, meaning all actions are allowed without restriction.
        :param str name: The user name.
        :param str plan: User's Aqua plan (Developer / Team / Advanced).
        :param str role: The first role that assigned to the user for backward compatibility.
        :param Sequence[str] roles: The roles that will be assigned to the user.
        :param str type: The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
        :param bool ui_access: Whether to allow UI access for users with this Permission Set.
        :param str user_id: The user ID.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_time", first_time)
        pulumi.set(__self__, "is_super", is_super)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "ui_access", ui_access)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The user Email.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstTime")
    def first_time(self) -> bool:
        """
        If the user must change password at next login.
        """
        return pulumi.get(self, "first_time")

    @property
    @pulumi.getter(name="isSuper")
    def is_super(self) -> bool:
        """
        Give the Permission Set full access, meaning all actions are allowed without restriction.
        """
        return pulumi.get(self, "is_super")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The user name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> str:
        """
        User's Aqua plan (Developer / Team / Advanced).
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The first role that assigned to the user for backward compatibility.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        The roles that will be assigned to the user.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uiAccess")
    def ui_access(self) -> bool:
        """
        Whether to allow UI access for users with this Permission Set.
        """
        return pulumi.get(self, "ui_access")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The user ID.
        """
        return pulumi.get(self, "user_id")


