# coding: utf-8

"""
    LMK API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr
from lmk.generated.models.actor_response import ActorResponse
from lmk.generated.models.notification_channel_response_payload import NotificationChannelResponsePayload

class NotificationChannelResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    payload: NotificationChannelResponsePayload = ...
    notification_channel_id: StrictStr = Field(..., alias="notificationChannelId")
    name: StrictStr = ...
    order: float = ...
    is_default: StrictBool = Field(..., alias="isDefault")
    is_managed: StrictBool = Field(..., alias="isManaged")
    is_verified: StrictBool = Field(..., alias="isVerified")
    verification_required: StrictBool = Field(..., alias="verificationRequired")
    created_at: StrictStr = Field(..., alias="createdAt")
    created_by_actor: ActorResponse = Field(..., alias="createdByActor")
    last_updated_at: StrictStr = Field(..., alias="lastUpdatedAt")
    last_updated_by_actor: ActorResponse = Field(..., alias="lastUpdatedByActor")
    __properties = ["payload", "notificationChannelId", "name", "order", "isDefault", "isManaged", "isVerified", "verificationRequired", "createdAt", "createdByActor", "lastUpdatedAt", "lastUpdatedByActor"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationChannelResponse:
        """Create an instance of NotificationChannelResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by_actor
        if self.created_by_actor:
            _dict['createdByActor'] = self.created_by_actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_updated_by_actor
        if self.last_updated_by_actor:
            _dict['lastUpdatedByActor'] = self.last_updated_by_actor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationChannelResponse:
        """Create an instance of NotificationChannelResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NotificationChannelResponse.parse_obj(obj)

        _obj = NotificationChannelResponse.parse_obj({
            "payload": NotificationChannelResponsePayload.from_dict(obj.get("payload")) if obj.get("payload") is not None else None,
            "notification_channel_id": obj.get("notificationChannelId"),
            "name": obj.get("name"),
            "order": obj.get("order"),
            "is_default": obj.get("isDefault"),
            "is_managed": obj.get("isManaged"),
            "is_verified": obj.get("isVerified"),
            "verification_required": obj.get("verificationRequired"),
            "created_at": obj.get("createdAt"),
            "created_by_actor": ActorResponse.from_dict(obj.get("createdByActor")) if obj.get("createdByActor") is not None else None,
            "last_updated_at": obj.get("lastUpdatedAt"),
            "last_updated_by_actor": ActorResponse.from_dict(obj.get("lastUpdatedByActor")) if obj.get("lastUpdatedByActor") is not None else None
        })
        return _obj

