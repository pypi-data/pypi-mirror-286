# coding: utf-8

"""
    LMK API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AppResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    app_id: StrictStr = Field(..., alias="appId")
    name: StrictStr = ...
    icon_url: StrictStr = Field(..., alias="iconUrl")
    description: StrictStr = ...
    intro_warning_markdown: Optional[StrictStr] = Field(None, alias="introWarningMarkdown")
    created_at: StrictStr = Field(..., alias="createdAt")
    last_updated_at: StrictStr = Field(..., alias="lastUpdatedAt")
    __properties = ["appId", "name", "iconUrl", "description", "introWarningMarkdown", "createdAt", "lastUpdatedAt"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AppResponse:
        """Create an instance of AppResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AppResponse:
        """Create an instance of AppResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AppResponse.parse_obj(obj)

        _obj = AppResponse.parse_obj({
            "app_id": obj.get("appId"),
            "name": obj.get("name"),
            "icon_url": obj.get("iconUrl"),
            "description": obj.get("description"),
            "intro_warning_markdown": obj.get("introWarningMarkdown"),
            "created_at": obj.get("createdAt"),
            "last_updated_at": obj.get("lastUpdatedAt")
        })
        return _obj

