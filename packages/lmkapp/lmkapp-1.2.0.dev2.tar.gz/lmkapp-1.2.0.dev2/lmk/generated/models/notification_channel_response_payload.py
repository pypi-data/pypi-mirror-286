# coding: utf-8

"""
    LMK API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from lmk.generated.models.email_channel_payload import EmailChannelPayload
from lmk.generated.models.text_message_channel_payload import TextMessageChannelPayload
from lmk.generated.models.web_push_channel_payload import WebPushChannelPayload
from typing import Any, List
from pydantic import StrictStr, Field

NOTIFICATIONCHANNELRESPONSEPAYLOAD_ONE_OF_SCHEMAS = ["EmailChannelPayload", "TextMessageChannelPayload", "WebPushChannelPayload"]

class NotificationChannelResponsePayload(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: EmailChannelPayload
    oneof_schema_1_validator: Optional[EmailChannelPayload] = None
    # data type: TextMessageChannelPayload
    oneof_schema_2_validator: Optional[TextMessageChannelPayload] = None
    # data type: WebPushChannelPayload
    oneof_schema_3_validator: Optional[WebPushChannelPayload] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(NOTIFICATIONCHANNELRESPONSEPAYLOAD_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: EmailChannelPayload
        if type(v) is not EmailChannelPayload:
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmailChannelPayload`")
        else:
            match += 1

        # validate data type: TextMessageChannelPayload
        if type(v) is not TextMessageChannelPayload:
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextMessageChannelPayload`")
        else:
            match += 1

        # validate data type: WebPushChannelPayload
        if type(v) is not WebPushChannelPayload:
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebPushChannelPayload`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into NotificationChannelResponsePayload with oneOf schemas: EmailChannelPayload, TextMessageChannelPayload, WebPushChannelPayload. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into NotificationChannelResponsePayload with oneOf schemas: EmailChannelPayload, TextMessageChannelPayload, WebPushChannelPayload. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationChannelResponsePayload:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> NotificationChannelResponsePayload:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # deserialize data into EmailChannelPayload
        try:
            instance.actual_instance = EmailChannelPayload.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into TextMessageChannelPayload
        try:
            instance.actual_instance = TextMessageChannelPayload.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into WebPushChannelPayload
        try:
            instance.actual_instance = WebPushChannelPayload.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into NotificationChannelResponsePayload with oneOf schemas: EmailChannelPayload, TextMessageChannelPayload, WebPushChannelPayload. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into NotificationChannelResponsePayload with oneOf schemas: EmailChannelPayload, TextMessageChannelPayload, WebPushChannelPayload. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

