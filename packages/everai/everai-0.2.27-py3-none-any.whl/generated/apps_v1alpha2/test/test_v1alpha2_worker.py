# coding: utf-8

"""
    everai/common/v1/message.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from generated.apps_v1alpha2.models.v1alpha2_worker import V1alpha2Worker

class TestV1alpha2Worker(unittest.TestCase):
    """V1alpha2Worker unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1alpha2Worker:
        """Test V1alpha2Worker
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1alpha2Worker`
        """
        model = V1alpha2Worker()
        if include_optional:
            return V1alpha2Worker(
                metadata = generated.apps_v1alpha2.models.v1_metadata.v1Metadata(
                    name = '', 
                    namespace = '', 
                    resource_version = '', 
                    uid = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    labels = {
                        'key' : ''
                        }, ),
                spec = generated.apps_v1alpha2.models.v1alpha2_worker_spec.v1alpha2WorkerSpec(
                    image = '', 
                    image_pull_secrets = generated.apps_v1alpha2.models.v1alpha2_image_pull_secrets.v1alpha2ImagePullSecrets(
                        username = generated.apps_v1alpha2.models.commonv1_value.commonv1Value(
                            value = '', 
                            value_from = generated.apps_v1alpha2.models.v1_value_from.v1ValueFrom(
                                secret_key_ref = generated.apps_v1alpha2.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), 
                                config_map_key_ref = generated.apps_v1alpha2.models.v1_key_reference.v1KeyReference(
                                    name = '', 
                                    key = '', ), ), ), 
                        password = generated.apps_v1alpha2.models.commonv1_value.commonv1Value(
                            value = '', ), ), 
                    volume_mounts = [
                        generated.apps_v1alpha2.models.v1alpha2_volume_mount.v1alpha2VolumeMount(
                            name = '', 
                            mount_path = '', 
                            read_only = True, )
                        ], 
                    env = [
                        generated.apps_v1alpha2.models.v1alpha2_environment.v1alpha2Environment(
                            name = '', 
                            env_value = , )
                        ], 
                    command = [
                        ''
                        ], 
                    port = 56, 
                    readiness_probe = generated.apps_v1alpha2.models.v1alpha2_probe.v1alpha2Probe(
                        http_get = generated.apps_v1alpha2.models.v1_http_get.v1HttpGet(
                            path = '', ), ), 
                    volumes = [
                        generated.apps_v1alpha2.models.v1alpha2_volume.v1alpha2Volume(
                            name = '', 
                            volume = generated.apps_v1alpha2.models.volume_volume_item.VolumeVolumeItem(), 
                            secret = generated.apps_v1alpha2.models.volume_secret_item.VolumeSecretItem(
                                secret_name = '', 
                                items = [
                                    generated.apps_v1alpha2.models.volume_item.VolumeItem(
                                        key = '', 
                                        path = '', )
                                    ], ), 
                            config_map = generated.apps_v1alpha2.models.volume_config_map_item.VolumeConfigMapItem(
                                name = '', ), )
                        ], 
                    resource = generated.apps_v1alpha2.models.v1alpha2_resource.v1alpha2Resource(
                        cpu = 56, 
                        memory = '', 
                        gpu = 56, 
                        filters = generated.apps_v1alpha2.models.v1alpha2_resource_filter.v1alpha2ResourceFilter(
                            gpu = [
                                ''
                                ], 
                            cpu = generated.apps_v1alpha2.models.v1alpha2_cpu_constraint.v1alpha2CPUConstraint(
                                platforms = [
                                    ''
                                    ], 
                                models = [
                                    ''
                                    ], ), 
                            regions = [
                                ''
                                ], 
                            cuda = '', 
                            nvidia = '', ), ), ),
                status = generated.apps_v1alpha2.models.appsv1alpha2_worker_status.appsv1alpha2WorkerStatus(
                    device_id = '', 
                    cpu_num = 56, 
                    memory = 56, 
                    gpu_model = '', 
                    gpu_num = 56, 
                    success_count = 56, 
                    failed_count = 56, 
                    session_number = 56, 
                    launch_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_serve_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    detail_status = 'DETAIL_STATUS_UNSPECIFIED', )
            )
        else:
            return V1alpha2Worker(
        )
        """

    def testV1alpha2Worker(self):
        """Test V1alpha2Worker"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
