# coding: utf-8

"""
    everai/common/v1/message.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from generated.apps_v1alpha2.models.v1alpha2_worker_status_worker_status import V1alpha2WorkerStatusWorkerStatus
from generated.apps_v1alpha2.models.worker_status_worker_detail_status import WorkerStatusWorkerDetailStatus
from typing import Optional, Set
from typing_extensions import Self

class Appsv1alpha2WorkerStatus(BaseModel):
    """
    Appsv1alpha2WorkerStatus
    """ # noqa: E501
    device_id: Optional[StrictStr] = Field(default=None, alias="deviceId")
    cpu_num: Optional[StrictInt] = Field(default=None, alias="cpuNum")
    memory: Optional[StrictInt] = None
    gpu_model: Optional[StrictStr] = Field(default=None, alias="gpuModel")
    gpu_num: Optional[StrictInt] = Field(default=None, alias="gpuNum")
    success_count: Optional[StrictInt] = Field(default=None, alias="successCount")
    failed_count: Optional[StrictInt] = Field(default=None, alias="failedCount")
    session_number: Optional[StrictInt] = Field(default=None, alias="sessionNumber")
    launch_at: Optional[datetime] = Field(default=None, alias="launchAt")
    last_serve_at: Optional[datetime] = Field(default=None, alias="lastServeAt")
    status: Optional[V1alpha2WorkerStatusWorkerStatus] = V1alpha2WorkerStatusWorkerStatus.UNSPECIFIED
    detail_status: Optional[WorkerStatusWorkerDetailStatus] = Field(default=WorkerStatusWorkerDetailStatus.UNSPECIFIED, alias="detailStatus")
    __properties: ClassVar[List[str]] = ["deviceId", "cpuNum", "memory", "gpuModel", "gpuNum", "successCount", "failedCount", "sessionNumber", "launchAt", "lastServeAt", "status", "detailStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Appsv1alpha2WorkerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Appsv1alpha2WorkerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceId": obj.get("deviceId"),
            "cpuNum": obj.get("cpuNum"),
            "memory": obj.get("memory"),
            "gpuModel": obj.get("gpuModel"),
            "gpuNum": obj.get("gpuNum"),
            "successCount": obj.get("successCount"),
            "failedCount": obj.get("failedCount"),
            "sessionNumber": obj.get("sessionNumber"),
            "launchAt": obj.get("launchAt"),
            "lastServeAt": obj.get("lastServeAt"),
            "status": obj.get("status") if obj.get("status") is not None else V1alpha2WorkerStatusWorkerStatus.UNSPECIFIED,
            "detailStatus": obj.get("detailStatus") if obj.get("detailStatus") is not None else WorkerStatusWorkerDetailStatus.UNSPECIFIED
        })
        return _obj


