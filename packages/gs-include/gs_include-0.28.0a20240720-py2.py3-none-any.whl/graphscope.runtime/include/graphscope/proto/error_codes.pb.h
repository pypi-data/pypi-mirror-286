// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error_codes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_error_5fcodes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_error_5fcodes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_error_5fcodes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_error_5fcodes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_error_5fcodes_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {

enum Code : int {
  OK = 0,
  TIMEOUT_ERROR = 1,
  NOT_FOUND_ERROR = 2,
  CONNECTION_ERROR = 3,
  VINEYARD_ERROR = 4,
  COMPILATION_ERROR = 5,
  ALREADY_EXISTS_ERROR = 6,
  UDF_INTERNAL_ERROR = 7,
  UNAVAILABLE_ERROR = 8,
  INVALID_ARGUMENT_ERROR = 9,
  PERMISSION_DENIED_ERROR = 10,
  NETWORK_ERROR = 11,
  K8S_ERROR = 12,
  UNIMPLEMENTED_ERROR = 13,
  GREMLIN_QUERY_ERROR = 14,
  RETRIES_EXCEEDED_ERROR = 15,
  ANALYTICAL_ENGINE_INTERNAL_ERROR = 30,
  INTERACTIVE_ENGINE_INTERNAL_ERROR = 31,
  LEARNING_ENGINE_INTERNAL_ERROR = 32,
  COORDINATOR_INTERNAL_ERROR = 33,
  WORKER_RESULTS_INCONSISTENT_ERROR = 41,
  UNKNOWN_ERROR = 101,
  FATAL_ERROR = 102,
  Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Code_IsValid(int value);
constexpr Code Code_MIN = OK;
constexpr Code Code_MAX = FATAL_ERROR;
constexpr int Code_ARRAYSIZE = Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Code_descriptor();
template<typename T>
inline const std::string& Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Code_descriptor(), enum_t_value);
}
inline bool Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Code>(
    Code_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace gs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gs::rpc::Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gs::rpc::Code>() {
  return ::gs::rpc::Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_error_5fcodes_2eproto
