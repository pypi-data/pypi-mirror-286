Metadata-Version: 2.1
Name: octoflow
Version: 0.2.0
Summary: Streamlining machine learning tracking for seamless experiment management.
Project-URL: Documentation, https://github.com/ysenarath/octoflow
Project-URL: Source, https://github.com/ysenarath/octoflow
Author-email: Yasas Senarath <email@example.com>
License-Expression: MIT
License-File: AUTHORS.md
License-File: LICENSE
Keywords: machine-learning,tracking
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Python: >=3.8
Requires-Dist: cloudpickle
Requires-Dist: dill
Requires-Dist: filelock>=3.13.4
Requires-Dist: octoflow-plugins
Requires-Dist: omegaconf>=2.3.0
Requires-Dist: pandas>=2.2.2
Requires-Dist: polars>=0.20.22
Requires-Dist: pyarrow>=16.0.0
Requires-Dist: sqlalchemy
Requires-Dist: tabulate>=0.9.0
Requires-Dist: tqdm>=4.66.2
Requires-Dist: xxhash
Description-Content-Type: text/markdown

# OctoFlow

Streamlining machine learning tracking for seamless experiment management.

## Features

* Feature 1
* Feature 2
* ...

## Development

To set up [hatch] and [pre-commit] for the first time:

1. install [hatch] globally, e.g. with [pipx], i.e. `pipx install hatch`,
2. optionally run `hatch config set dirs.env.virtual .direnv` to let [VS Code] find your virtual environments,
3. make sure `pre-commit` is installed globally, e.g. with `pipx install pre-commit`,
4. run `pre-commit install` to install [pre-commit].

A special feature that makes hatch very different from other familiar tools is that you almost never
activate, or enter, an environment. Instead, you use `hatch run env_name:command` and the `default` environment
is assumed for a command if there is no colon found. Thus you must always define your environment in a declarative
way and hatch makes sure that the environment reflects your declaration by updating it whenever you issue
a `hatch run ...`. This helps with reproducability and avoids forgetting to specify dependencies since the
hatch workflow is to specify everything directly in [pyproject.toml](pyproject.toml). Only in rare cases, you
will use `hatch shell` to enter the `default` environment, which is similar to what you may know from other tools.

To get you started, use `hatch run cov` or `hatch run no-cov` to run the unitest with or without coverage reports,
respectively. Use `hatch run lint:all` to run all kinds of typing and linting checks. Try to automatically fix linting
problems with `hatch run lint:fix` and use `hatch run docs:serve` to build and serve your documentation.
You can also easily define your own environments and commands. Check out the environment setup of hatch
in [pyproject.toml](pyproject.toml) for more commands as well as the package, build and tool configuration.

## Credits

This package was created with [The Hatchlor] project template.

[The Hatchlor]: https://github.com/florianwilhelm/the-hatchlor
[pipx]: https://pypa.github.io/pipx/
[hatch]: https://hatch.pypa.io/
[pre-commit]: https://pre-commit.com/
[VS Code]: https://code.visualstudio.com/docs/python/environments#_where-the-extension-looks-for-environments
