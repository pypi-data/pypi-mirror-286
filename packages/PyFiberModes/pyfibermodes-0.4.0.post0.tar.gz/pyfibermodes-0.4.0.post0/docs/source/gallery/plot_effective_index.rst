
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/plot_effective_index.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_plot_effective_index.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_effective_index.py:


Effective index VS core index
=============================

.. GENERATED FROM PYTHON SOURCE LINES 8-10

Imports
~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: python3

    from PyFiberModes import FiberFactory, HE11, HE12, HE22
    from MPSPlots.render2D import SceneList
    import numpy








.. GENERATED FROM PYTHON SOURCE LINES 15-18

Generating the fiber structures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we create the different fiber design that we want to explore

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: python3

    core_indexes = numpy.linspace(1.464, 1.494, 100)
    factory = FiberFactory(wavelength=1550e-9)
    factory.add_layer(name="core", radius=4e-6, index=core_indexes)
    factory.add_layer(name="cladding", index=1.4444)









.. GENERATED FROM PYTHON SOURCE LINES 25-26

Preparing the figure

.. GENERATED FROM PYTHON SOURCE LINES 26-46

.. code-block:: python3

    figure = SceneList(title='Effective index vs core index')

    ax = figure.append_ax(show_legend=True)

    for mode in [HE11, HE12, HE22]:
        data = []
        for fiber in factory:
            effective_index = fiber.get_effective_index(mode)
            data.append(effective_index)

        ax.add_line(
            x=core_indexes,
            y=data,
            label=str(mode),
            line_width=2
        )

    figure.show()

    # -



.. image-sg:: /gallery/images/sphx_glr_plot_effective_index_001.png
   :alt: Effective index vs core index
   :srcset: /gallery/images/sphx_glr_plot_effective_index_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SceneList(unit_size=(10, 3), tight_layout=True, transparent_background=False, title='Effective index vs core index', padding=1.0, axis_list=[Axis(row=0, col=0, x_label=None, y_label=None, title='', show_grid=True, show_legend=True, legend_position='best', x_scale='linear', y_scale='linear', x_limits=None, y_limits=None, equal_limits=False, projection=None, font_size=16, tick_size=14, y_tick_position='left', x_tick_position='bottom', show_ticks=True, show_colorbar=None, legend_font_size=14, line_width=None, line_style=None, x_scale_factor=None, y_scale_factor=None, aspect_ratio='auto', _artist_list=[Line(y=array([1.45931348, 1.4596006 , 1.45988805, 1.4601758 , 1.46046385,
           1.4607522 , 1.46104083, 1.46132972, 1.46161889, 1.46190831,
           1.46219798, 1.4624879 , 1.46277805, 1.46306842, 1.46335902,
           1.46364984, 1.46394087, 1.4642321 , 1.46452353, 1.46481515,
           1.46510697, 1.46539896, 1.46569114, 1.46598349, 1.46627601,
           1.4665687 , 1.46686155, 1.46715456, 1.46744772, 1.46774104,
           1.4680345 , 1.4683281 , 1.46862185, 1.46891574, 1.46920975,
           1.4695039 , 1.46979818, 1.47009258, 1.47038711, 1.47068175,
           1.47097652, 1.4712714 , 1.47156639, 1.4718615 , 1.47215671,
           1.47245202, 1.47274744, 1.47304297, 1.47333859, 1.47363431,
           1.47393013, 1.47422604, 1.47452204, 1.47481813, 1.47511432,
           1.47541059, 1.47570694, 1.47600338, 1.4762999 , 1.4765965 ,
           1.47689319, 1.47718995, 1.47748678, 1.4777837 , 1.47808068,
           1.47837774, 1.47867487, 1.47897207, 1.47926934, 1.47956668,
           1.47986409, 1.48016156, 1.48045909, 1.48075669, 1.48105435,
           1.48135207, 1.48164986, 1.4819477 , 1.4822456 , 1.48254356,
           1.48284158, 1.48313965, 1.48343777, 1.48373595, 1.48403419,
           1.48433248, 1.48463082, 1.48492921, 1.48522765, 1.48552614,
           1.48582467, 1.48612326, 1.48642189, 1.48672058, 1.4870193 ,
           1.48731807, 1.48761689, 1.48791575, 1.48821466, 1.48851361]), x=array([1.464     , 1.46430303, 1.46460606, 1.46490909, 1.46521212,
           1.46551515, 1.46581818, 1.46612121, 1.46642424, 1.46672727,
           1.4670303 , 1.46733333, 1.46763636, 1.46793939, 1.46824242,
           1.46854545, 1.46884848, 1.46915152, 1.46945455, 1.46975758,
           1.47006061, 1.47036364, 1.47066667, 1.4709697 , 1.47127273,
           1.47157576, 1.47187879, 1.47218182, 1.47248485, 1.47278788,
           1.47309091, 1.47339394, 1.47369697, 1.474     , 1.47430303,
           1.47460606, 1.47490909, 1.47521212, 1.47551515, 1.47581818,
           1.47612121, 1.47642424, 1.47672727, 1.4770303 , 1.47733333,
           1.47763636, 1.47793939, 1.47824242, 1.47854545, 1.47884848,
           1.47915152, 1.47945455, 1.47975758, 1.48006061, 1.48036364,
           1.48066667, 1.4809697 , 1.48127273, 1.48157576, 1.48187879,
           1.48218182, 1.48248485, 1.48278788, 1.48309091, 1.48339394,
           1.48369697, 1.484     , 1.48430303, 1.48460606, 1.48490909,
           1.48521212, 1.48551515, 1.48581818, 1.48612121, 1.48642424,
           1.48672727, 1.4870303 , 1.48733333, 1.48763636, 1.48793939,
           1.48824242, 1.48854545, 1.48884848, 1.48915152, 1.48945455,
           1.48975758, 1.49006061, 1.49036364, 1.49066667, 1.4909697 ,
           1.49127273, 1.49157576, 1.49187879, 1.49218182, 1.49248485,
           1.49278788, 1.49309091, 1.49339394, 1.49369697, 1.494     ]), label='HE11', color=None, line_style='-', line_width=2.0, x_scale_factor=1, y_scale_factor=1, layer_position=1, mappable=[<matplotlib.lines.Line2D object at 0x17dbef8d0>]), Line(y=array([1.44440001, 1.44440091, 1.44440902, 1.44443186, 1.44447214,
           1.44452939, 1.44460211, 1.4446886 , 1.44478728, 1.44489679,
           1.44501598, 1.44514384, 1.44527954, 1.44542236, 1.44557168,
           1.44572696, 1.44588774, 1.44605359, 1.44622417, 1.44639914,
           1.44657823, 1.44676117, 1.44694773, 1.4471377 , 1.44733088,
           1.44752712, 1.44772624, 1.4479281 , 1.44813256, 1.4483395 ,
           1.44854881, 1.44876038, 1.44897411, 1.44918991, 1.44940769,
           1.44962737, 1.44984887, 1.45007213, 1.45029708, 1.45052365,
           1.45075179, 1.45098145, 1.45121255, 1.45144507, 1.45167895,
           1.45191414, 1.45215061, 1.45238831, 1.4526272 , 1.45286725,
           1.45310843, 1.45335069, 1.45359401, 1.45383835, 1.4540837 ,
           1.45433001, 1.45457726, 1.45482544, 1.4550745 , 1.45532444,
           1.45557522, 1.45582682, 1.45607923, 1.45633242, 1.45658638,
           1.45684108, 1.45709651, 1.45735265, 1.45760948, 1.45786699,
           1.45812516, 1.45838397, 1.45864342, 1.45890349, 1.45916416,
           1.45942542, 1.45968726, 1.45994966, 1.46021262, 1.46047613,
           1.46074016, 1.46100471, 1.46126978, 1.46153534, 1.46180139,
           1.46206792, 1.46233493, 1.46260239, 1.46287031, 1.46313867,
           1.46340746, 1.46367668, 1.46394633, 1.46421638, 1.46448684,
           1.4647577 , 1.46502894, 1.46530057, 1.46557258, 1.46584495]), x=array([1.464     , 1.46430303, 1.46460606, 1.46490909, 1.46521212,
           1.46551515, 1.46581818, 1.46612121, 1.46642424, 1.46672727,
           1.4670303 , 1.46733333, 1.46763636, 1.46793939, 1.46824242,
           1.46854545, 1.46884848, 1.46915152, 1.46945455, 1.46975758,
           1.47006061, 1.47036364, 1.47066667, 1.4709697 , 1.47127273,
           1.47157576, 1.47187879, 1.47218182, 1.47248485, 1.47278788,
           1.47309091, 1.47339394, 1.47369697, 1.474     , 1.47430303,
           1.47460606, 1.47490909, 1.47521212, 1.47551515, 1.47581818,
           1.47612121, 1.47642424, 1.47672727, 1.4770303 , 1.47733333,
           1.47763636, 1.47793939, 1.47824242, 1.47854545, 1.47884848,
           1.47915152, 1.47945455, 1.47975758, 1.48006061, 1.48036364,
           1.48066667, 1.4809697 , 1.48127273, 1.48157576, 1.48187879,
           1.48218182, 1.48248485, 1.48278788, 1.48309091, 1.48339394,
           1.48369697, 1.484     , 1.48430303, 1.48460606, 1.48490909,
           1.48521212, 1.48551515, 1.48581818, 1.48612121, 1.48642424,
           1.48672727, 1.4870303 , 1.48733333, 1.48763636, 1.48793939,
           1.48824242, 1.48854545, 1.48884848, 1.48915152, 1.48945455,
           1.48975758, 1.49006061, 1.49036364, 1.49066667, 1.4909697 ,
           1.49127273, 1.49157576, 1.49187879, 1.49218182, 1.49248485,
           1.49278788, 1.49309091, 1.49339394, 1.49369697, 1.494     ]), label='HE12', color=None, line_style='-', line_width=2.0, x_scale_factor=1, y_scale_factor=1, layer_position=1, mappable=[<matplotlib.lines.Line2D object at 0x17de23b50>]), Line(y=array([       nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan,        nan,        nan,        nan,
                  nan,        nan, 1.44443697, 1.44452395, 1.44462881,
           1.44474656, 1.44487462, 1.44501133, 1.44515553, 1.44530632,
           1.44546299, 1.44562498, 1.44579183, 1.44596312, 1.44613852,
           1.44631774, 1.44650051, 1.44668661, 1.44687584, 1.44706801,
           1.44726297, 1.44746055, 1.44766064, 1.4478631 , 1.44806782,
           1.44827471, 1.44848366, 1.44869459, 1.44890741, 1.44912205,
           1.44933844, 1.44955651, 1.4497762 , 1.44999745, 1.4502202 ]), x=array([1.464     , 1.46430303, 1.46460606, 1.46490909, 1.46521212,
           1.46551515, 1.46581818, 1.46612121, 1.46642424, 1.46672727,
           1.4670303 , 1.46733333, 1.46763636, 1.46793939, 1.46824242,
           1.46854545, 1.46884848, 1.46915152, 1.46945455, 1.46975758,
           1.47006061, 1.47036364, 1.47066667, 1.4709697 , 1.47127273,
           1.47157576, 1.47187879, 1.47218182, 1.47248485, 1.47278788,
           1.47309091, 1.47339394, 1.47369697, 1.474     , 1.47430303,
           1.47460606, 1.47490909, 1.47521212, 1.47551515, 1.47581818,
           1.47612121, 1.47642424, 1.47672727, 1.4770303 , 1.47733333,
           1.47763636, 1.47793939, 1.47824242, 1.47854545, 1.47884848,
           1.47915152, 1.47945455, 1.47975758, 1.48006061, 1.48036364,
           1.48066667, 1.4809697 , 1.48127273, 1.48157576, 1.48187879,
           1.48218182, 1.48248485, 1.48278788, 1.48309091, 1.48339394,
           1.48369697, 1.484     , 1.48430303, 1.48460606, 1.48490909,
           1.48521212, 1.48551515, 1.48581818, 1.48612121, 1.48642424,
           1.48672727, 1.4870303 , 1.48733333, 1.48763636, 1.48793939,
           1.48824242, 1.48854545, 1.48884848, 1.48915152, 1.48945455,
           1.48975758, 1.49006061, 1.49036364, 1.49066667, 1.4909697 ,
           1.49127273, 1.49157576, 1.49187879, 1.49218182, 1.49248485,
           1.49278788, 1.49309091, 1.49339394, 1.49369697, 1.494     ]), label='HE22', color=None, line_style='-', line_width=2.0, x_scale_factor=1, y_scale_factor=1, layer_position=1, mappable=[<matplotlib.lines.Line2D object at 0x17de38490>])], mpl_ax=<Axes: >, colorbar=Colorbar(artist=None, discreet=False, position='right', colormap=<matplotlib.colors.LinearSegmentedColormap object at 0x13c458490>, orientation='vertical', symmetric=False, log_norm=False, numeric_format=None, n_ticks=None, label_size=None, width='10%', padding=0.1, norm=None, label='', mappable=None))], _mpl_figure=<Figure size 1000x300 with 1 Axes>, mpl_axis_generated=False, axis_generated=True, ax_orientation='vertical')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.464 seconds)


.. _sphx_glr_download_gallery_plot_effective_index.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_effective_index.py <plot_effective_index.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_effective_index.ipynb <plot_effective_index.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
