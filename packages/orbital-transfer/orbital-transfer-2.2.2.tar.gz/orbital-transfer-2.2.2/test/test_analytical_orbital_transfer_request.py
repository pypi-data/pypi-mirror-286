# coding: utf-8

"""
    Orbital transfer API

    An orbital transfer corresponds to a non-coplanar orbit transfer where semi-major axis, inclination and eccentricity can be simultaneously changed.  When considering a change in inclination, an efficiency factor is taken into account to consider the fact that this maneuver is  less efficient away from the orbital nodes. The length of the thrust arcs about the nodes is dictated by the duty cycle.   Different perturbations can be considered while performing this manoeuvre: Earth potential, third-body (Sun, Moon), atmospheric drag  and solar radiation pressure.   <b>CHANGELOG</b> <ul>   <li><b>2.2.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>2.1.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> in <b>DragPerturbation</b> schema</li>   <li><b>2.0.0</b> - 2024-06-06 - Complete refactoring of the API</li> </ul> 

    The version of the OpenAPI document: 2.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from orbital_transfer.models.analytical_orbital_transfer_request import AnalyticalOrbitalTransferRequest

class TestAnalyticalOrbitalTransferRequest(unittest.TestCase):
    """AnalyticalOrbitalTransferRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyticalOrbitalTransferRequest:
        """Test AnalyticalOrbitalTransferRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyticalOrbitalTransferRequest`
        """
        model = AnalyticalOrbitalTransferRequest()
        if include_optional:
            return AnalyticalOrbitalTransferRequest(
                mission_date_time = '',
                maximum_duration = 56,
                initial_orbit = orbital_transfer.models.orbit.Orbit(),
                target_orbit = orbital_transfer.models.orbit.Orbit(),
                spacecraft_geometry = orbital_transfer.models.spacecraft_geometry.SpacecraftGeometry(),
                platform = orbital_transfer.models.platform.Platform(
                    mass = 1.337, 
                    on_board_average_power = 1.337, ),
                propulsion_system = orbital_transfer.models.propulsion_system.PropulsionSystem(
                    type = 'CHEMICAL', 
                    isp = 1.337, 
                    power = 1.337, 
                    thrust = 1.337, 
                    standby_power = 1.337, 
                    warm_up_power = 1.337, 
                    warm_up_duration = 1.337, 
                    propellant_mass = 1.337, 
                    total_mass = 1.337, 
                    total_impulse = 1.337, 
                    maximum_thrust_duration = 1.337, 
                    consumption = 1.337, 
                    propellant_capacity_choice = 'PROPELLANT', ),
                drag_perturbation = orbital_transfer.models.analytical_orbital_transfer_request_drag_perturbation.AnalyticalOrbitalTransferRequest_dragPerturbation(
                    drag_coefficient = 1.337, 
                    lift_ratio = 1.337, 
                    custom_solar_flux = 1.337, )
            )
        else:
            return AnalyticalOrbitalTransferRequest(
                initial_orbit = orbital_transfer.models.orbit.Orbit(),
        )
        """

    def testAnalyticalOrbitalTransferRequest(self):
        """Test AnalyticalOrbitalTransferRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
