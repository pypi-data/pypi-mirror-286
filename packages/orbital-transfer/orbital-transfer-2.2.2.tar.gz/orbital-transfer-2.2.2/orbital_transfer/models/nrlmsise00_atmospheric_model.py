# coding: utf-8

"""
    Orbital transfer API

    An orbital transfer corresponds to a non-coplanar orbit transfer where semi-major axis, inclination and eccentricity can be simultaneously changed.  When considering a change in inclination, an efficiency factor is taken into account to consider the fact that this maneuver is  less efficient away from the orbital nodes. The length of the thrust arcs about the nodes is dictated by the duty cycle.   Different perturbations can be considered while performing this manoeuvre: Earth potential, third-body (Sun, Moon), atmospheric drag  and solar radiation pressure.   <b>CHANGELOG</b> <ul>   <li><b>2.2.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>2.1.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> in <b>DragPerturbation</b> schema</li>   <li><b>2.0.0</b> - 2024-06-06 - Complete refactoring of the API</li> </ul> 

    The version of the OpenAPI document: 2.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from orbital_transfer.models.atmospheric_model import AtmosphericModel
from typing import Optional, Set
from typing_extensions import Self

class NRLMSISE00AtmosphericModel(AtmosphericModel):
    """
    NRLMSISE00AtmosphericModel
    """ # noqa: E501
    solar_activity_data_source: StrictStr = Field(description="The solar activity data source to use for the NRLMSISE00 atmosphere model", alias="solarActivityDataSource")
    solar_activity_strength_level: Optional[StrictStr] = Field(default='AVERAGE', description="An optional solar activity strength level to use for the NRLMSISE00 atmosphere model with the MSAFE data source.", alias="solarActivityStrengthLevel")
    __properties: ClassVar[List[str]] = ["type", "solarActivityDataSource", "solarActivityStrengthLevel"]

    @field_validator('solar_activity_data_source')
    def solar_activity_data_source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CSSI', 'MSAFE']):
            raise ValueError("must be one of enum values ('CSSI', 'MSAFE')")
        return value

    @field_validator('solar_activity_strength_level')
    def solar_activity_strength_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEAK', 'AVERAGE', 'STRONG']):
            raise ValueError("must be one of enum values ('WEAK', 'AVERAGE', 'STRONG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NRLMSISE00AtmosphericModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NRLMSISE00AtmosphericModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "solarActivityDataSource": obj.get("solarActivityDataSource"),
            "solarActivityStrengthLevel": obj.get("solarActivityStrengthLevel") if obj.get("solarActivityStrengthLevel") is not None else 'AVERAGE'
        })
        return _obj


