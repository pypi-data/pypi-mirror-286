# coding: utf-8

"""
    Orbital transfer API

    An orbital transfer corresponds to a non-coplanar orbit transfer where semi-major axis, inclination and eccentricity can be simultaneously changed.  When considering a change in inclination, an efficiency factor is taken into account to consider the fact that this maneuver is  less efficient away from the orbital nodes. The length of the thrust arcs about the nodes is dictated by the duty cycle.   Different perturbations can be considered while performing this manoeuvre: Earth potential, third-body (Sun, Moon), atmospheric drag  and solar radiation pressure.   <b>CHANGELOG</b> <ul>   <li><b>2.2.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>2.1.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> in <b>DragPerturbation</b> schema</li>   <li><b>2.0.0</b> - 2024-06-06 - Complete refactoring of the API</li> </ul> 

    The version of the OpenAPI document: 2.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class ThrustArcsPositions(str, Enum):
    """
    ThrustArcsPositions
    """

    """
    allowed enum values
    """
    ASCENDING_AND_DESCENDING_NODES = 'ASCENDING_AND_DESCENDING_NODES'
    ASCENDING_NODE = 'ASCENDING_NODE'
    DESCENDING_NODE = 'DESCENDING_NODE'
    CUSTOM = 'CUSTOM'
    APOGEE_AND_PERIGEE = 'APOGEE_AND_PERIGEE'
    APOGEE = 'APOGEE'
    PERIGEE = 'PERIGEE'
    ASCENDING_AND_DESCENDING_ANTINODES = 'ASCENDING_AND_DESCENDING_ANTINODES'
    ASCENDING_ANTINODE = 'ASCENDING_ANTINODE'
    DESCENDING_ANTINODE = 'DESCENDING_ANTINODE'
    MEAN_LONGITUDE = 'MEAN_LONGITUDE'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ThrustArcsPositions from a JSON string"""
        return cls(json.loads(json_str))


