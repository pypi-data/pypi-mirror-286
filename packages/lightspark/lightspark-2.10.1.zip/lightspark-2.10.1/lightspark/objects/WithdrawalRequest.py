# Copyright Â©, 2022-present, Lightspark Group, Inc. - All Rights Reserved

from dataclasses import dataclass
from datetime import datetime
from typing import Any, Mapping, Optional

from lightspark.requests.requester import Requester
from lightspark.utils.enums import parse_enum

from .CurrencyAmount import CurrencyAmount
from .CurrencyAmount import from_json as CurrencyAmount_from_json
from .Entity import Entity
from .RequestInitiator import RequestInitiator
from .WithdrawalMode import WithdrawalMode
from .WithdrawalRequestStatus import WithdrawalRequestStatus
from .WithdrawalRequestToChannelClosingTransactionsConnection import (
    WithdrawalRequestToChannelClosingTransactionsConnection,
)
from .WithdrawalRequestToChannelClosingTransactionsConnection import (
    from_json as WithdrawalRequestToChannelClosingTransactionsConnection_from_json,
)
from .WithdrawalRequestToChannelOpeningTransactionsConnection import (
    WithdrawalRequestToChannelOpeningTransactionsConnection,
)
from .WithdrawalRequestToChannelOpeningTransactionsConnection import (
    from_json as WithdrawalRequestToChannelOpeningTransactionsConnection_from_json,
)
from .WithdrawalRequestToWithdrawalsConnection import (
    WithdrawalRequestToWithdrawalsConnection,
)
from .WithdrawalRequestToWithdrawalsConnection import (
    from_json as WithdrawalRequestToWithdrawalsConnection_from_json,
)


@dataclass
class WithdrawalRequest(Entity):
    """This object represents a request made for an L1 withdrawal from your Lightspark Node to any Bitcoin wallet. You can retrieve this object to receive detailed information about any withdrawal request made from your Lightspark account."""

    requester: Requester

    id: str
    """The unique identifier of this entity across all Lightspark systems. Should be treated as an opaque string."""

    created_at: datetime
    """The date and time when the entity was first created."""

    updated_at: datetime
    """The date and time when the entity was last updated."""

    requested_amount: CurrencyAmount
    """The requested amount of money to be withdrawn. If the requested amount is -1, it means to withdraw all."""

    amount: CurrencyAmount
    """The amount of money that should be withdrawn in this request."""

    estimated_amount: Optional[CurrencyAmount]
    """If the requested amount is `-1` (i.e. everything), this field may contain an estimate of the amount for the withdrawal."""

    amount_withdrawn: Optional[CurrencyAmount]
    """The actual amount that is withdrawn to the bitcoin address. It will be set once the request is completed."""

    total_fees: Optional[CurrencyAmount]
    """The total fees the node paid for the withdrawal. It will be set once the request is completed."""

    bitcoin_address: str
    """The bitcoin address where the funds should be sent."""

    withdrawal_mode: WithdrawalMode
    """The strategy that should be used to withdraw the funds from the account."""

    status: WithdrawalRequestStatus
    """The current status of this withdrawal request."""

    completed_at: Optional[datetime]
    """The time at which this request was completed."""

    withdrawal_id: Optional[str]
    """The withdrawal transaction that has been generated by this request."""

    idempotency_key: Optional[str]
    """The idempotency key of the withdrawal request."""

    initiator: RequestInitiator
    """The initiator of the withdrawal."""
    typename: str

    def get_channel_closing_transactions(
        self, first: Optional[int] = None, after: Optional[str] = None
    ) -> WithdrawalRequestToChannelClosingTransactionsConnection:
        json = self.requester.execute_graphql(
            """
query FetchWithdrawalRequestToChannelClosingTransactionsConnection($entity_id: ID!, $first: Int, $after: String) {
    entity(id: $entity_id) {
        ... on WithdrawalRequest {
            channel_closing_transactions(, first: $first, after: $after) {
                __typename
                withdrawal_request_to_channel_closing_transactions_connection_count: count
                withdrawal_request_to_channel_closing_transactions_connection_page_info: page_info {
                    __typename
                    page_info_has_next_page: has_next_page
                    page_info_has_previous_page: has_previous_page
                    page_info_start_cursor: start_cursor
                    page_info_end_cursor: end_cursor
                }
                withdrawal_request_to_channel_closing_transactions_connection_entities: entities {
                    __typename
                    channel_closing_transaction_id: id
                    channel_closing_transaction_created_at: created_at
                    channel_closing_transaction_updated_at: updated_at
                    channel_closing_transaction_status: status
                    channel_closing_transaction_resolved_at: resolved_at
                    channel_closing_transaction_amount: amount {
                        __typename
                        currency_amount_original_value: original_value
                        currency_amount_original_unit: original_unit
                        currency_amount_preferred_currency_unit: preferred_currency_unit
                        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
                        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
                    }
                    channel_closing_transaction_transaction_hash: transaction_hash
                    channel_closing_transaction_fees: fees {
                        __typename
                        currency_amount_original_value: original_value
                        currency_amount_original_unit: original_unit
                        currency_amount_preferred_currency_unit: preferred_currency_unit
                        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
                        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
                    }
                    channel_closing_transaction_block_hash: block_hash
                    channel_closing_transaction_block_height: block_height
                    channel_closing_transaction_destination_addresses: destination_addresses
                    channel_closing_transaction_num_confirmations: num_confirmations
                    channel_closing_transaction_channel: channel {
                        id
                    }
                }
            }
        }
    }
}
            """,
            {"entity_id": self.id, "first": first, "after": after},
        )
        connection = json["entity"]["channel_closing_transactions"]
        return WithdrawalRequestToChannelClosingTransactionsConnection_from_json(
            self.requester, connection
        )

    def get_channel_opening_transactions(
        self, first: Optional[int] = None, after: Optional[str] = None
    ) -> WithdrawalRequestToChannelOpeningTransactionsConnection:
        json = self.requester.execute_graphql(
            """
query FetchWithdrawalRequestToChannelOpeningTransactionsConnection($entity_id: ID!, $first: Int, $after: String) {
    entity(id: $entity_id) {
        ... on WithdrawalRequest {
            channel_opening_transactions(, first: $first, after: $after) {
                __typename
                withdrawal_request_to_channel_opening_transactions_connection_count: count
                withdrawal_request_to_channel_opening_transactions_connection_page_info: page_info {
                    __typename
                    page_info_has_next_page: has_next_page
                    page_info_has_previous_page: has_previous_page
                    page_info_start_cursor: start_cursor
                    page_info_end_cursor: end_cursor
                }
                withdrawal_request_to_channel_opening_transactions_connection_entities: entities {
                    __typename
                    channel_opening_transaction_id: id
                    channel_opening_transaction_created_at: created_at
                    channel_opening_transaction_updated_at: updated_at
                    channel_opening_transaction_status: status
                    channel_opening_transaction_resolved_at: resolved_at
                    channel_opening_transaction_amount: amount {
                        __typename
                        currency_amount_original_value: original_value
                        currency_amount_original_unit: original_unit
                        currency_amount_preferred_currency_unit: preferred_currency_unit
                        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
                        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
                    }
                    channel_opening_transaction_transaction_hash: transaction_hash
                    channel_opening_transaction_fees: fees {
                        __typename
                        currency_amount_original_value: original_value
                        currency_amount_original_unit: original_unit
                        currency_amount_preferred_currency_unit: preferred_currency_unit
                        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
                        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
                    }
                    channel_opening_transaction_block_hash: block_hash
                    channel_opening_transaction_block_height: block_height
                    channel_opening_transaction_destination_addresses: destination_addresses
                    channel_opening_transaction_num_confirmations: num_confirmations
                    channel_opening_transaction_channel: channel {
                        id
                    }
                }
            }
        }
    }
}
            """,
            {"entity_id": self.id, "first": first, "after": after},
        )
        connection = json["entity"]["channel_opening_transactions"]
        return WithdrawalRequestToChannelOpeningTransactionsConnection_from_json(
            self.requester, connection
        )

    def get_withdrawals(
        self, first: Optional[int] = None
    ) -> WithdrawalRequestToWithdrawalsConnection:
        json = self.requester.execute_graphql(
            """
query FetchWithdrawalRequestToWithdrawalsConnection($entity_id: ID!, $first: Int) {
    entity(id: $entity_id) {
        ... on WithdrawalRequest {
            withdrawals(, first: $first) {
                __typename
                withdrawal_request_to_withdrawals_connection_count: count
                withdrawal_request_to_withdrawals_connection_entities: entities {
                    __typename
                    withdrawal_id: id
                    withdrawal_created_at: created_at
                    withdrawal_updated_at: updated_at
                    withdrawal_status: status
                    withdrawal_resolved_at: resolved_at
                    withdrawal_amount: amount {
                        __typename
                        currency_amount_original_value: original_value
                        currency_amount_original_unit: original_unit
                        currency_amount_preferred_currency_unit: preferred_currency_unit
                        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
                        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
                    }
                    withdrawal_transaction_hash: transaction_hash
                    withdrawal_fees: fees {
                        __typename
                        currency_amount_original_value: original_value
                        currency_amount_original_unit: original_unit
                        currency_amount_preferred_currency_unit: preferred_currency_unit
                        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
                        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
                    }
                    withdrawal_block_hash: block_hash
                    withdrawal_block_height: block_height
                    withdrawal_destination_addresses: destination_addresses
                    withdrawal_num_confirmations: num_confirmations
                    withdrawal_origin: origin {
                        id
                    }
                }
            }
        }
    }
}
            """,
            {"entity_id": self.id, "first": first},
        )
        connection = json["entity"]["withdrawals"]
        return WithdrawalRequestToWithdrawalsConnection_from_json(
            self.requester, connection
        )

    def to_json(self) -> Mapping[str, Any]:
        return {
            "__typename": "WithdrawalRequest",
            "withdrawal_request_id": self.id,
            "withdrawal_request_created_at": self.created_at.isoformat(),
            "withdrawal_request_updated_at": self.updated_at.isoformat(),
            "withdrawal_request_requested_amount": self.requested_amount.to_json(),
            "withdrawal_request_amount": self.amount.to_json(),
            "withdrawal_request_estimated_amount": (
                self.estimated_amount.to_json() if self.estimated_amount else None
            ),
            "withdrawal_request_amount_withdrawn": (
                self.amount_withdrawn.to_json() if self.amount_withdrawn else None
            ),
            "withdrawal_request_total_fees": (
                self.total_fees.to_json() if self.total_fees else None
            ),
            "withdrawal_request_bitcoin_address": self.bitcoin_address,
            "withdrawal_request_withdrawal_mode": self.withdrawal_mode.value,
            "withdrawal_request_status": self.status.value,
            "withdrawal_request_completed_at": (
                self.completed_at.isoformat() if self.completed_at else None
            ),
            "withdrawal_request_withdrawal": (
                {"id": self.withdrawal_id} if self.withdrawal_id else None
            ),
            "withdrawal_request_idempotency_key": self.idempotency_key,
            "withdrawal_request_initiator": self.initiator.value,
        }


FRAGMENT = """
fragment WithdrawalRequestFragment on WithdrawalRequest {
    __typename
    withdrawal_request_id: id
    withdrawal_request_created_at: created_at
    withdrawal_request_updated_at: updated_at
    withdrawal_request_requested_amount: requested_amount {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    withdrawal_request_amount: amount {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    withdrawal_request_estimated_amount: estimated_amount {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    withdrawal_request_amount_withdrawn: amount_withdrawn {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    withdrawal_request_total_fees: total_fees {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    withdrawal_request_bitcoin_address: bitcoin_address
    withdrawal_request_withdrawal_mode: withdrawal_mode
    withdrawal_request_status: status
    withdrawal_request_completed_at: completed_at
    withdrawal_request_withdrawal: withdrawal {
        id
    }
    withdrawal_request_idempotency_key: idempotency_key
    withdrawal_request_initiator: initiator
}
"""


def from_json(requester: Requester, obj: Mapping[str, Any]) -> WithdrawalRequest:
    return WithdrawalRequest(
        requester=requester,
        typename="WithdrawalRequest",
        id=obj["withdrawal_request_id"],
        created_at=datetime.fromisoformat(obj["withdrawal_request_created_at"]),
        updated_at=datetime.fromisoformat(obj["withdrawal_request_updated_at"]),
        requested_amount=CurrencyAmount_from_json(
            requester, obj["withdrawal_request_requested_amount"]
        ),
        amount=CurrencyAmount_from_json(requester, obj["withdrawal_request_amount"]),
        estimated_amount=(
            CurrencyAmount_from_json(
                requester, obj["withdrawal_request_estimated_amount"]
            )
            if obj["withdrawal_request_estimated_amount"]
            else None
        ),
        amount_withdrawn=(
            CurrencyAmount_from_json(
                requester, obj["withdrawal_request_amount_withdrawn"]
            )
            if obj["withdrawal_request_amount_withdrawn"]
            else None
        ),
        total_fees=(
            CurrencyAmount_from_json(requester, obj["withdrawal_request_total_fees"])
            if obj["withdrawal_request_total_fees"]
            else None
        ),
        bitcoin_address=obj["withdrawal_request_bitcoin_address"],
        withdrawal_mode=parse_enum(
            WithdrawalMode, obj["withdrawal_request_withdrawal_mode"]
        ),
        status=parse_enum(WithdrawalRequestStatus, obj["withdrawal_request_status"]),
        completed_at=(
            datetime.fromisoformat(obj["withdrawal_request_completed_at"])
            if obj["withdrawal_request_completed_at"]
            else None
        ),
        withdrawal_id=(
            obj["withdrawal_request_withdrawal"]["id"]
            if obj["withdrawal_request_withdrawal"]
            else None
        ),
        idempotency_key=obj["withdrawal_request_idempotency_key"],
        initiator=parse_enum(RequestInitiator, obj["withdrawal_request_initiator"]),
    )
