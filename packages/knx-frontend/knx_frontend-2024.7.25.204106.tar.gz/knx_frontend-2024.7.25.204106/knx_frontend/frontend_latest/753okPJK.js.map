{"version":3,"file":"753okPJK.js","mappings":";;AA2UA;AACA;;;AAIA;AACA;AACA;AACA;;;AAGA;;;AAIA;;AAIA;AACA;;;;AAQA;;;;;;;AAQA;AACA;AAEA;;;;AAKA;AAEA;;AA2BA;AACA;AACA;;AAOA;AAOA;AACA;;AAEA;;AAGA;;AAIA;AAEA;;AAEA;;;AAIA;;;;AAeA;AACA;AACA;AAjIA;;AAgHA;;;;AAKA;;;;;;;AAmBA;;AAsBA;;AAEA;AACA;AACA;AAMA;AAGA;;AAEA;;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;AAEA;;AAYA;AACA;AACA;AACA;AAYA;;AAOA;;AAKA;;AAqBA;;AAOA;;AA7GA;;;AAqMA;AACA;;;;AAIA;;;AAKA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+gBA;;;;AC/qCA;;ACoBA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AAUA;;AAGA;AACA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;AAqCA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/data-table/ha-data-table.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-checkbox.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/search-input.ts"],"sourcesContent":["import { mdiArrowDown, mdiArrowUp, mdiChevronUp } from \"@mdi/js\";\nimport deepClone from \"deep-clone-simple\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport {\n  customElement,\n  eventOptions,\n  property,\n  query,\n  state,\n} from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { restoreScroll } from \"../../common/decorators/restore-scroll\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { groupBy } from \"../../common/util/group-by\";\nimport { nextRender } from \"../../common/util/render-status\";\nimport { haStyleScrollbar } from \"../../resources/styles\";\nimport { loadVirtualizer } from \"../../resources/virtualizer\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-checkbox\";\nimport type { HaCheckbox } from \"../ha-checkbox\";\nimport \"../ha-svg-icon\";\nimport \"../search-input\";\nimport { filterData, sortData } from \"./sort-filter\";\nimport { LocalizeFunc } from \"../../common/translations/localize\";\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  value: string[];\n}\n\nexport interface CollapsedChangedEvent {\n  value: string[];\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTableColumnContainer<T = any> {\n  [key: string]: DataTableColumnData<T>;\n}\n\nexport interface DataTableSortColumnData {\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  valueColumn?: string;\n  direction?: SortingDirection;\n  groupable?: boolean;\n  moveable?: boolean;\n  hideable?: boolean;\n  defaultHidden?: boolean;\n  showNarrow?: boolean;\n}\n\nexport interface DataTableColumnData<T = any> extends DataTableSortColumnData {\n  main?: boolean;\n  title: TemplateResult | string;\n  label?: TemplateResult | string;\n  type?:\n    | \"numeric\"\n    | \"icon\"\n    | \"icon-button\"\n    | \"overflow\"\n    | \"overflow-menu\"\n    | \"flex\";\n  template?: (row: T) => TemplateResult | string | typeof nothing;\n  extraTemplate?: (row: T) => TemplateResult | string | typeof nothing;\n  width?: string;\n  maxWidth?: string;\n  grows?: boolean;\n  forceLTR?: boolean;\n  hidden?: boolean;\n}\n\nexport type ClonedDataTableColumnData = Omit<DataTableColumnData, \"title\"> & {\n  title?: TemplateResult | string;\n};\n\nexport interface DataTableRowData {\n  [key: string]: any;\n  selectable?: boolean;\n}\n\nexport interface SortableColumnContainer {\n  [key: string]: ClonedDataTableColumnData;\n}\n\nconst UNDEFINED_GROUP_KEY = \"zzzzz_undefined\";\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  @property({ type: Boolean }) public selectable = false;\n\n  @property({ type: Boolean }) public clickable = false;\n\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Add an extra row at the bottom of the data table\n   * @type {TemplateResult}\n   */\n  @property({ attribute: false }) public appendRow?;\n\n  @property({ type: Boolean, attribute: \"auto-height\" })\n  public autoHeight = false;\n\n  @property({ type: String }) public id = \"id\";\n\n  @property({ type: String }) public noDataText?: string;\n\n  @property({ type: String }) public searchLabel?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: String }) public filter = \"\";\n\n  @property() public groupColumn?: string;\n\n  @property({ attribute: false }) public groupOrder?: string[];\n\n  @property() public sortColumn?: string;\n\n  @property() public sortDirection: SortingDirection = null;\n\n  @property({ attribute: false }) public initialCollapsedGroups?: string[];\n\n  @property({ attribute: false }) public hiddenColumns?: string[];\n\n  @property({ attribute: false }) public columnOrder?: string[];\n\n  @state() private _filterable = false;\n\n  @state() private _filter = \"\";\n\n  @state() private _filteredData: DataTableRowData[] = [];\n\n  @state() private _headerHeight = 0;\n\n  @query(\"slot[name='header']\") private _header!: HTMLSlotElement;\n\n  @state() private _items: DataTableRowData[] = [];\n\n  @state() private _collapsedGroups: string[] = [];\n\n  private _checkableRowsCount?: number;\n\n  private _checkedRows: string[] = [];\n\n  private _sortColumns: SortableColumnContainer = {};\n\n  private curRequest = 0;\n\n  // @ts-ignore\n  @restoreScroll(\".scroller\") private _savedScrollPos?: number;\n\n  private _debounceSearch = debounce(\n    (value: string) => {\n      this._filter = value;\n    },\n    100,\n    false\n  );\n\n  public clearSelection(): void {\n    this._checkedRows = [];\n    this._checkedRowsChanged();\n  }\n\n  public selectAll(): void {\n    this._checkedRows = this._filteredData\n      .filter((data) => data.selectable !== false)\n      .map((data) => data[this.id]);\n    this._checkedRowsChanged();\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._items.length) {\n      // Force update of location of rows\n      this._items = [...this._items];\n    }\n  }\n\n  protected firstUpdated() {\n    this.updateComplete.then(() => this._calcTableHeight());\n  }\n\n  public willUpdate(properties: PropertyValues) {\n    super.willUpdate(properties);\n\n    if (!this.hasUpdated) {\n      loadVirtualizer();\n    }\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      if (!this.sortColumn) {\n        for (const columnId in this.columns) {\n          if (this.columns[columnId].direction) {\n            this.sortDirection = this.columns[columnId].direction!;\n            this.sortColumn = columnId;\n\n            fireEvent(this, \"sorting-changed\", {\n              column: columnId,\n              direction: this.sortDirection,\n            });\n\n            break;\n          }\n        }\n      }\n\n      const clonedColumns: DataTableColumnContainer = deepClone(this.columns);\n      Object.values(clonedColumns).forEach(\n        (column: ClonedDataTableColumnData) => {\n          delete column.title;\n          delete column.template;\n          delete column.extraTemplate;\n        }\n      );\n\n      this._sortColumns = clonedColumns;\n    }\n\n    if (properties.has(\"filter\")) {\n      this._debounceSearch(this.filter);\n    }\n\n    if (properties.has(\"data\")) {\n      this._checkableRowsCount = this.data.filter(\n        (row) => row.selectable !== false\n      ).length;\n    }\n\n    if (!this.hasUpdated && this.initialCollapsedGroups) {\n      this._collapsedGroups = this.initialCollapsedGroups;\n      fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n    } else if (properties.has(\"groupColumn\")) {\n      this._collapsedGroups = [];\n      fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n    }\n\n    if (\n      properties.has(\"data\") ||\n      properties.has(\"columns\") ||\n      properties.has(\"_filter\") ||\n      properties.has(\"sortColumn\") ||\n      properties.has(\"sortDirection\") ||\n      properties.has(\"groupColumn\") ||\n      properties.has(\"groupOrder\") ||\n      properties.has(\"_collapsedGroups\")\n    ) {\n      this._sortFilterData();\n    }\n\n    if (properties.has(\"selectable\") || properties.has(\"hiddenColumns\")) {\n      this._items = [...this._items];\n    }\n  }\n\n  private _sortedColumns = memoizeOne(\n    (columns: DataTableColumnContainer, columnOrder?: string[]) => {\n      if (!columnOrder || !columnOrder.length) {\n        return columns;\n      }\n\n      return Object.keys(columns)\n        .sort((a, b) => {\n          const orderA = columnOrder!.indexOf(a);\n          const orderB = columnOrder!.indexOf(b);\n          if (orderA !== orderB) {\n            if (orderA === -1) {\n              return 1;\n            }\n            if (orderB === -1) {\n              return -1;\n            }\n          }\n          return orderA - orderB;\n        })\n        .reduce((obj, key) => {\n          obj[key] = columns[key];\n          return obj;\n        }, {}) as DataTableColumnContainer;\n    }\n  );\n\n  protected render() {\n    const localize = this.localizeFunc || this.hass.localize;\n\n    const columns = this._sortedColumns(this.columns, this.columnOrder);\n\n    const renderRow = (row: DataTableRowData, index: number) =>\n      this._renderRow(columns, this.narrow, row, index);\n\n    return html`\n      <div class=\"mdc-data-table\">\n        <slot name=\"header\" @slotchange=${this._calcTableHeight}>\n          ${this._filterable\n            ? html`\n                <div class=\"table-header\">\n                  <search-input\n                    .hass=${this.hass}\n                    @value-changed=${this._handleSearchChange}\n                    .label=${this.searchLabel}\n                    .noLabelFloat=${this.noLabelFloat}\n                  ></search-input>\n                </div>\n              `\n            : \"\"}\n        </slot>\n        <div\n          class=\"mdc-data-table__table ${classMap({\n            \"auto-height\": this.autoHeight,\n          })}\"\n          role=\"table\"\n          aria-rowcount=${this._filteredData.length + 1}\n          style=${styleMap({\n            height: this.autoHeight\n              ? `${(this._filteredData.length || 1) * 53 + 53}px`\n              : `calc(100% - ${this._headerHeight}px)`,\n          })}\n        >\n          <div class=\"mdc-data-table__header-row\" role=\"row\" aria-rowindex=\"1\">\n            <slot name=\"header-row\">\n              ${this.selectable\n                ? html`\n                    <div\n                      class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                      role=\"columnheader\"\n                    >\n                      <ha-checkbox\n                        class=\"mdc-data-table__row-checkbox\"\n                        @change=${this._handleHeaderRowCheckboxClick}\n                        .indeterminate=${this._checkedRows.length &&\n                        this._checkedRows.length !== this._checkableRowsCount}\n                        .checked=${this._checkedRows.length &&\n                        this._checkedRows.length === this._checkableRowsCount}\n                      >\n                      </ha-checkbox>\n                    </div>\n                  `\n                : \"\"}\n              ${Object.entries(columns).map(([key, column]) => {\n                if (\n                  column.hidden ||\n                  (this.columnOrder && this.columnOrder.includes(key)\n                    ? (this.hiddenColumns?.includes(key) ??\n                      column.defaultHidden)\n                    : column.defaultHidden)\n                ) {\n                  return nothing;\n                }\n                const sorted = key === this.sortColumn;\n                const classes = {\n                  \"mdc-data-table__header-cell--numeric\":\n                    column.type === \"numeric\",\n                  \"mdc-data-table__header-cell--icon\": column.type === \"icon\",\n                  \"mdc-data-table__header-cell--icon-button\":\n                    column.type === \"icon-button\",\n                  \"mdc-data-table__header-cell--overflow-menu\":\n                    column.type === \"overflow-menu\",\n                  \"mdc-data-table__header-cell--overflow\":\n                    column.type === \"overflow\",\n                  sortable: Boolean(column.sortable),\n                  \"not-sorted\": Boolean(column.sortable && !sorted),\n                  grows: Boolean(column.grows),\n                };\n                return html`\n                  <div\n                    aria-label=${ifDefined(column.label)}\n                    class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                    style=${column.width\n                      ? styleMap({\n                          [column.grows ? \"minWidth\" : \"width\"]: column.width,\n                          maxWidth: column.maxWidth || \"\",\n                        })\n                      : \"\"}\n                    role=\"columnheader\"\n                    aria-sort=${ifDefined(\n                      sorted\n                        ? this.sortDirection === \"desc\"\n                          ? \"descending\"\n                          : \"ascending\"\n                        : undefined\n                    )}\n                    @click=${this._handleHeaderClick}\n                    .columnId=${key}\n                  >\n                    ${column.sortable\n                      ? html`\n                          <ha-svg-icon\n                            .path=${sorted && this.sortDirection === \"desc\"\n                              ? mdiArrowDown\n                              : mdiArrowUp}\n                          ></ha-svg-icon>\n                        `\n                      : \"\"}\n                    <span>${column.title}</span>\n                  </div>\n                `;\n              })}\n            </slot>\n          </div>\n          ${!this._filteredData.length\n            ? html`\n                <div class=\"mdc-data-table__content\">\n                  <div class=\"mdc-data-table__row\" role=\"row\">\n                    <div class=\"mdc-data-table__cell grows center\" role=\"cell\">\n                      ${this.noDataText ||\n                      localize(\"ui.components.data-table.no-data\")}\n                    </div>\n                  </div>\n                </div>\n              `\n            : html`\n                <lit-virtualizer\n                  scroller\n                  class=\"mdc-data-table__content scroller ha-scrollbar\"\n                  @scroll=${this._saveScrollPos}\n                  .items=${this._items}\n                  .keyFunction=${this._keyFunction}\n                  .renderItem=${renderRow}\n                ></lit-virtualizer>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  private _keyFunction = (row: DataTableRowData) => row?.[this.id] || row;\n\n  private _renderRow = (\n    columns: DataTableColumnContainer,\n    narrow: boolean,\n    row: DataTableRowData,\n    index: number\n  ) => {\n    // not sure how this happens...\n    if (!row) {\n      return nothing;\n    }\n    if (row.append) {\n      return html`<div class=\"mdc-data-table__row\">${row.content}</div>`;\n    }\n    if (row.empty) {\n      return html`<div class=\"mdc-data-table__row\"></div>`;\n    }\n    return html`\n      <div\n        aria-rowindex=${index + 2}\n        role=\"row\"\n        .rowId=${row[this.id]}\n        @click=${this._handleRowClick}\n        class=\"mdc-data-table__row ${classMap({\n          \"mdc-data-table__row--selected\": this._checkedRows.includes(\n            String(row[this.id])\n          ),\n          clickable: this.clickable,\n        })}\"\n        aria-selected=${ifDefined(\n          this._checkedRows.includes(String(row[this.id])) ? true : undefined\n        )}\n        .selectable=${row.selectable !== false}\n      >\n        ${this.selectable\n          ? html`\n              <div\n                class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                role=\"cell\"\n              >\n                <ha-checkbox\n                  class=\"mdc-data-table__row-checkbox\"\n                  @change=${this._handleRowCheckboxClick}\n                  .rowId=${row[this.id]}\n                  .disabled=${row.selectable === false}\n                  .checked=${this._checkedRows.includes(String(row[this.id]))}\n                >\n                </ha-checkbox>\n              </div>\n            `\n          : \"\"}\n        ${Object.entries(columns).map(([key, column]) => {\n          if (\n            (narrow && !column.main && !column.showNarrow) ||\n            column.hidden ||\n            (this.columnOrder && this.columnOrder.includes(key)\n              ? (this.hiddenColumns?.includes(key) ?? column.defaultHidden)\n              : column.defaultHidden)\n          ) {\n            return nothing;\n          }\n          return html`\n            <div\n              @mouseover=${this._setTitle}\n              @focus=${this._setTitle}\n              role=${column.main ? \"rowheader\" : \"cell\"}\n              class=\"mdc-data-table__cell ${classMap({\n                \"mdc-data-table__cell--flex\": column.type === \"flex\",\n                \"mdc-data-table__cell--numeric\": column.type === \"numeric\",\n                \"mdc-data-table__cell--icon\": column.type === \"icon\",\n                \"mdc-data-table__cell--icon-button\":\n                  column.type === \"icon-button\",\n                \"mdc-data-table__cell--overflow-menu\":\n                  column.type === \"overflow-menu\",\n                \"mdc-data-table__cell--overflow\": column.type === \"overflow\",\n                grows: Boolean(column.grows),\n                forceLTR: Boolean(column.forceLTR),\n              })}\"\n              style=${column.width\n                ? styleMap({\n                    [column.grows ? \"minWidth\" : \"width\"]: column.width,\n                    maxWidth: column.maxWidth ? column.maxWidth : \"\",\n                  })\n                : \"\"}\n            >\n              ${column.template\n                ? column.template(row)\n                : narrow && column.main\n                  ? html`<div class=\"primary\">${row[key]}</div>\n                      <div class=\"secondary\">\n                        ${Object.entries(columns)\n                          .filter(\n                            ([key2, column2]) =>\n                              !column2.hidden &&\n                              !column2.main &&\n                              !column2.showNarrow &&\n                              !(this.columnOrder &&\n                              this.columnOrder.includes(key2)\n                                ? (this.hiddenColumns?.includes(key2) ??\n                                  column2.defaultHidden)\n                                : column2.defaultHidden)\n                          )\n                          .map(\n                            ([key2, column2], i) =>\n                              html`${i !== 0\n                                ? \" ⸱ \"\n                                : nothing}${column2.template\n                                ? column2.template(row)\n                                : row[key2]}`\n                          )}\n                      </div>\n                      ${column.extraTemplate\n                        ? column.extraTemplate(row)\n                        : nothing}`\n                  : html`${row[key]}${column.extraTemplate\n                      ? column.extraTemplate(row)\n                      : nothing}`}\n            </div>\n          `;\n        })}\n      </div>\n    `;\n  };\n\n  private async _sortFilterData() {\n    const startTime = new Date().getTime();\n    this.curRequest++;\n    const curRequest = this.curRequest;\n\n    let filteredData = this.data;\n    if (this._filter) {\n      filteredData = await this._memFilterData(\n        this.data,\n        this._sortColumns,\n        this._filter\n      );\n    }\n\n    const prom = this.sortColumn\n      ? sortData(\n          filteredData,\n          this._sortColumns[this.sortColumn],\n          this.sortDirection,\n          this.sortColumn,\n          this.hass.locale.language\n        )\n      : filteredData;\n\n    const [data] = await Promise.all([prom, nextRender]);\n\n    const curTime = new Date().getTime();\n    const elapsed = curTime - startTime;\n\n    if (elapsed < 100) {\n      await new Promise((resolve) => {\n        setTimeout(resolve, 100 - elapsed);\n      });\n    }\n    if (this.curRequest !== curRequest) {\n      return;\n    }\n\n    const localize = this.localizeFunc || this.hass.localize;\n\n    if (this.appendRow || this.hasFab || this.groupColumn) {\n      let items = [...data];\n\n      if (this.groupColumn) {\n        const grouped = groupBy(items, (item) => item[this.groupColumn!]);\n        if (grouped.undefined) {\n          // make sure ungrouped items are at the bottom\n          grouped[UNDEFINED_GROUP_KEY] = grouped.undefined;\n          delete grouped.undefined;\n        }\n        const sorted: {\n          [key: string]: DataTableRowData[];\n        } = Object.keys(grouped)\n          .sort((a, b) => {\n            const orderA = this.groupOrder?.indexOf(a) ?? -1;\n            const orderB = this.groupOrder?.indexOf(b) ?? -1;\n            if (orderA !== orderB) {\n              if (orderA === -1) {\n                return 1;\n              }\n              if (orderB === -1) {\n                return -1;\n              }\n              return orderA - orderB;\n            }\n            return stringCompare(\n              [\"\", \"-\", \"—\"].includes(a) ? \"zzz\" : a,\n              [\"\", \"-\", \"—\"].includes(b) ? \"zzz\" : b,\n              this.hass.locale.language\n            );\n          })\n          .reduce((obj, key) => {\n            obj[key] = grouped[key];\n            return obj;\n          }, {});\n        const groupedItems: DataTableRowData[] = [];\n        Object.entries(sorted).forEach(([groupName, rows]) => {\n          groupedItems.push({\n            append: true,\n            content: html`<div\n              class=\"mdc-data-table__cell group-header\"\n              role=\"cell\"\n              .group=${groupName}\n              @click=${this._collapseGroup}\n            >\n              <ha-icon-button\n                .path=${mdiChevronUp}\n                class=${this._collapsedGroups.includes(groupName)\n                  ? \"collapsed\"\n                  : \"\"}\n              >\n              </ha-icon-button>\n              ${groupName === UNDEFINED_GROUP_KEY\n                ? localize(\"ui.components.data-table.ungrouped\")\n                : groupName || \"\"}\n            </div>`,\n          });\n          if (!this._collapsedGroups.includes(groupName)) {\n            groupedItems.push(...rows);\n          }\n        });\n        items = groupedItems;\n      }\n\n      if (this.appendRow) {\n        items.push({ append: true, content: this.appendRow });\n      }\n\n      if (this.hasFab) {\n        items.push({ empty: true });\n      }\n\n      this._items = items;\n    } else {\n      this._items = data;\n    }\n    this._filteredData = data;\n  }\n\n  private _memFilterData = memoizeOne(\n    (\n      data: DataTableRowData[],\n      columns: SortableColumnContainer,\n      filter: string\n    ): Promise<DataTableRowData[]> => filterData(data, columns, filter)\n  );\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = (ev.currentTarget as any).columnId;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this.sortDirection || this.sortColumn !== columnId) {\n      this.sortDirection = \"asc\";\n    } else if (this.sortDirection === \"asc\") {\n      this.sortDirection = \"desc\";\n    } else {\n      this.sortDirection = null;\n    }\n\n    this.sortColumn = this.sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this.sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxClick(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    if (checkbox.checked) {\n      this.selectAll();\n    } else {\n      this._checkedRows = [];\n      this._checkedRowsChanged();\n    }\n  }\n\n  private _handleRowCheckboxClick = (ev: Event) => {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const rowId = (checkbox as any).rowId;\n\n    if (checkbox.checked) {\n      if (this._checkedRows.includes(rowId)) {\n        return;\n      }\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else {\n      this._checkedRows = this._checkedRows.filter((row) => row !== rowId);\n    }\n    this._checkedRowsChanged();\n  };\n\n  private _handleRowClick = (ev: Event) => {\n    if (\n      ev\n        .composedPath()\n        .find((el) =>\n          [\n            \"ha-checkbox\",\n            \"mwc-button\",\n            \"ha-button\",\n            \"ha-icon-button\",\n            \"ha-assist-chip\",\n          ].includes((el as HTMLElement).localName)\n        )\n    ) {\n      return;\n    }\n    const rowId = (ev.currentTarget as any).rowId;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  };\n\n  private _setTitle(ev: Event) {\n    const target = ev.currentTarget as HTMLElement;\n    if (target.scrollWidth > target.offsetWidth) {\n      target.setAttribute(\"title\", target.innerText);\n    }\n  }\n\n  private _checkedRowsChanged() {\n    // force scroller to update, change it's items\n    if (this._items.length) {\n      this._items = [...this._items];\n    }\n    fireEvent(this, \"selection-changed\", {\n      value: this._checkedRows,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    if (this.filter) {\n      return;\n    }\n    this._debounceSearch(ev.detail.value);\n  }\n\n  private async _calcTableHeight() {\n    if (this.autoHeight) {\n      return;\n    }\n    await this.updateComplete;\n    this._headerHeight = this._header.clientHeight;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _collapseGroup = (ev: Event) => {\n    const groupName = (ev.currentTarget as any).group;\n    if (this._collapsedGroups.includes(groupName)) {\n      this._collapsedGroups = this._collapsedGroups.filter(\n        (grp) => grp !== groupName\n      );\n    } else {\n      this._collapsedGroups = [...this._collapsedGroups, groupName];\n    }\n    fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n  };\n\n  public expandAllGroups() {\n    this._collapsedGroups = [];\n    fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n  }\n\n  public collapseAllGroups() {\n    if (\n      !this.groupColumn ||\n      !this.data.some((item) => item[this.groupColumn!])\n    ) {\n      return;\n    }\n    const grouped = groupBy(this.data, (item) => item[this.groupColumn!]);\n    if (grouped.undefined) {\n      // undefined is a reserved group name\n      grouped[UNDEFINED_GROUP_KEY] = grouped.undefined;\n      delete grouped.undefined;\n    }\n    this._collapsedGroups = Object.keys(grouped);\n    fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        /* default mdc styles, colors changed, without checkbox styles */\n        :host {\n          height: 100%;\n        }\n        .mdc-data-table__content {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 400;\n          letter-spacing: 0.0178571429em;\n          text-decoration: inherit;\n          text-transform: inherit;\n        }\n\n        .mdc-data-table {\n          background-color: var(--data-table-background-color);\n          border-radius: 4px;\n          border-width: 1px;\n          border-style: solid;\n          border-color: var(--divider-color);\n          display: inline-flex;\n          flex-direction: column;\n          box-sizing: border-box;\n          overflow: hidden;\n        }\n\n        .mdc-data-table__row--selected {\n          background-color: rgba(var(--rgb-primary-color), 0.04);\n        }\n\n        .mdc-data-table__row {\n          display: flex;\n          width: 100%;\n          height: var(--data-table-row-height, 52px);\n        }\n\n        .mdc-data-table__row ~ .mdc-data-table__row {\n          border-top: 1px solid var(--divider-color);\n        }\n\n        .mdc-data-table__row.clickable:not(\n            .mdc-data-table__row--selected\n          ):hover {\n          background-color: rgba(var(--rgb-primary-text-color), 0.04);\n        }\n\n        .mdc-data-table__header-cell {\n          color: var(--primary-text-color);\n        }\n\n        .mdc-data-table__cell {\n          color: var(--primary-text-color);\n        }\n\n        .mdc-data-table__header-row {\n          height: 56px;\n          display: flex;\n          width: 100%;\n          border-bottom: 1px solid var(--divider-color);\n        }\n\n        .mdc-data-table__header-row::-webkit-scrollbar {\n          display: none;\n        }\n\n        .mdc-data-table__cell,\n        .mdc-data-table__header-cell {\n          padding-right: 16px;\n          padding-left: 16px;\n          align-self: center;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          flex-shrink: 0;\n          box-sizing: border-box;\n        }\n\n        .mdc-data-table__cell.mdc-data-table__cell--flex {\n          display: flex;\n          overflow: initial;\n        }\n\n        .mdc-data-table__cell.mdc-data-table__cell--icon {\n          overflow: initial;\n        }\n\n        .mdc-data-table__header-cell--checkbox,\n        .mdc-data-table__cell--checkbox {\n          /* @noflip */\n          padding-left: 16px;\n          /* @noflip */\n          padding-right: 0;\n          /* @noflip */\n          padding-inline-start: 16px;\n          /* @noflip */\n          padding-inline-end: initial;\n          width: 60px;\n        }\n\n        .mdc-data-table__table {\n          height: 100%;\n          width: 100%;\n          border: 0;\n          white-space: nowrap;\n          position: relative;\n        }\n\n        .mdc-data-table__cell {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 400;\n          letter-spacing: 0.0178571429em;\n          text-decoration: inherit;\n          text-transform: inherit;\n        }\n\n        .mdc-data-table__cell a {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        .mdc-data-table__cell--numeric {\n          text-align: var(--float-end);\n        }\n\n        .mdc-data-table__cell--icon {\n          color: var(--secondary-text-color);\n          text-align: center;\n        }\n\n        .mdc-data-table__header-cell--icon,\n        .mdc-data-table__cell--icon {\n          width: 54px;\n        }\n\n        .mdc-data-table__cell--icon img {\n          width: 24px;\n          height: 24px;\n        }\n\n        .mdc-data-table__header-cell.mdc-data-table__header-cell--icon {\n          text-align: center;\n        }\n\n        .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:hover,\n        .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:not(\n            .not-sorted\n          ) {\n          text-align: var(--float-start);\n        }\n\n        .mdc-data-table__cell--icon:first-child img,\n        .mdc-data-table__cell--icon:first-child ha-icon,\n        .mdc-data-table__cell--icon:first-child ha-svg-icon,\n        .mdc-data-table__cell--icon:first-child ha-state-icon,\n        .mdc-data-table__cell--icon:first-child ha-domain-icon,\n        .mdc-data-table__cell--icon:first-child ha-service-icon {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n        }\n\n        .mdc-data-table__cell--icon:first-child state-badge {\n          margin-right: -8px;\n          margin-inline-end: -8px;\n          margin-inline-start: initial;\n        }\n\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__header-cell--overflow-menu,\n        .mdc-data-table__header-cell--icon-button,\n        .mdc-data-table__cell--icon-button {\n          padding: 8px;\n        }\n\n        .mdc-data-table__header-cell--icon-button,\n        .mdc-data-table__cell--icon-button {\n          width: 56px;\n        }\n\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__cell--icon-button {\n          color: var(--secondary-text-color);\n          text-overflow: clip;\n        }\n\n        .mdc-data-table__header-cell--icon-button:first-child,\n        .mdc-data-table__cell--icon-button:first-child,\n        .mdc-data-table__header-cell--icon-button:last-child,\n        .mdc-data-table__cell--icon-button:last-child {\n          width: 64px;\n        }\n\n        .mdc-data-table__cell--overflow-menu:first-child,\n        .mdc-data-table__header-cell--overflow-menu:first-child,\n        .mdc-data-table__header-cell--icon-button:first-child,\n        .mdc-data-table__cell--icon-button:first-child {\n          padding-left: 16px;\n          padding-inline-start: 16px;\n          padding-inline-end: initial;\n        }\n\n        .mdc-data-table__cell--overflow-menu:last-child,\n        .mdc-data-table__header-cell--overflow-menu:last-child,\n        .mdc-data-table__header-cell--icon-button:last-child,\n        .mdc-data-table__cell--icon-button:last-child {\n          padding-right: 16px;\n          padding-inline-end: 16px;\n          padding-inline-start: initial;\n        }\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__cell--overflow,\n        .mdc-data-table__header-cell--overflow-menu,\n        .mdc-data-table__header-cell--overflow {\n          overflow: initial;\n        }\n        .mdc-data-table__cell--icon-button a {\n          color: var(--secondary-text-color);\n        }\n\n        .mdc-data-table__header-cell {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.375rem;\n          font-weight: 500;\n          letter-spacing: 0.0071428571em;\n          text-decoration: inherit;\n          text-transform: inherit;\n          text-align: var(--float-start);\n        }\n\n        .mdc-data-table__header-cell--numeric {\n          text-align: var(--float-end);\n        }\n        .mdc-data-table__header-cell--numeric.sortable:hover,\n        .mdc-data-table__header-cell--numeric.sortable:not(.not-sorted) {\n          text-align: var(--float-start);\n        }\n\n        /* custom from here */\n\n        .group-header {\n          padding-top: 12px;\n          padding-left: 12px;\n          padding-inline-start: 12px;\n          padding-inline-end: initial;\n          width: 100%;\n          font-weight: 500;\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n        }\n\n        .group-header ha-icon-button {\n          transition: transform 0.2s ease;\n        }\n\n        .group-header ha-icon-button.collapsed {\n          transform: rotate(180deg);\n        }\n\n        :host {\n          display: block;\n        }\n\n        .mdc-data-table {\n          display: block;\n          border-width: var(--data-table-border-width, 1px);\n          height: 100%;\n        }\n        .mdc-data-table__header-cell {\n          overflow: hidden;\n          position: relative;\n        }\n        .mdc-data-table__header-cell span {\n          position: relative;\n          left: 0px;\n          inset-inline-start: 0px;\n          inset-inline-end: initial;\n        }\n\n        .mdc-data-table__header-cell.sortable {\n          cursor: pointer;\n        }\n        .mdc-data-table__header-cell > * {\n          transition: var(--float-start) 0.2s ease;\n        }\n        .mdc-data-table__header-cell ha-svg-icon {\n          top: -3px;\n          position: absolute;\n        }\n        .mdc-data-table__header-cell.not-sorted ha-svg-icon {\n          left: -20px;\n          inset-inline-start: -20px;\n          inset-inline-end: initial;\n        }\n        .mdc-data-table__header-cell.sortable:not(.not-sorted) span,\n        .mdc-data-table__header-cell.sortable.not-sorted:hover span {\n          left: 24px;\n          inset-inline-start: 24px;\n          inset-inline-end: initial;\n        }\n        .mdc-data-table__header-cell.sortable:not(.not-sorted) ha-svg-icon,\n        .mdc-data-table__header-cell.sortable:hover.not-sorted ha-svg-icon {\n          left: 12px;\n          inset-inline-start: 12px;\n          inset-inline-end: initial;\n        }\n        .table-header {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        search-input {\n          display: block;\n          flex: 1;\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: transparent;\n        }\n        slot[name=\"header\"] {\n          display: block;\n        }\n        .center {\n          text-align: center;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        .scroller {\n          height: calc(100% - 57px);\n          overflow: overlay !important;\n        }\n\n        .mdc-data-table__table.auto-height .scroller {\n          overflow-y: hidden !important;\n        }\n        .grows {\n          flex-grow: 1;\n          flex-shrink: 1;\n        }\n        .forceLTR {\n          direction: ltr;\n        }\n        .clickable {\n          cursor: pointer;\n        }\n        lit-virtualizer {\n          contain: size layout !important;\n          overscroll-behavior: contain;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n    \"collapsed-changed\": CollapsedChangedEvent;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\nimport type { HaTextField } from \"./ha-textfield\";\nimport { HomeAssistant } from \"../types\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter?: string;\n\n  @property({ type: Boolean })\n  public suffix = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  public focus() {\n    this._input?.focus();\n  }\n\n  @query(\"ha-textfield\", true) private _input!: HaTextField;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-textfield\n        .autofocus=${this.autofocus}\n        .label=${this.label || this.hass.localize(\"ui.common.search\")}\n        .value=${this.filter || \"\"}\n        icon\n        .iconTrailing=${this.filter || this.suffix}\n        @input=${this._filterInputChanged}\n      >\n        <slot name=\"prefix\" slot=\"leadingIcon\">\n          <ha-svg-icon\n            tabindex=\"-1\"\n            class=\"prefix\"\n            .path=${mdiMagnify}\n          ></ha-svg-icon>\n        </slot>\n        <div class=\"trailing\" slot=\"trailingIcon\">\n          ${this.filter &&\n          html`\n            <ha-icon-button\n              @click=${this._clearSearch}\n              .label=${this.hass.localize(\"ui.common.clear\")}\n              .path=${mdiClose}\n              class=\"clear-button\"\n            ></ha-icon-button>\n          `}\n          <slot name=\"suffix\"></slot>\n        </div>\n      </ha-textfield>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value?.trim());\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-flex;\n      }\n      ha-svg-icon,\n      ha-icon-button {\n        color: var(--primary-text-color);\n      }\n      ha-svg-icon {\n        outline: none;\n      }\n      .clear-button {\n        --mdc-icon-size: 20px;\n      }\n      ha-textfield {\n        display: inherit;\n      }\n      .trailing {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n"],"names":[],"sourceRoot":""}