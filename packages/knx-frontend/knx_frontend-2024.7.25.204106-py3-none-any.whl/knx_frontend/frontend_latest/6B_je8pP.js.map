{"version":3,"file":"6B_je8pP.js","mappings":";;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8CA;AAIA;;AAKA;;;;;ACxCA;ACkBA;;;AAIA;;AASA;AAEA;AAGA;;;AAIA;AACA;;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAkBA;;AAEA;;AAEA;;;AAGA;AACA;AAEA;;AAEA;AAOA;;AAEA;;AAEA;;;AAGA;AACA;AAEA;;AAEA;;AA9CA;;AAEA;AACA;;;AAIA;;AAKA;;;;;AAwCA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;AC7QA;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AAGA;;;;AAIA;;AAGA;AACA;;;;AAKA;;;;;;;;;;;;;;;AA8DA;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AAEA;;AAGA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;;ACCA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AAGA;AACA;;;;;AAOA;;AAKA;;;;AAIA;;;;;ACtFA;;;;AD+FA;;AAEA;;;;;AAKA;AACA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;;AAKA;;;;;;AAOA;;;;AAOA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;;AAEA;;;;;;AAOA;;AAKA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-card.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-circular-progress.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-file-upload.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-multi-textfield.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-text.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-textarea.ts","webpack://knx-frontend/./src/views/info.ts","webpack://knx-frontend/./src/version.ts"],"sourcesContent":["import { Button } from \"@material/mwc-button\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { styles } from \"@material/mwc-button/styles.css\";\n\n@customElement(\"ha-button\")\nexport class HaButton extends Button {\n  static override styles = [\n    styles,\n    css`\n      ::slotted([slot=\"icon\"]) {\n        margin-inline-start: 0px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n        display: block;\n      }\n      .mdc-button {\n        height: var(--button-height, 36px);\n      }\n      .trailing-icon {\n        display: flex;\n      }\n      .slot-container {\n        overflow: var(--button-slot-container-overflow, visible);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button\": HaButton;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        -webkit-backdrop-filter: var(--ha-card-backdrop-filter, none);\n        backdrop-filter: var(--ha-card-backdrop-filter, none);\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render() {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : nothing}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { MdCircularProgress } from \"@material/web/progress/circular-progress\";\nimport { PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\nexport class HaCircularProgress extends MdCircularProgress {\n  @property({ attribute: \"aria-label\", type: String }) public ariaLabel =\n    \"Loading\";\n\n  @property() public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"size\")) {\n      switch (this.size) {\n        case \"tiny\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"16px\");\n          break;\n        case \"small\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"28px\");\n          break;\n        // medium is default size\n        case \"medium\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"48px\");\n          break;\n        case \"large\":\n          this.style.setProperty(\"--md-circular-progress-size\", \"68px\");\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-primary: var(--primary-color);\n        --md-circular-progress-size: 48px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiDelete, mdiFileUpload } from \"@mdi/js\";\nimport { LitElement, PropertyValues, TemplateResult, css, html } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-icon-button\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { ensureArray } from \"../common/array/ensure-array\";\nimport { bytesToString } from \"../util/bytes-to-string\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: File[] };\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public accept!: string;\n\n  @property() public icon?: string;\n\n  @property() public label?: string;\n\n  @property() public secondary?: string;\n\n  @property() public supports?: string;\n\n  @property({ type: Object }) public value?: File | File[] | FileList | string;\n\n  @property({ type: Boolean }) public multiple = false;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public uploading = false;\n\n  @property({ type: Number }) public progress?: number;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  public autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._openFilePicker();\n    }\n  }\n\n  public render(): TemplateResult {\n    return html`\n      ${this.uploading\n        ? html`<div class=\"container\">\n            <div class=\"row\">\n              <span class=\"header\"\n                >${this.value\n                  ? this.hass?.localize(\n                      \"ui.components.file-upload.uploading_name\",\n                      { name: this.value.toString() }\n                    )\n                  : this.hass?.localize(\n                      \"ui.components.file-upload.uploading\"\n                    )}</span\n              >\n              ${this.progress\n                ? html`<span class=\"progress\"\n                    >${this.progress}${blankBeforePercent(\n                      this.hass!.locale\n                    )}%</span\n                  >`\n                : \"\"}\n            </div>\n            <mwc-linear-progress\n              .indeterminate=${!this.progress}\n              .progress=${this.progress ? this.progress / 100 : undefined}\n            ></mwc-linear-progress>\n          </div>`\n        : html`<label\n            for=${this.value ? \"\" : \"input\"}\n            class=\"container ${classMap({\n              dragged: this._drag,\n              multiple: this.multiple,\n              value: Boolean(this.value),\n            })}\"\n            @drop=${this._handleDrop}\n            @dragenter=${this._handleDragStart}\n            @dragover=${this._handleDragStart}\n            @dragleave=${this._handleDragEnd}\n            @dragend=${this._handleDragEnd}\n            >${!this.value\n              ? html`<ha-svg-icon\n                    class=\"big-icon\"\n                    .path=${this.icon || mdiFileUpload}\n                  ></ha-svg-icon>\n                  <ha-button unelevated @click=${this._openFilePicker}>\n                    ${this.label ||\n                    this.hass?.localize(\"ui.components.file-upload.label\")}\n                  </ha-button>\n                  <span class=\"secondary\"\n                    >${this.secondary ||\n                    this.hass?.localize(\n                      \"ui.components.file-upload.secondary\"\n                    )}</span\n                  >\n                  <span class=\"supports\">${this.supports}</span>`\n              : typeof this.value === \"string\"\n                ? html`<div class=\"row\">\n                    <div class=\"value\" @click=${this._openFilePicker}>\n                      <ha-svg-icon\n                        .path=${this.icon || mdiFileUpload}\n                      ></ha-svg-icon>\n                      ${this.value}\n                    </div>\n                    <ha-icon-button\n                      @click=${this._clearValue}\n                      .label=${this.hass?.localize(\"ui.common.delete\") ||\n                      \"Delete\"}\n                      .path=${mdiDelete}\n                    ></ha-icon-button>\n                  </div>`\n                : (this.value instanceof FileList\n                    ? Array.from(this.value)\n                    : ensureArray(this.value)\n                  ).map(\n                    (file) =>\n                      html`<div class=\"row\">\n                        <div class=\"value\" @click=${this._openFilePicker}>\n                          <ha-svg-icon\n                            .path=${this.icon || mdiFileUpload}\n                          ></ha-svg-icon>\n                          ${file.name} - ${bytesToString(file.size)}\n                        </div>\n                        <ha-icon-button\n                          @click=${this._clearValue}\n                          .label=${this.hass?.localize(\"ui.common.delete\") ||\n                          \"Delete\"}\n                          .path=${mdiDelete}\n                        ></ha-icon-button>\n                      </div>`\n                  )}\n            <input\n              id=\"input\"\n              type=\"file\"\n              class=\"file\"\n              .accept=${this.accept}\n              .multiple=${this.multiple}\n              @change=${this._handleFilePicked}\n          /></label>`}\n    `;\n  }\n\n  private _openFilePicker() {\n    this._input?.click();\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", {\n        files:\n          this.multiple || ev.dataTransfer.files.length === 1\n            ? Array.from(ev.dataTransfer.files)\n            : [ev.dataTransfer.files[0]],\n      });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    if (ev.target.files.length === 0) {\n      return;\n    }\n    this.value = ev.target.files;\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this._input!.value = \"\";\n    this.value = undefined;\n    fireEvent(this, \"change\");\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        height: 240px;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n        color: var(--disabled-text-color);\n      }\n      .container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        border: solid 1px\n          var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n        border-radius: var(--mdc-shape-small, 4px);\n        height: 100%;\n      }\n      label.container {\n        border: dashed 1px\n          var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n        cursor: pointer;\n      }\n      :host([disabled]) .container {\n        border-color: var(--disabled-color);\n      }\n      label.dragged {\n        border-color: var(--primary-color);\n      }\n      .dragged:before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        background-color: var(--primary-color);\n        content: \"\";\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n        border-radius: var(--mdc-shape-small, 4px);\n      }\n      label.value {\n        cursor: default;\n      }\n      label.value.multiple {\n        justify-content: unset;\n        overflow: auto;\n      }\n      .highlight {\n        color: var(--primary-color);\n      }\n      .row {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: space-between;\n        padding: 0 16px;\n        box-sizing: border-box;\n      }\n      ha-button {\n        margin-bottom: 4px;\n      }\n      .supports {\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n      :host([disabled]) .secondary {\n        color: var(--disabled-text-color);\n      }\n      input.file {\n        display: none;\n      }\n      .value {\n        cursor: pointer;\n      }\n      .value ha-svg-icon {\n        margin-right: 8px;\n        margin-inline-end: 8px;\n        margin-inline-start: initial;\n      }\n      .big-icon {\n        --mdc-icon-size: 48px;\n        margin-bottom: 8px;\n      }\n      ha-button {\n        --mdc-button-outline-color: var(--primary-color);\n        --mdc-icon-button-size: 24px;\n      }\n      mwc-linear-progress {\n        width: 100%;\n        padding: 16px;\n        box-sizing: border-box;\n      }\n      .header {\n        font-weight: 500;\n      }\n      .progress {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n","import { mdiDeleteOutline, mdiPlus } from \"@mdi/js\";\nimport { CSSResultGroup, LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { haStyle } from \"../resources/styles\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-icon-button\";\nimport \"./ha-textfield\";\nimport type { HaTextField } from \"./ha-textfield\";\n\n@customElement(\"ha-multi-textfield\")\nclass HaMultiTextField extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public value?: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @property() public inputType?: string;\n\n  @property() public inputSuffix?: string;\n\n  @property() public inputPrefix?: string;\n\n  @property() public autocomplete?: string;\n\n  @property() public addLabel?: string;\n\n  @property() public removeLabel?: string;\n\n  @property({ attribute: \"item-index\", type: Boolean })\n  public itemIndex = false;\n\n  protected render() {\n    return html`\n      ${this._items.map((item, index) => {\n        const indexSuffix = `${this.itemIndex ? ` ${index + 1}` : \"\"}`;\n        return html`\n          <div class=\"layout horizontal center-center row\">\n            <ha-textfield\n              .suffix=${this.inputSuffix}\n              .prefix=${this.inputPrefix}\n              .type=${this.inputType}\n              .autocomplete=${this.autocomplete}\n              .disabled=${this.disabled}\n              dialogInitialFocus=${index}\n              .index=${index}\n              class=\"flex-auto\"\n              .label=${`${this.label ? `${this.label}${indexSuffix}` : \"\"}`}\n              .value=${item}\n              ?data-last=${index === this._items.length - 1}\n              @input=${this._editItem}\n              @keydown=${this._keyDown}\n            ></ha-textfield>\n            <ha-icon-button\n              .disabled=${this.disabled}\n              .index=${index}\n              slot=\"navigationIcon\"\n              .label=${this.removeLabel ??\n              this.hass?.localize(\"ui.common.remove\") ??\n              \"Remove\"}\n              @click=${this._removeItem}\n              .path=${mdiDeleteOutline}\n            ></ha-icon-button>\n          </div>\n        `;\n      })}\n      <div class=\"layout horizontal center-center\">\n        <ha-button @click=${this._addItem} .disabled=${this.disabled}>\n          ${this.addLabel ?? this.hass?.localize(\"ui.common.add\") ?? \"Add\"}\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-button>\n      </div>\n    `;\n  }\n\n  private get _items() {\n    return this.value ?? [];\n  }\n\n  private async _addItem() {\n    const items = [...this._items, \"\"];\n    this._fireChanged(items);\n    await this.updateComplete;\n    const field = this.shadowRoot?.querySelector(`ha-textfield[data-last]`) as\n      | HaTextField\n      | undefined;\n    field?.focus();\n  }\n\n  private async _editItem(ev: Event) {\n    const index = (ev.target as any).index;\n    const items = [...this._items];\n    items[index] = (ev.target as any).value;\n    this._fireChanged(items);\n  }\n\n  private async _keyDown(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      ev.stopPropagation();\n      this._addItem();\n    }\n  }\n\n  private async _removeItem(ev: Event) {\n    const index = (ev.target as any).index;\n    const items = [...this._items];\n    items.splice(index, 1);\n    this._fireChanged(items);\n  }\n\n  private _fireChanged(value) {\n    this.value = value;\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .row {\n          margin-bottom: 8px;\n        }\n        ha-textfield {\n          display: block;\n        }\n        ha-icon-button {\n          display: block;\n        }\n        ha-button {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-multi-textfield\": HaMultiTextField;\n  }\n}\n","import { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport { CSSResultGroup, LitElement, css, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { StringSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"../ha-multi-textfield\";\nimport \"../ha-textarea\";\nimport \"../ha-textfield\";\n\n@customElement(\"ha-selector-text\")\nexport class HaTextSelector extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public name?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: false }) public selector!: StringSelector;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _unmaskedPassword = false;\n\n  public async focus() {\n    await this.updateComplete;\n    (\n      this.renderRoot.querySelector(\"ha-textarea, ha-textfield\") as HTMLElement\n    )?.focus();\n  }\n\n  protected render() {\n    if (this.selector.text?.multiple) {\n      return html`\n        <ha-multi-textfield\n          .hass=${this.hass}\n          .value=${ensureArray(this.value ?? [])}\n          .disabled=${this.disabled}\n          .label=${this.label}\n          .inputType=${this.selector.text?.type}\n          .inputSuffix=${this.selector.text?.suffix}\n          .inputPrefix=${this.selector.text?.prefix}\n          .autocomplete=${this.selector.text?.autocomplete}\n          @value-changed=${this._handleChange}\n        >\n        </ha-multi-textfield>\n      `;\n    }\n    if (this.selector.text?.multiline) {\n      return html`<ha-textarea\n        .name=${this.name}\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        .value=${this.value || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        @input=${this._handleChange}\n        autocapitalize=\"none\"\n        .autocomplete=${this.selector.text?.autocomplete}\n        spellcheck=\"false\"\n        .required=${this.required}\n        autogrow\n      ></ha-textarea>`;\n    }\n    return html`<ha-textfield\n        .name=${this.name}\n        .value=${this.value || \"\"}\n        .placeholder=${this.placeholder || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .type=${this._unmaskedPassword ? \"text\" : this.selector.text?.type}\n        @input=${this._handleChange}\n        .label=${this.label || \"\"}\n        .prefix=${this.selector.text?.prefix}\n        .suffix=${this.selector.text?.type === \"password\"\n          ? // reserve some space for the icon.\n            html`<div style=\"width: 24px\"></div>`\n          : this.selector.text?.suffix}\n        .required=${this.required}\n        .autocomplete=${this.selector.text?.autocomplete}\n      ></ha-textfield>\n      ${this.selector.text?.type === \"password\"\n        ? html`<ha-icon-button\n            toggles\n            .label=${this.hass?.localize(\n              this._unmaskedPassword\n                ? \"ui.components.selectors.text.hide_password\"\n                : \"ui.components.selectors.text.show_password\"\n            ) || (this._unmaskedPassword ? \"Hide password\" : \"Show password\")}\n            @click=${this._toggleUnmaskedPassword}\n            .path=${this._unmaskedPassword ? mdiEyeOff : mdiEye}\n          ></ha-icon-button>`\n        : \"\"}`;\n  }\n\n  private _toggleUnmaskedPassword(): void {\n    this._unmaskedPassword = !this._unmaskedPassword;\n  }\n\n  private _handleChange(ev) {\n    let value = ev.detail?.value ?? ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    if (\n      (value === \"\" || (Array.isArray(value) && value.length === 0)) &&\n      !this.required\n    ) {\n      value = undefined;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      ha-textarea,\n      ha-textfield {\n        width: 100%;\n      }\n      ha-icon-button {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        inset-inline-start: initial;\n        inset-inline-end: 8px;\n        --mdc-icon-button-size: 40px;\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n        direction: var(--direction);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-text\": HaTextSelector;\n  }\n}\n","import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start) top;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n","import { mdiFileUpload } from \"@mdi/js\";\nimport { css, nothing, html, LitElement, TemplateResult, CSSResultGroup } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport \"@ha/components/ha-card\";\nimport \"@ha/layouts/hass-tabs-subpage\";\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport \"@ha/components/ha-button\";\nimport \"@ha/components/ha-file-upload\";\nimport \"@ha/components/ha-selector/ha-selector-text\";\nimport \"@ha/components/ha-circular-progress\";\nimport { uploadFile } from \"@ha/data/file_upload\";\nimport { extractApiErrorMessage } from \"@ha/data/hassio/common\";\nimport { showAlertDialog, showConfirmationDialog } from \"@ha/dialogs/generic/show-dialog-box\";\nimport { HomeAssistant, Route } from \"@ha/types\";\n\nimport {\n  getKnxInfoData,\n  processProjectFile,\n  removeProjectFile,\n} from \"../services/websocket.service\";\n\nimport { KNX } from \"../types/knx\";\nimport { KNXInfoData, KNXProjectInfo } from \"../types/websocket\";\nimport { KNXLogger } from \"../tools/knx-logger\";\nimport { VERSION } from \"../version\";\n\nconst logger = new KNXLogger(\"info\");\n\n@customElement(\"knx-info\")\nexport class KNXInfo extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property({ type: Array, reflect: false }) public tabs!: PageNavigation[];\n\n  @state() private knxInfoData: KNXInfoData | null = null;\n\n  @state() private _projectPassword?: string;\n\n  @state() private _uploading = false;\n\n  @state() private _projectFile?: File;\n\n  protected firstUpdated() {\n    this.loadKnxInfo();\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow!}\n        .route=${this.route!}\n        .tabs=${this.tabs}\n        .localizeFunc=${this.knx.localize}\n      >\n        <div class=\"columns\">\n          ${this.knxInfoData\n            ? html`\n                ${this._renderInfoCard()}\n                ${this.knxInfoData?.project\n                  ? this._renderProjectDataCard(this.knxInfoData.project)\n                  : nothing}\n                ${this._renderProjectUploadCard()}\n              `\n            : html`\n                <ha-circular-progress alt=\"Loading...\" size=\"large\" active></ha-circular-progress>\n              `}\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _renderInfoCard() {\n    return html` <ha-card class=\"knx-info\">\n      <div class=\"card-content knx-info-section\">\n        <div class=\"knx-content-row header\">${this.knx.localize(\"info_information_header\")}</div>\n\n        <div class=\"knx-content-row\">\n          <div>XKNX Version</div>\n          <div>${this.knxInfoData?.version}</div>\n        </div>\n\n        <div class=\"knx-content-row\">\n          <div>KNX-Frontend Version</div>\n          <div>${VERSION}</div>\n        </div>\n\n        <div class=\"knx-content-row\">\n          <div>${this.knx.localize(\"info_connected_to_bus\")}</div>\n          <div>\n            ${this.hass.localize(this.knxInfoData?.connected ? \"ui.common.yes\" : \"ui.common.no\")}\n          </div>\n        </div>\n\n        <div class=\"knx-content-row\">\n          <div>${this.knx.localize(\"info_individual_address\")}</div>\n          <div>${this.knxInfoData?.current_address}</div>\n        </div>\n\n        <div class=\"knx-bug-report\">\n          <div>${this.knx.localize(\"info_issue_tracker\")}</div>\n          <ul>\n            <li>\n              <a href=\"https://github.com/XKNX/knx-frontend/issues\" target=\"_blank\"\n                >${this.knx.localize(\"info_issue_tracker_knx_frontend\")}</a\n              >\n            </li>\n            <li>\n              <a href=\"https://github.com/XKNX/xknxproject/issues\" target=\"_blank\"\n                >${this.knx.localize(\"info_issue_tracker_xknxproject\")}</a\n              >\n            </li>\n            <li>\n              <a href=\"https://github.com/XKNX/xknx/issues\" target=\"_blank\"\n                >${this.knx.localize(\"info_issue_tracker_xknx\")}</a\n              >\n            </li>\n          </ul>\n        </div>\n      </div>\n    </ha-card>`;\n  }\n\n  private _renderProjectDataCard(projectInfo: KNXProjectInfo) {\n    return html`\n      <ha-card class=\"knx-info\">\n          <div class=\"card-content knx-content\">\n            <div class=\"header knx-content-row\">\n              ${this.knx.localize(\"info_project_data_header\")}\n            </div>\n            <div class=\"knx-content-row\">\n              <div>${this.knx.localize(\"info_project_data_name\")}</div>\n              <div>${projectInfo.name}</div>\n            </div>\n            <div class=\"knx-content-row\">\n              <div>${this.knx.localize(\"info_project_data_last_modified\")}</div>\n              <div>${new Date(projectInfo.last_modified).toUTCString()}</div>\n            </div>\n            <div class=\"knx-content-row\">\n              <div>${this.knx.localize(\"info_project_data_tool_version\")}</div>\n              <div>${projectInfo.tool_version}</div>\n            </div>\n            <div class=\"knx-content-row\">\n              <div>${this.knx.localize(\"info_project_data_xknxproject_version\")}</div>\n              <div>${projectInfo.xknxproject_version}</div>\n            </div>\n            <div class=\"knx-button-row\">\n              <ha-button\n                class=\"knx-warning push-right\"\n                @click=${this._removeProject}\n                .disabled=${this._uploading || !this.knxInfoData?.project}\n                >\n                ${this.knx.localize(\"info_project_delete\")}\n              </ha-button>\n            </div>\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _renderProjectUploadCard() {\n    return html` <ha-card class=\"knx-info\">\n      <div class=\"card-content knx-content\">\n        <div class=\"knx-content-row header\">${this.knx.localize(\"info_project_file_header\")}</div>\n        <div class=\"knx-content-row\">${this.knx.localize(\"info_project_upload_description\")}</div>\n        <div class=\"knx-content-row\">\n          <ha-file-upload\n            .hass=${this.hass}\n            accept=\".knxproj, .knxprojarchive\"\n            .icon=${mdiFileUpload}\n            .label=${this.knx.localize(\"info_project_file\")}\n            .value=${this._projectFile?.name}\n            .uploading=${this._uploading}\n            @file-picked=${this._filePicked}\n          ></ha-file-upload>\n        </div>\n        <div class=\"knx-content-row\">\n          <ha-selector-text\n            .hass=${this.hass}\n            .value=${this._projectPassword || \"\"}\n            .label=${this.hass.localize(\"ui.login-form.password\")}\n            .selector=${{ text: { multiline: false, type: \"password\" } }}\n            .required=${false}\n            @value-changed=${this._passwordChanged}\n          >\n          </ha-selector-text>\n        </div>\n        <div class=\"knx-button-row\">\n          <ha-button\n            class=\"push-right\"\n            @click=${this._uploadFile}\n            .disabled=${this._uploading || !this._projectFile}\n            >${this.hass.localize(\"ui.common.submit\")}</ha-button\n          >\n        </div>\n      </div>\n    </ha-card>`;\n  }\n\n  private loadKnxInfo() {\n    getKnxInfoData(this.hass).then(\n      (knxInfoData) => {\n        this.knxInfoData = knxInfoData;\n        this.requestUpdate();\n      },\n      (err) => {\n        logger.error(\"getKnxInfoData\", err);\n      },\n    );\n  }\n\n  private _filePicked(ev) {\n    this._projectFile = ev.detail.files[0];\n  }\n\n  private _passwordChanged(ev) {\n    this._projectPassword = ev.detail.value;\n  }\n\n  private async _uploadFile(_ev) {\n    const file = this._projectFile;\n    if (typeof file === \"undefined\") {\n      return;\n    }\n\n    let error: Error | undefined;\n    this._uploading = true;\n    try {\n      const project_file_id = await uploadFile(this.hass, file);\n      await processProjectFile(this.hass, project_file_id, this._projectPassword || \"\");\n    } catch (err: any) {\n      error = err;\n      showAlertDialog(this, {\n        title: \"Upload failed\",\n        text: extractApiErrorMessage(err),\n      });\n    } finally {\n      if (!error) {\n        this._projectFile = undefined;\n        this._projectPassword = undefined;\n      }\n      this._uploading = false;\n      this.loadKnxInfo();\n    }\n  }\n\n  private async _removeProject(_ev) {\n    const confirmed = await showConfirmationDialog(this, {\n      text: this.knx.localize(\"info_project_delete\"),\n    });\n    if (!confirmed) {\n      logger.debug(\"User cancelled deletion\");\n      return;\n    }\n\n    try {\n      await removeProjectFile(this.hass);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Deletion failed\",\n        text: extractApiErrorMessage(err),\n      });\n    } finally {\n      this.loadKnxInfo();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .columns {\n        display: flex;\n        justify-content: center;\n      }\n\n      @media screen and (max-width: 1232px) {\n        .columns {\n          flex-direction: column;\n        }\n\n        .knx-button-row {\n          margin-top: 20px;\n        }\n\n        .knx-info {\n          margin-right: 8px;\n        }\n      }\n\n      @media screen and (min-width: 1233px) {\n        .knx-button-row {\n          margin-top: auto;\n        }\n\n        .knx-info {\n          width: 400px;\n        }\n      }\n\n      .knx-info {\n        margin-left: 8px;\n        margin-top: 8px;\n      }\n\n      .knx-content {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        box-sizing: border-box;\n      }\n\n      .knx-content-row {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n      }\n\n      .knx-content-row > div:nth-child(2) {\n        margin-left: 1rem;\n      }\n\n      .knx-button-row {\n        display: flex;\n        flex-direction: row;\n        vertical-align: bottom;\n        padding-top: 16px;\n      }\n\n      .push-left {\n        margin-right: auto;\n      }\n\n      .push-right {\n        margin-left: auto;\n      }\n\n      .knx-warning {\n        --mdc-theme-primary: var(--error-color);\n      }\n\n      .knx-project-description {\n        margin-top: -8px;\n        padding: 0px 16px 16px;\n      }\n\n      .knx-delete-project-button {\n        position: absolute;\n        bottom: 0;\n        right: 0;\n      }\n\n      .knx-bug-report {\n        margin-top: 20px;\n      }\n\n      .knx-bug-report > ul > li > a {\n        text-decoration: none;\n        color: var(--mdc-theme-primary);\n      }\n\n      .header {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: -4px 16px 16px;\n        display: inline-block;\n        margin-block-start: 0px;\n        margin-block-end: 4px;\n        font-weight: normal;\n      }\n\n      ha-file-upload,\n      ha-selector-text {\n        width: 100%;\n        margin-top: 8px;\n      }\n\n      ha-circular-progress {\n        margin-top: 32px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-info\": KNXInfo;\n  }\n}\n","export const VERSION = \"2024.7.25.204106\";\n"],"names":[],"sourceRoot":""}