#########################################################################################################
# rand-str_list 生成一个包含n个随机字母的列表。
#
# 参数:
# n(int): 生成列表的长度。
# case(str, 可选): 指定生成的字母类型。可以是以下值之一：
# - 'A': 生成全部为大写字母的列表。
# - 'a': 生成全部为小写字母的列表。
# - 'mixed': 生成大小写字母混合的列表（默认值）。
# - 其他任意值：生成大小写字母混合的列表。

#########################################################################################################

import random
import string


def rand_str_list(n, case='mixed'):
    # 初始化一个空列表，用于存储随机生成的字符
    random_str = []

    # 根据case参数的值，选择生成大写字母、小写字母或大小写混合字母的集合
    if case == 'A':
        letters = string.ascii_uppercase
    elif case == 'a':
        letters = string.ascii_lowercase
    else:
        letters = string.ascii_letters

    # 循环n次，每次从letters中随机选择一个字符，并添加到random_str列表中
    for i in range(n):
        random_str.append(random.choice(letters))

    # 返回生成的随机字符串列表
    return random_str


#########################################################################################################
# rand_numbers_list 生成n组数字组成的列表，每一组数字在i到j随机生成。i和j如果省略，则在0 - 9随机生成。

# 参数:
# n(int): 要生成的随机数的数量
# i(int): 随机数生成的下限（包括）
# j(int): 随机数生成的上限（包括）

# 返回:
# list: 包含n个随机数的列表

# 示例：生成10组浮点数，默认范围为的0到9
# numbers_list = rand_numbers_list(10,-100,100)
# print(numbers_list)
#########################################################################################################

import random


def rand_numbers_list(n, i=0, j=9):
    # 初始化一个空列表，用于存储随机生成的数字
    random_nums = []
    # 循环n次，每次生成一个随机数字并添加到列表中
    for _ in range(n):
        # 从i到j中随机选择一个数字并添加到列表中
        random_nums.append(random.randint(i, j))

    # 返回包含n个随机数字的列表
    return random_nums


#########################################################################################################
# rand_float_lists 生成n组浮点数组成的列表，每一组数字在i到j随机生成，保留小数点后两位。i和j如果省略，则在0 - 9随机生成。

# 参数:
# n(int): 要生成的随机浮点数的数量
# i(int): 随机数生成的下限（包括）
# j(int): 随机数生成的上限（包括）

# 返回:
# list: 包含n个随机浮点数的列表

# 示例：生成10组浮点数，默认范围为的0到9
# floats_list = rand_float_list(10,-100,100)
# print(floats_list)
#########################################################################################################


import random


def rand_float_list(n, i=0, j=9):
    float_lists = []
    for _ in range(n):
        float_num = round(random.uniform(i, j), 2)
        float_lists.append(float_num)
    return float_lists


#########################################################################################################
# rand_person_info_list 生成指定数量的随机个人信息:包括姓名、性别、籍贯、身份证号码和手机号。
# 参数：n (int): 生成的个人数量
#     start_age (int): 最小年龄，默认值为18岁
#     end_age (int): 最大年龄，默认值为70岁

# 返回：list: 包含个人信息的二维列表，每个子列表包含姓名、性别、籍贯、身份证号码和手机号

# 示例用法：生成10个随机姓名、性别、籍贯、身份证号码和手机号的二维列表
# info_list = rand_person_info_list(10)
# for info in info_list:
#     print(info[0],info[1],info[2],info[3],info[4])
#########################################################################################################


import random
from datetime import datetime, timedelta


def rand_person_info_list(n, start_age=18, end_age=70):
    # 百家姓的一部分
    surnames = [
        '赵', '钱', '孙', '李', '周', '吴', '郑', '王', '冯', '陈', '褚', '卫', '蒋', '沈', '韩', '杨', '朱', '秦',
        '尤', '许', '何', '吕', '施', '张', '孔', '曹', '严', '华', '金', '魏', '陶', '姜', '戚', '谢', '邹', '喻',
        '柏', '水', '窦', '章', '云', '苏', '潘', '葛', '奚', '范', '彭', '郎', '鲁', '韦', '昌', '马', '苗', '凤',
        '花', '方', '俞', '任', '袁', '柳', '酆', '鲍', '史', '唐', '费', '廉', '岑', '薛', '雷', '贺', '倪', '汤',
        '滕', '殷', '罗', '毕', '郝', '邬', '安', '常', '乐', '于', '时', '傅', '皮', '卞', '齐', '康', '伍', '余',
        '元', '卜', '顾', '孟', '平', '黄', '和', '穆', '萧', '尹', '欧阳', '上官', '司马', '东方', '独孤', '南宫',
        '诸葛', '皇甫', '公孙', '慕容', '轩辕', '令狐'
    ]

    # 男性单字名
    male_single_names = [
        '伟', '强', '磊', '军', '洋', '勇', '杰', '涛', '明', '超', '刚', '桂', '雄', '峰', '飞', '斌', '华', '林',
        '博', '玉', '轩', '晨', '阳', '凯', '浩', '勤', '志', '天', '涵', '羽', '潇', '然', '晗', '梓', '宇', '熙',
        '睿', '豪', '俊', '祥', '鹏', '龙', '威', '亮', '成', '健', '毅', '岩', '松', '辉', '旭', '辰', '彬', '进',
        '良', '立', '东', '新', '凡', '兴', '宁', '坤', '嘉', '庆', '腾', '瑞', '哲', '泽'
    ]

    # 女性单字名
    female_single_names = [
        '芳', '娜', '敏', '静', '丽', '艳', '琳', '旭', '霞', '宁', '丹', '光', '文', '心', '欣', '洁', '玲', '倩',
        '婷', '梅', '媛', '爽', '帆', '芬', '雪', '岚', '榕', '楠', '桐', '璇', '琦', '琪', '怡', '冰', '薇', '菡',
        '璐', '蕾', '萌', '莹', '颖', '晔', '晓', '慧', '瑾', '霏', '雯', '琴', '晶', '婉', '玉', '雅', '娟', '柳',
        '茹', '梦', '莲', '香', '珠', '秋', '玫', '红', '素', '茜', '荣', '冬', '翠', '夏', '霄', '玥', '月', '星',
        '晨', '露', '风', '海', '溪', '雨', '云', '荷', '瑶', '瑜'
    ]

    # 男性双字名
    male_double_names = [
        '强超', '晨阳', '景文', '伟强', '佳杰', '嘉庆', '嘉博', '梓文', '文辉', '强杰', '浩然', '磊刚', '瀚宇', '新荣',
        '洋华', '晨熙', '洋杰', '强斌', '强庆', '伟健', '国华', '瀚瑞', '俊杰', '一鸣', '新春', '伟杰', '军鹏', '涛刚',
        '志华', '强健', '军雷', '晨曦', '军庆', '勇洋', '洋鹏', '文轩', '新辉', '梓晨', '勇鹏', '洋辉', '军超', '磊鹏',
        '涛超', '海涛', '勇杰', '思齐', '勇涛', '浩瑞', '洋建', '志远', '强涛', '洋涛', '昊天', '强华', '军辉', '强军',
        '逸飞', '天佑', '伟雷', '嘉腾', '强辉', '梓涵', '嘉宁', '强磊', '强峰', '晨宇', '磊庆', '洋庆', '瀚文', '梓豪',
        '国强', '昊宇', '昊辉', '洋雷', '伟明', '文睿', '庆华', '景华', '志强', '嘉浩', '梓宇', '伟华', '磊辉', '军刚',
        '昊轩', '佳豪', '浩辉', '宇豪', '新阳', '涛辉', '磊杰', '勇辉', '强鹏', '浩宇', '佳伟', '嘉威', '天瑞', '嘉毅',
        '嘉阳', '子俊', '嘉辉', '瀚豪', '博宇', '磊峰', '伟建', '子杰', '晨文', '磊建', '勇峰', '伟刚', '磊斌', '子涵',
        '伟涛', '军洋', '新民', '军涛', '勇华', '军峰', '建华', '磊华', '新安', '庆杰', '强雷', '磊超', '磊健', '瑞杰',
        '瀚辉', '嘉松', '文浩', '晨瑞', '洋明', '建伟', '庆文', '伟庆', '昊豪', '子豪', '晨豪', '思源', '磊雷', '强明',
        '瑞华', '磊洋', '洋刚', '勇刚', '晨轩', '文瑞', '伟磊', '勇明', '子铭', '嘉凯', '伟勇', '建平', '军杰', '伟斌',
        '强勇', '磊明', '磊涛', '军华', '洋峰', '光辉', '新曦', '思琪', '洋超', '嘉瑞', '子轩', '思宇', '梓辉', '佳明',
        '伟军', '子墨', '文豪', '浩豪', '勇斌', '建国', '天赐', '伟超', '嘉睿', '勇军', '嘉豪', '浩轩', '伟鹏', '伟洋',
        '军磊', '晨辉', '新林', '文博', '嘉俊', '勇超', '强刚', '佳俊', '军建', '晓强', '瀚轩', '梓阳', '宇辉', '嘉轩',
        '天宇', '涛杰', '宇航', '志杰', '嘉龙', '伟辉', '文杰', '佳平', '嘉晨', '军健', '涛明', '军斌', '景杰', '伟峰',
        '嘉宇', '嘉明', '昊瑞', '军明', '强洋', '洋斌', '嘉伟', '勇磊', '文涛', '梓轩', '昊文', '强建', '洋健'
    ]

    # 女性双字名
    female_double_names = [
        '丽君', '秋红', '雅蕊', '文慧', '文丽', '瑞洁', '醉蓝', '笑翠', '浩珊', '冰烟', '浩婷', '雪青', '宇萱', '文静',
        '瀚婷', '绮波', '美文', '春华', '新媛', '文君', '美娟', '海露', '景媛', '元霜', '嘉珊', '瑞婷', '白蝶', '文玉',
        '瀚萱', '灵雁', '美静', '婷婷', '敏敏', '慧敏', '香寒', '傲冬', '语兰', '雪珊', '凝之', '文华', '白雁', '美君',
        '新萱', '秀华', '问寒', '昊萱', '瀚洁', '文芳', '秀芳', '夜春', '昊媛', '飞烟', '佳慧', '傲珊', '美丽', '谷云',
        '宇婷', '景婷', '初夏', '美娜', '慧馨', '嘉萱', '梓媛', '晨婷', '庆媛', '傲之', '巧梅', '景珊', '茵睿', '昊婷',
        '静华', '瀚珊', '嘉媛', '嘉慧', '庆萱', '新柔', '幻灵', '丽娟', '涵柏', '新婷', '妙柏', '含蕾', '沛菡', '碧彤',
        '绿蓉', '秀君', '宇珊', '静文', '嘉欣', '瀚媛', '新珊', '昊珊', '冰菱', '嘉婷', '昊洁', '佳琪', '景萱', '庆珊',
        '秀娟', '静怡', '秀梅', '梓洁', '文婷', '浩萱', '晨媛', '美华', '绿柏', '静静', '妙文', '美婷', '庆洁', '嘉丽',
        '夜波', '白秋', '笑旋', '文娜', '美芳', '丽英', '凝安', '傲柏', '浩媛', '易琴', '白凝', '文萍', '白桃', '晓瑶',
        '晨萱', '佳琳', '绿琴', '梓婷', '晨洁', '巧白', '佳怡', '美艳', '慕青', '美凤', '丽萍', '白芹', '文英', '沛玲',
        '美萍', '以筠', '绿筠', '丽娜', '美玲', '桂英', '秀英', '白枫', '丽静', '秀丽', '翠岚', '佳宁', '宇媛', '雁翠',
        '巧云', '文娟', '文雅', '易安', '白曼', '鸣彩', '凝丹', '景洁', '庆婷', '语琴', '新洁', '美玉', '文洁', '晓荷',
        '寒凡', '丽文', '晓霜', '新波', '丽丽', '紫萱', '丽华', '绮翠', '浩洁', '嘉玲', '美兰', '水风', '丽芳', '秀萍',
        '巧萱', '丽艳', '月荷', '锦云', '梓珊', '玉玲', '翠梅', '怜梦', '傲晴', '文艳', '尔岚', '宇洁', '梓萱', '晨珊',
        '海安', '秀兰', '丽玉'
    ]

    # 重庆主城区和区县的行政区划代码
    area_codes = {
        500101: "万州区", 500102: "涪陵区", 500103: "渝中区", 500104: "大渡口区", 500105: "江北区", 500106: "沙坪坝区",
        500107: "九龙坡区", 500108: "南岸区", 500109: "北碚区", 500110: "綦江区", 500111: "大足区", 500112: "渝北区",
        500113: "巴南区", 500114: "黔江区", 500115: "长寿区", 500116: "江津区", 500117: "合川区", 500118: "永川区",
        500119: "南川区", 500120: "璧山区", 500151: "铜梁区", 500152: "潼南区", 500153: "荣昌区", 500154: "开州区",
        500155: "梁平区", 500156: "武隆区", 500229: "城口县", 500230: "丰都县", 500231: "垫江县", 500233: "忠县",
        500235: "云阳县", 500236: "奉节县", 500237: "巫山县", 500238: "巫溪县", 500240: "石柱县", 500241: "秀山县",
        500242: "酉阳县", 500243: "彭水县"
    }

    def calculate_checksum(id_number):
        """
        根据前17位计算校验码
        参数：
        id_number (str): 身份证前17位数字

        返回：
        str: 校验码
        """
        weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
        check_codes = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']
        total = sum(int(num) * weight for num, weight in zip(id_number, weights))
        return check_codes[total % 11]

    def generate_id_number(area_code, gender):
        """
        生成身份证号码
        参数：
        area_code (str): 区域代码
        gender (str): 性别，'男' 或 '女'

        返回：
        str: 完整的身份证号码
        """
        current_year = datetime.now().year
        birth_year = random.randint(current_year - end_age, current_year - start_age)
        birth_date = (datetime(birth_year, 1, 1) + timedelta(days=random.randint(0, 364))).strftime('%Y%m%d')
        sequence_code = f'{random.randint(0, 999):03}'
        if gender == '男':
            sequence_code = f'{int(sequence_code[:-1] + str((int(sequence_code[-1]) | 1))):03}'
        else:
            sequence_code = f'{int(sequence_code[:-1] + str((int(sequence_code[-1]) & 8))):03}'
        partial_id_number = area_code + birth_date + sequence_code
        checksum = calculate_checksum(partial_id_number)
        return partial_id_number + checksum

    def rand_phone_number():
        """
        生成随机手机号
        返回：
        str: 随机手机号
        """
        prefixes = [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 150, 151, 152, 153, 155, 156, 157,
                    158, 159, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189]
        prefix = random.choice(prefixes)
        suffix = ''.join([str(random.randint(0, 9)) for _ in range(8)])
        return str(prefix) + suffix

    rand_names_ids = []

    for _ in range(n):
        # 随机选择姓氏
        surname = random.choice(surnames)
        # 随机选择性别
        gender = random.choice(['男', '女'])

        # 随机选择名字（单字或双字）
        if gender == '男':
            name = surname + (
                random.choice(male_single_names) if random.random() < 0.5 else random.choice(male_double_names))
        else:
            name = surname + (
                random.choice(female_single_names) if random.random() < 0.5 else random.choice(female_double_names))

        # 随机选择区域代码
        area_code = str(random.choice(list(area_codes.keys())))
        # 生成身份证号码
        id_number = generate_id_number(area_code, gender)
        # 获取籍贯
        birthplace = area_codes[int(area_code)]
        # 生成随机手机号
        phone_number = rand_phone_number()

        # 将生成的个人信息加入列表
        rand_names_ids.append([name, gender, birthplace, id_number, phone_number])

    return rand_names_ids
