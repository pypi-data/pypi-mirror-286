#########################################################################################################
# rand-str_list 生成一个包含n个随机字母的列表。
#
# 参数:
# n(int): 生成列表的长度。
# case(str, 可选): 指定生成的字母类型。可以是以下值之一：
# - 'A': 生成全部为大写字母的列表。
# - 'a': 生成全部为小写字母的列表。
# - 'mixed': 生成大小写字母混合的列表（默认值）。
# - 其他任意值：生成大小写字母混合的列表。

#########################################################################################################

import random
import string


def rand_str_list(n, case='mixed'):
    # 初始化一个空列表，用于存储随机生成的字符
    random_str = []

    # 根据case参数的值，选择生成大写字母、小写字母或大小写混合字母的集合
    if case == 'A':
        letters = string.ascii_uppercase
    elif case == 'a':
        letters = string.ascii_lowercase
    else:
        letters = string.ascii_letters

    # 循环n次，每次从letters中随机选择一个字符，并添加到random_str列表中
    for i in range(n):
        random_str.append(random.choice(letters))

    # 返回生成的随机字符串列表
    return random_str


#########################################################################################################
# rand_numbers_list 生成n组数字组成的列表，每一组数字在i到j随机生成。i和j如果省略，则在0 - 9随机生成。

# 参数:
# n(int): 要生成的随机数的数量
# i(int): 随机数生成的下限（包括）
# j(int): 随机数生成的上限（包括）

# 返回:
# list: 包含n个随机数的列表

# 示例：生成10组浮点数，默认范围为的0到9
# numbers_list = rand_numbers_list(10,-100,100)
# print(numbers_list)
#########################################################################################################

import random


def rand_numbers_list(n, i=0, j=9):
    # 初始化一个空列表，用于存储随机生成的数字
    random_nums = []
    # 循环n次，每次生成一个随机数字并添加到列表中
    for _ in range(n):
        # 从i到j中随机选择一个数字并添加到列表中
        random_nums.append(random.randint(i, j))

    # 返回包含n个随机数字的列表
    return random_nums


#########################################################################################################
# rand_float_lists 生成n组浮点数组成的列表，每一组数字在i到j随机生成，保留小数点后两位。i和j如果省略，则在0 - 9随机生成。

# 参数:
# n(int): 要生成的随机浮点数的数量
# i(int): 随机数生成的下限（包括）
# j(int): 随机数生成的上限（包括）

# 返回:
# list: 包含n个随机浮点数的列表

# 示例：生成10组浮点数，默认范围为的0到9
# floats_list = rand_float_list(10,-100,100)
# print(floats_list)
#########################################################################################################


import random


def rand_float_list(n, i=0, j=9):
    float_lists = []
    for _ in range(n):
        float_num = round(random.uniform(i, j), 2)
        float_lists.append(float_num)
    return float_lists


#########################################################################################################
# rand_person_info_list 生成指定数量的随机个人信息:包括姓名、性别、籍贯、身份证号码和手机号。
# 参数：n (int): 生成的个人数量
#     start_age (int): 最小年龄，默认值为18岁
#     end_age (int): 最大年龄，默认值为70岁

# 返回：list: 包含个人信息的二维列表，每个子列表包含姓名、性别、籍贯、身份证号码和手机号

# 示例用法：生成10个随机姓名、性别、籍贯、身份证号码和手机号的二维列表
# info_list = rand_person_info_list(10)
# for info in info_list:
#     print(info[0],info[1],info[2],info[3],info[4])
#########################################################################################################

import random
from datetime import datetime, timedelta

def rand_person_info_list(n, start_age=18, end_age=70):
    # 百家姓的一部分
    surnames = [
        '赵', '钱', '孙', '李', '周', '吴', '郑', '王', '冯', '陈', '褚', '卫', '蒋', '沈', '韩', '杨', '朱', '秦',
        '尤', '许', '何', '吕', '施', '张', '孔', '曹', '严', '华', '金', '魏', '陶', '姜', '戚', '谢', '邹', '喻',
        '柏', '水', '窦', '章', '云', '苏', '潘', '葛', '奚', '范', '彭', '郎', '鲁', '韦', '昌', '马', '苗', '凤',
        '花', '方', '俞', '任', '袁', '柳', '酆', '鲍', '史', '唐', '费', '廉', '岑', '薛', '雷', '贺', '倪', '汤',
        '滕', '殷', '罗', '毕', '郝', '邬', '安', '常', '乐', '于', '时', '傅', '皮', '卞', '齐', '康', '伍', '余',
        '元', '卜', '顾', '孟', '平', '黄', '和', '穆', '萧', '尹', '欧阳', '上官', '司马', '东方', '独孤', '南宫',
        '诸葛', '皇甫', '公孙', '慕容', '轩辕', '令狐'
    ]

    # 男性单字名
    male_single_names = [
        '珩', '恺', '洋', '景', '昀', '超', '羽', '浩', '阳', '宁', '康', '平', '煊', '宗', '威', '烽', '新', '岳',
        '铭', '亮','志', '旭', '飞', '龙', '豪', '楚', '光', '利', '熙', '成', '榕', '清', '齐', '基', '伟', '聪',
        '晨', '弘','兴', '晗','秦', '明', '慧', '凯', '桂', '玉', '健', '良', '和', '波', '松', '哲', '吉', '朗',
        '同', '鹏', '建', '辉','文', '灏','卓', '强', '锡', '海', '易', '腾', '梓', '坤', '宇', '翔', '洺', '朝',
        '俊', '贯', '东', '祥', '凡', '臣','义', '田','亦', '华', '震', '泽', '雄', '岩', '奇', '迅', '隽', '狄',
        '潇', '京', '林', '毅', '刚', '曦', '锋', '正','然', '斌','天', '信', '蓝', '昊', '辉', '伟', '勇', '峰',
        '迪', '咏', '晓', '忠', '百', '安', '辰', '杰', '立', '升','杜', '轩','彬', '鸣', '瀚', '磊', '奕', '政',
        '谦', '广', '涛', '翰', '瑞', '霖', '军', '琛', '隆', '宥', '睿', '渝','嘉', '桦','博', '勤', '庆', '瑾',
        '进', '友', '涵', '道', '泽', '伟'
    ]

    # 女性单字名
    female_single_names = [
        '莲', '梦', '婷', '娜', '香', '洁', '云', '光', '瑶', '娟', '菡', '茜', '荣', '雨', '露', '丽', '璇', '楠',
        '慧', '丹','珊', '晔', '雅', '琦', '妍', '荷', '芳', '玉', '婉', '文', '晨', '萌', '帆', '璐', '瑾', '嫣',
        '月', '玥','桐','敏', '静', '瑜', '旭', '琴', '晶', '菲', '宁', '芬', '岚', '怡', '星', '梅', '玲', '夏',
        '榕', '爽', '蓉','素','燕', '茹', '冬', '婧', '颖', '溪', '珠', '红', '霄', '艳', '秋', '莹', '雯', '萍',
        '欣', '翠', '海', '蕾','涵','媛', '霏', '玫', '倩', '琪', '冰', '雪', '芸', '风', '娅', '心', '薇', '晓',
        '柳', '彤', '琳', '霞', '瑜芳'
    ]

    # 男性双字名
    male_double_names = [
        '勇辉', '伟辉', '志强', '思琪', '强涛', '勇斌', '嘉阳', '子豪', '军磊', '军华', '佳平', '子墨', '文瑞', '梓豪',
        '洋鹏', '强勇', '嘉宇', '涛辉', '宇航', '俊杰', '建中', '伟健', '嘉松', '嘉明', '勇鹏', '庆杰', '军杰', '军雷',
        '志远', '晨宇', '伟刚', '涛刚', '军辉', '嘉毅', '景杰', '昊宇', '子杰', '国强', '强峰', '瑞华', '华健', '嘉凯',
        '军斌', '嘉浩', '瀚瑞', '志华', '嘉俊', '嘉威', '新春', '宇辉', '博宇', '晨轩', '嘉睿', '浩辉', '子铭', '勇磊',
        '佳杰', '文涛', '伟斌', '文睿', '勇超', '涛超', '军鹏', '文浩', '新林', '磊洋', '景文', '军超', '晨文', '洋雷',
        '国华', '浩瑞', '强刚', '伟建', '梓轩', '磊涛', '浩然', '晨阳', '嘉伟', '磊雷', '嘉庆', '强华', '晨瑞', '建伟',
        '洋庆', '景华', '新民', '勇峰', '军涛', '军刚', '伟勇', '强洋', '思宇', '强庆', '强杰', '磊庆', '子轩', '雪松',
        '思源', '伟庆', '伟磊', '思齐', '子俊', '文辉', '新阳', '天瑞', '瑞杰', '嘉腾', '洋峰', '晨熙', '伟雷', '天赐',
        '洋明', '嘉瑞', '文杰', '建国', '伟杰', '嘉辉', '瀚轩', '梓文', '梓阳', '洋健', '强超', '建平', '勇涛', '宇豪',
        '瀚文', '逸飞', '军健', '强斌', '伟峰', '磊刚', '新曦', '庆华', '建华', '瀚豪', '洋华', '洋辉', '勇刚', '晨辉',
        '晓强', '瀚辉', '洋杰', '磊斌', '晨曦', '佳俊', '伟洋', '嘉豪', '晨豪', '军建', '洋斌', '天佑', '伟涛', '洋超',
        '磊鹏', '嘉宁', '佳伟', '海林', '涛杰', '勇洋', '世杰', '勇杰', '嘉晨', '天宇', '强建', '文豪', '文轩', '昊天',
        '磊杰', '志杰', '昊文', '磊峰', '伟鹏', '强磊', '国庆', '浩豪', '新荣', '星驰', '建成', '强军', '磊建', '佳明',
        '伟华', '梓涵', '伟军', '俊辉', '昊辉', '浩轩', '庆文', '瀚宇', '伟强', '勇明', '洋建', '磊超', '洋刚', '佳豪',
        '军勇', '清华', '昊轩', '浩宇', '新辉', '梓辉', '伟超', '昊瑞', '伟明', '涛明', '黎明', '洋健', '嘉龙', '强明',
        '一鸣', '强鹏', '嘉博', '磊明', '梓晨', '世民', '洋涛', '强辉', '军峰', '光辉', '文博', '昊豪', '海涛', '强雷',
        '子涵', '建明', '明建', '佳强', '明明', '飞飞', '小龙', '霖霖', '华强', '国福', '明强', '阳明', '宇凡', '大鹏',
    ]

    # 女性双字名
    female_double_names = [
        '浩婷', '灵雁', '白秋', '慧馨', '丽洁', '景媛', '丽琴', '莉珍', '丽君', '文艳', '白蝶', '美艳', '文英', '浩珊',
        '梓萱', '美萍', '晓萱', '易安', '春华', '佳慧', '白曼', '雪青', '昊萱', '昊婷', '美凤', '嘉媛', '冰烟', '静雯',
        '文娜', '文芳', '新萱', '莉莉', '美洁', '静静', '晓燕', '白雁', '浩媛', '翠岚', '傲柏', '庆洁', '丽丽', '小艳',
        '寒凡', '梓媛', '浩洁', '秀兰', '美华', '文丽', '玉玲', '小波', '梓婷', '玉珍', '庆珊', '文玉', '昊媛', '晓凤',
        '丽玉', '美文', '凝安', '含蕾', '莉洁', '易琴', '茵睿', '嘉婷', '涵柏', '凝丹', '瀚婷', '瑞婷', '丽华', '莉芬',
        '莉丽', '瀚洁', '晨萱', '桂英', '沛菡', '瀚珊', '文娟', '美玉', '慧敏', '秀华', '新珊', '美玲', '灵灵', '丽艳',
        '丽文', '丽芳', '美娜', '惠玲', '晓丽', '怜梦', '浩萱', '新洁', '丽君', '宇洁', '笑翠', '飞烟', '尔岚', '嘉萱',
        '婷婷', '景珊', '文静', '海露', '静文', '妙文', '丽英', '慧萍', '语兰', '夜波', '文华', '嘉玲', '宇萱', '嘉慧',
        '新媛', '水风', '静华', '美兰', '嘉颖', '沛玲', '秀梅', '景洁', '丽萍', '绿蓉', '文慧', '美娟', '美丽', '玉萍',
        '妙柏', '问寒', '佳怡', '秀英', '巧萱', '绿柏', '美珍', '美静', '秀丽', '佳琪', '秀芬', '莉萍', '雅蕊', '晨婷',
        '丽霞', '丽娟', '绿筠', '锦云', '谷云', '美婷', '敏敏', '新柔', '香寒', '笑旋', '秋红', '莉娜', '碧彤', '绮波',
        '秀娟', '巧云', '紫萱', '晨洁', '凝之', '宇珊', '嘉欣', '昊珊', '丽静', '绮翠', '庆萱', '语琴', '晨珊', '梦丽',
        '文君', '昊洁', '月荷', '翠梅', '嘉琳', '雁翠', '莉敏', '夜春', '以筠', '绿琴', '梓珊', '景萱', '海燕', '傲珊',
        '晓霜', '文萍', '白枫', '元霜', '新婷', '巧梅', '白凝', '晓荷', '文婷', '梦洁', '秀萍', '美琳', '莉娟', '莉芳',
        '醉蓝', '瑞洁', '梦媛', '莉华', '静怡', '庆婷', '傲冬', '傲晴', '雪珊', '美芳', '梓洁', '美君', '丽珍', '雪莉',
        '晓琴', '庆媛', '晓瑶', '佳宁', '嘉丽', '冰菱', '文雅', '晨媛', '鸣彩', '英华', '文洁', '初夏', '秀芳', '晓红',
        '玉英', '瀚萱', '瀚媛', '秀君', '宇婷', '巧白', '雪芹', '嘉珊', '景婷', '宇媛', '佳琳', '丽娜', '慕青', '依依'
    ]

    # 重庆主城区和区县的行政区划代码
    area_codes = {
        500101: "万州区", 500102: "涪陵区", 500103: "渝中区", 500104: "大渡口区", 500105: "江北区", 500106: "沙坪坝区",
        500107: "九龙坡区", 500108: "南岸区", 500109: "北碚区", 500110: "綦江区", 500111: "大足区", 500112: "渝北区",
        500113: "巴南区", 500114: "黔江区", 500115: "长寿区", 500116: "江津区", 500117: "合川区", 500118: "永川区",
        500119: "南川区", 500120: "璧山区", 500151: "铜梁区", 500152: "潼南区", 500153: "荣昌区", 500154: "开州区",
        500155: "梁平区", 500156: "武隆区", 500229: "城口县", 500230: "丰都县", 500231: "垫江县", 500233: "忠县",
        500235: "云阳县", 500236: "奉节县", 500237: "巫山县", 500238: "巫溪县", 500240: "石柱县", 500241: "秀山县",
        500242: "酉阳县", 500243: "彭水县"
    }

    def calculate_checksum(id_number):
        """
        根据前17位计算校验码
        参数：
        id_number (str): 身份证前17位数字

        返回：
        str: 校验码
        """
        weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
        check_codes = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']
        total = sum(int(num) * weight for num, weight in zip(id_number, weights))
        return check_codes[total % 11]

    def generate_id_number(existing_ids, area_code, gender):
        """
        生成唯一的身份证号码
        参数：
        existing_ids (set): 已存在的身份证号码集合
        area_code (str): 区域代码
        gender (str): 性别，'男' 或 '女'

        返回：
        str: 完整的身份证号码
        """
        while True:
            current_year = datetime.now().year
            # 随机生成出生年份
            birth_year = random.randint(current_year - end_age, current_year - start_age)
            # 随机生成出生日期
            birth_month = random.randint(1, 12)
            birth_day = random.randint(1, 28)  # 为简化逻辑，使用28天
            birth_date = f"{birth_year:04d}{birth_month:02d}{birth_day:02d}"
            # 随机生成顺序码
            sequence_code = f'{random.randint(0, 999):03}'
            # 如果是男性，确保最后一位是奇数
            if gender == '男':
                sequence_code = f'{int(sequence_code[:-1] + str((int(sequence_code[-1]) | 1))):03}'
            # 如果是女性，确保最后一位是偶数
            else:
                sequence_code = f'{int(sequence_code[:-1] + str((int(sequence_code[-1]) & ~1))):03}'
            # 拼接生成部分身份证号码
            partial_id_number = area_code + birth_date + sequence_code
            # 计算校验码
            checksum = calculate_checksum(partial_id_number)
            # 生成完整的身份证号码
            id_number = partial_id_number + checksum
            # 检查身份证号码是否唯一
            if id_number not in existing_ids:
                existing_ids.add(id_number)
                return id_number

    def rand_phone_number(existing_phones):
        """
        生成唯一的随机手机号
        参数：
        existing_phones (set): 已存在的手机号集合

        返回：
        str: 随机手机号
        """
        while True:
            prefixes = [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 150, 151, 152, 153, 155, 156, 157,
                        158, 159, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189]
            prefix = random.choice(prefixes)
            suffix = ''.join([str(random.randint(0, 9)) for _ in range(8)])
            phone_number = str(prefix) + suffix
            # 检查手机号是否唯一
            if phone_number not in existing_phones:
                existing_phones.add(phone_number)
                return phone_number

    # 用于存储已生成的姓名、身份证号、手机号的集合
    existing_names = set()
    existing_ids = set()
    existing_phones = set()

    # 存储生成的个人信息
    rand_names_ids = []

    while len(rand_names_ids) < n:
        # 随机选择姓氏
        surname = random.choice(surnames)
        # 随机选择性别
        gender = random.choice(['男', '女'])

        # 随机选择名字（单字或双字）
        if gender == '男':
            name = surname + (
                random.choice(male_single_names) if random.random() < 0.5 else random.choice(male_double_names))
        else:
            name = surname + (
                random.choice(female_single_names) if random.random() < 0.5 else random.choice(female_double_names))

        # 检查姓名是否唯一
        if name in existing_names:
            continue

        # 随机选择区域代码
        area_code = str(random.choice(list(area_codes.keys())))
        # 生成唯一的身份证号码
        id_number = generate_id_number(existing_ids, area_code, gender)

        # 获取籍贯
        birthplace = area_codes[int(area_code)]
        # 生成唯一的随机手机号
        phone_number = rand_phone_number(existing_phones)

        # 将生成的姓名加入集合，确保唯一性
        existing_names.add(name)

        # 将生成的个人信息加入列表
        rand_names_ids.append([name, gender, birthplace, id_number, phone_number])

    return rand_names_ids

