# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class VolumePersistentVolumeClaim(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, claim_name=None, read_only=None):  # noqa: E501
        """VolumePersistentVolumeClaim - a model defined in OpenAPI

        :param claim_name: The claim_name of this VolumePersistentVolumeClaim.  # noqa: E501
        :type claim_name: str
        :param read_only: The read_only of this VolumePersistentVolumeClaim.  # noqa: E501
        :type read_only: bool
        """
        self.openapi_types = {
            'claim_name': str,
            'read_only': bool
        }

        self.attribute_map = {
            'claim_name': 'claim_name',
            'read_only': 'read_only'
        }

        self._claim_name = claim_name
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt) -> 'VolumePersistentVolumeClaim':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Volume_persistent_volume_claim of this VolumePersistentVolumeClaim.  # noqa: E501
        :rtype: VolumePersistentVolumeClaim
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claim_name(self):
        """Gets the claim_name of this VolumePersistentVolumeClaim.

        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume  # noqa: E501

        :return: The claim_name of this VolumePersistentVolumeClaim.
        :rtype: str
        """
        return self._claim_name

    @claim_name.setter
    def claim_name(self, claim_name):
        """Sets the claim_name of this VolumePersistentVolumeClaim.

        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume  # noqa: E501

        :param claim_name: The claim_name of this VolumePersistentVolumeClaim.
        :type claim_name: str
        """

        self._claim_name = claim_name

    @property
    def read_only(self):
        """Gets the read_only of this VolumePersistentVolumeClaim.

        Will force the ReadOnly setting in VolumeMounts  # noqa: E501

        :return: The read_only of this VolumePersistentVolumeClaim.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this VolumePersistentVolumeClaim.

        Will force the ReadOnly setting in VolumeMounts  # noqa: E501

        :param read_only: The read_only of this VolumePersistentVolumeClaim.
        :type read_only: bool
        """

        self._read_only = read_only
