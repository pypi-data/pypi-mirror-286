# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NodeSelectorTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_expressions=None, match_fields=None):  # noqa: E501
        """NodeSelectorTerm - a model defined in OpenAPI

        :param match_expressions: The match_expressions of this NodeSelectorTerm.  # noqa: E501
        :type match_expressions: List[str]
        :param match_fields: The match_fields of this NodeSelectorTerm.  # noqa: E501
        :type match_fields: List[str]
        """
        self.openapi_types = {
            'match_expressions': List[str],
            'match_fields': List[str]
        }

        self.attribute_map = {
            'match_expressions': 'match_expressions',
            'match_fields': 'match_fields'
        }

        self._match_expressions = match_expressions
        self._match_fields = match_fields

    @classmethod
    def from_dict(cls, dikt) -> 'NodeSelectorTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeSelectorTerm of this NodeSelectorTerm.  # noqa: E501
        :rtype: NodeSelectorTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_expressions(self):
        """Gets the match_expressions of this NodeSelectorTerm.

        An array of node selector rule, the rule can be a match expression, referring the example (It is a match expression)   # noqa: E501

        :return: The match_expressions of this NodeSelectorTerm.
        :rtype: List[str]
        """
        return self._match_expressions

    @match_expressions.setter
    def match_expressions(self, match_expressions):
        """Sets the match_expressions of this NodeSelectorTerm.

        An array of node selector rule, the rule can be a match expression, referring the example (It is a match expression)   # noqa: E501

        :param match_expressions: The match_expressions of this NodeSelectorTerm.
        :type match_expressions: List[str]
        """

        self._match_expressions = match_expressions

    @property
    def match_fields(self):
        """Gets the match_fields of this NodeSelectorTerm.

        An array of node selector rule, the rule can be a match expression, referring the example (It is a match expression)   # noqa: E501

        :return: The match_fields of this NodeSelectorTerm.
        :rtype: List[str]
        """
        return self._match_fields

    @match_fields.setter
    def match_fields(self, match_fields):
        """Sets the match_fields of this NodeSelectorTerm.

        An array of node selector rule, the rule can be a match expression, referring the example (It is a match expression)   # noqa: E501

        :param match_fields: The match_fields of this NodeSelectorTerm.
        :type match_fields: List[str]
        """

        self._match_fields = match_fields
