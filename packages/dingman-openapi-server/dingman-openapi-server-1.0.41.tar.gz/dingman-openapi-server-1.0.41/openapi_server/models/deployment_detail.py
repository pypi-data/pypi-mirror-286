# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.deployment_detail_last_deployment import DeploymentDetailLastDeployment
from openapi_server.models.deployment_resource_status import DeploymentResourceStatus
from openapi_server import util

from openapi_server.models.deployment_detail_last_deployment import DeploymentDetailLastDeployment  # noqa: E501
from openapi_server.models.deployment_resource_status import DeploymentResourceStatus  # noqa: E501

class DeploymentDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, platform=None, namespace=None, cluster=None, health=None, last_deployment=None, resources=None):  # noqa: E501
        """DeploymentDetail - a model defined in OpenAPI

        :param name: The name of this DeploymentDetail.  # noqa: E501
        :type name: str
        :param platform: The platform of this DeploymentDetail.  # noqa: E501
        :type platform: str
        :param namespace: The namespace of this DeploymentDetail.  # noqa: E501
        :type namespace: str
        :param cluster: The cluster of this DeploymentDetail.  # noqa: E501
        :type cluster: str
        :param health: The health of this DeploymentDetail.  # noqa: E501
        :type health: str
        :param last_deployment: The last_deployment of this DeploymentDetail.  # noqa: E501
        :type last_deployment: DeploymentDetailLastDeployment
        :param resources: The resources of this DeploymentDetail.  # noqa: E501
        :type resources: List[DeploymentResourceStatus]
        """
        self.openapi_types = {
            'name': str,
            'platform': str,
            'namespace': str,
            'cluster': str,
            'health': str,
            'last_deployment': DeploymentDetailLastDeployment,
            'resources': List[DeploymentResourceStatus]
        }

        self.attribute_map = {
            'name': 'name',
            'platform': 'platform',
            'namespace': 'namespace',
            'cluster': 'cluster',
            'health': 'health',
            'last_deployment': 'last_deployment',
            'resources': 'resources'
        }

        self._name = name
        self._platform = platform
        self._namespace = namespace
        self._cluster = cluster
        self._health = health
        self._last_deployment = last_deployment
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'DeploymentDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeploymentDetail of this DeploymentDetail.  # noqa: E501
        :rtype: DeploymentDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DeploymentDetail.

        Name of the deployment.  # noqa: E501

        :return: The name of this DeploymentDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentDetail.

        Name of the deployment.  # noqa: E501

        :param name: The name of this DeploymentDetail.
        :type name: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this DeploymentDetail.

        Name of the platform.  # noqa: E501

        :return: The platform of this DeploymentDetail.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeploymentDetail.

        Name of the platform.  # noqa: E501

        :param platform: The platform of this DeploymentDetail.
        :type platform: str
        """

        self._platform = platform

    @property
    def namespace(self):
        """Gets the namespace of this DeploymentDetail.

        Name of the deploy namespace.  # noqa: E501

        :return: The namespace of this DeploymentDetail.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DeploymentDetail.

        Name of the deploy namespace.  # noqa: E501

        :param namespace: The namespace of this DeploymentDetail.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def cluster(self):
        """Gets the cluster of this DeploymentDetail.

        Name of the deployed cluster  # noqa: E501

        :return: The cluster of this DeploymentDetail.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DeploymentDetail.

        Name of the deployed cluster  # noqa: E501

        :param cluster: The cluster of this DeploymentDetail.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def health(self):
        """Gets the health of this DeploymentDetail.

        The health status of the deployment  # noqa: E501

        :return: The health of this DeploymentDetail.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this DeploymentDetail.

        The health status of the deployment  # noqa: E501

        :param health: The health of this DeploymentDetail.
        :type health: str
        """

        self._health = health

    @property
    def last_deployment(self):
        """Gets the last_deployment of this DeploymentDetail.


        :return: The last_deployment of this DeploymentDetail.
        :rtype: DeploymentDetailLastDeployment
        """
        return self._last_deployment

    @last_deployment.setter
    def last_deployment(self, last_deployment):
        """Sets the last_deployment of this DeploymentDetail.


        :param last_deployment: The last_deployment of this DeploymentDetail.
        :type last_deployment: DeploymentDetailLastDeployment
        """

        self._last_deployment = last_deployment

    @property
    def resources(self):
        """Gets the resources of this DeploymentDetail.


        :return: The resources of this DeploymentDetail.
        :rtype: List[DeploymentResourceStatus]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DeploymentDetail.


        :param resources: The resources of this DeploymentDetail.
        :type resources: List[DeploymentResourceStatus]
        """

        self._resources = resources
