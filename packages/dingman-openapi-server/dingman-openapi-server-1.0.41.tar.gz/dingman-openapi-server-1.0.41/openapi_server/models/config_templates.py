# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ConfigTemplates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template_files=None, values=None):  # noqa: E501
        """ConfigTemplates - a model defined in OpenAPI

        :param template_files: The template_files of this ConfigTemplates.  # noqa: E501
        :type template_files: List[str]
        :param values: The values of this ConfigTemplates.  # noqa: E501
        :type values: Dict[str, object]
        """
        self.openapi_types = {
            'template_files': List[str],
            'values': Dict[str, object]
        }

        self.attribute_map = {
            'template_files': 'template_files',
            'values': 'values'
        }

        self._template_files = template_files
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'ConfigTemplates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Config_templates of this ConfigTemplates.  # noqa: E501
        :rtype: ConfigTemplates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template_files(self):
        """Gets the template_files of this ConfigTemplates.

        the list of template file path name  # noqa: E501

        :return: The template_files of this ConfigTemplates.
        :rtype: List[str]
        """
        return self._template_files

    @template_files.setter
    def template_files(self, template_files):
        """Sets the template_files of this ConfigTemplates.

        the list of template file path name  # noqa: E501

        :param template_files: The template_files of this ConfigTemplates.
        :type template_files: List[str]
        """

        self._template_files = template_files

    @property
    def values(self):
        """Gets the values of this ConfigTemplates.

        The config values for the template files  # noqa: E501

        :return: The values of this ConfigTemplates.
        :rtype: Dict[str, object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ConfigTemplates.

        The config values for the template files  # noqa: E501

        :param values: The values of this ConfigTemplates.
        :type values: Dict[str, object]
        """

        self._values = values
