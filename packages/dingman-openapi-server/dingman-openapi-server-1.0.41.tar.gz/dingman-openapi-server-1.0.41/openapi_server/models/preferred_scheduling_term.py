# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.node_selector_term import NodeSelectorTerm
from openapi_server import util

from openapi_server.models.node_selector_term import NodeSelectorTerm  # noqa: E501

class PreferredSchedulingTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, weight=None, preference=None):  # noqa: E501
        """PreferredSchedulingTerm - a model defined in OpenAPI

        :param weight: The weight of this PreferredSchedulingTerm.  # noqa: E501
        :type weight: int
        :param preference: The preference of this PreferredSchedulingTerm.  # noqa: E501
        :type preference: NodeSelectorTerm
        """
        self.openapi_types = {
            'weight': int,
            'preference': NodeSelectorTerm
        }

        self.attribute_map = {
            'weight': 'weight',
            'preference': 'preference'
        }

        self._weight = weight
        self._preference = preference

    @classmethod
    def from_dict(cls, dikt) -> 'PreferredSchedulingTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PreferredSchedulingTerm of this PreferredSchedulingTerm.  # noqa: E501
        :rtype: PreferredSchedulingTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def weight(self):
        """Gets the weight of this PreferredSchedulingTerm.


        :return: The weight of this PreferredSchedulingTerm.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this PreferredSchedulingTerm.


        :param weight: The weight of this PreferredSchedulingTerm.
        :type weight: int
        """

        self._weight = weight

    @property
    def preference(self):
        """Gets the preference of this PreferredSchedulingTerm.


        :return: The preference of this PreferredSchedulingTerm.
        :rtype: NodeSelectorTerm
        """
        return self._preference

    @preference.setter
    def preference(self, preference):
        """Sets the preference of this PreferredSchedulingTerm.


        :param preference: The preference of this PreferredSchedulingTerm.
        :type preference: NodeSelectorTerm
        """

        self._preference = preference
