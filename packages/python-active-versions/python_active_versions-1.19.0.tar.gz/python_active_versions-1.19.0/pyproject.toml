# SPDX-FileCopyrightText: 2023 - 2024 Gabriele Pongelli
#
# SPDX-License-Identifier: MIT

[tool.poetry]
    name = "python-active-versions"
    version = "1.19.0"
    homepage = "https://github.com/gpongelli/python-active-versions"
    repository = "https://github.com/gpongelli/python-active-versions"
    documentation = "https://gpongelli.github.io/python-active-versions/"
    description = "Gather active python versions."
    authors = ["Gabriele Pongelli <gpongelli@users.noreply.github.com>"]
    readme = "README.md"
    license =  "MIT"
    # full classifier list can be found at https://pypi.org/classifiers/
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Programming Language :: Python :: 3.12',
    ]
    packages = [
        { include = "python_active_versions" },
        { include = "tests", format = "sdist" },
    ]

    [tool.poetry.urls]
        "Issue Tracker" = "https://github.com/gpongelli/python-active-versions/issues"
        "Documentation" = "https://gpongelli.github.io/python-active-versions/"
        "Changelog" = "https://gpongelli.github.io/python-active-versions/history.html"
        "Source" = "https://github.com/gpongelli/python-active-versions"

    [tool.poetry.dependencies]
        python = ">=3.8.0,<3.13"
        requests = "^2.32.0"
        click = "^8.1.7"
        cloup = "^3.0.0"
        # revert using requests-html that has bs4 as dependency, waiting the original project,
        #  meanwhile trying to install also beautifusoup4
        requests-html = "^0.10.0"
        lxml_html_clean = "^0.1.1"
        beautifulsoup4 = "^4.12.0"
        requests-cache = "^1.2.1"


    [tool.poetry.group.devel]
        optional = true
        [tool.poetry.group.devel.dependencies]
            pip  = "^24.0"
            black  = "^24.4.2"
            isort  = [
                { version = "^5.13.0",  python = ">=3.8" },
                { version = "^5.11.4",  python = "<3.8" }
            ]
            flake8  = [
                { version = "^7.1.0",  python = ">=3.9" },
                { version = "^3.9.2",  python = "<3.9" }
            ]
            flake8-docstrings = "^1.6.0"
            mypy = "^1.10"
            pytest  = "^8.2.0"
            pytest-cov  = "^5.0.0"
            #tox  = [
            #    { version = "^4.15.0",  python = ">=3.9" },
            #    { version = "^3.25.0",  python = "<3.9" }
            #]
            virtualenv  = "^20.26.1"
            twine  = "^5.0.0"
            Sphinx = [
                { version = "^7.3.6", python = ">=3.9.0"},
                { version = "^5.2.0", python = "<3.9.0"}
            ]
            sphinx-rtd-theme = "^2.0.0"
            sphinxcontrib-napoleon = "^0.7"
            m2r2 = "0.3.3.post2"
            pre-commit = "^2.12.0"
            commitizen = [
                { version = "^3.27.0", python = ">=3.8.0"},
                { version = "^2.32.2", python = "<3.8.0"}
            ]
            darglint = "^1.8.1"
            bandit = [
                { version = "^1.7.8", python = ">=3.8.0"},
                { version = "^1.5.0", python = "<3.8.0"}
            ]
            yamllint = [
                { version = "^1.35.1", python = ">=3.8.0"},
                { version = "^1.19.0", python = "<3.8.0"}
            ]
            codespell = [
                { version = "^2.2.6", python = ">=3.8.0"},
                { version = "^2.0.0", python = "<3.8.0"}
            ]
            pylint = [
                { version = "^3.2", python = ">=3.8.0"},
                { version = "^2.13.9", python = "<3.7.2"}
            ]
            types-termcolor = "^1.1.5"
            types-setuptools = "^70.0.0"
            reuse = "^3.0.2"
            types-requests = "^2.28.11.7"
            ruff = "^0.1.13"
            setuptools = [
                { version = "^67.8.0", python = "<3.10"},
                { version = "^70.1.0", python = ">=3.10"}
            ]
            nox = "^2024.4.15"
            icecream = "^2.1.3"
            # pyinstaller = "^6.8.0"
            check-python-versions = "^0.22.0"
            # pytomlpp = "^1.0.13"  # needs gcc and g++ when installing
            rtoml = "^0.11.0"  # needs rust compiler installed, alternative to pytomlpp
            types-PyYAML = "^6.0.12.20240311"
            types-redis = "^4.6.0.20240425"
            types-ujson = "^5.10.0.20240515"

    [tool.poetry.scripts]
        python-active-versions = 'python_active_versions.cli_tools.cli:get_python_versions'

[tool.black]
    line-length = 120
    skip-string-normalization = true
    target-version = ['py39', 'py310']
    include = '\.pyi?$'
    exclude = '''
    /(
        \.eggs
      | \.git
      | \.hg
      | \.mypy_cache
      | \.tox
      | \.venv
      | _build
      | buck-out
      | build
      | dist
    )/
    '''

[tool.isort]
    multi_line_output = 3
    include_trailing_comma = true
    force_grid_wrap = 0
    use_parentheses = true
    ensure_newline_before_comments = true
    line_length = 120
    skip_gitignore = true
    # you can skip files as below
    #skip_glob = ["docs/conf.py", "path/*"]

[tool.commitizen]
    name = "cz_conventional_commits"
    version = "1.19.0"
    version_files = [
        "python_active_versions/__init__.py:__version__",
        "pyproject.toml:version"
    ]
    gpg_sign = true
    bump_message = 'Bump version: $current_version -> $new_version'
    update_changelog_on_bump = false
    style = [
        ["qmark", "fg:#ff9d00 bold"],
        ["question", "bold"],
        ["answer", "fg:#ff9d00 bold"],
        ["pointer", "fg:#ff9d00 bold"],
        ["highlighted", "fg:#ff9d00 bold"],
        ["selected", "fg:#cc5454"],
        ["separator", "fg:#cc5454"],
        ["instruction", ""],
        ["text", ""],
        ["disabled", "fg:#858585 italic"]
    ]


[tool.bandit]
    tests = [
        # list from https://github.com/outscale/osc-sdk-python/blob/master/bandit.conf
        "B101",  # assert_used
        "B103",  # set_bad_file_permissions
        "B105",  # hardcoded_password_string
        "B106",  # hardcoded_password_funcarg
        "B107",  # hardcoded_password_default
        "B108",  # hardcoded_tmp_directory
        "B110",  # try_except_pass
        "B112",  # try_except_continue
        "B108",  # hardcoded_tmp_directory
        "B301",  # pickle library
        "B303",  # MD5 insecure hash function
        "B304",  # insecure ciphers
        "B305",  # insecure cipher modes
        "B306",  # deprecated mktemp
        "B307",  # eval - Use of possibly insecure function - consider using safer ast.literal_eval
        "B313",  # xml_bad_cElementTree
        "B314",  # xml_bad_ElementTree
        "B315",  # xml_bad_expatreader
        "B316",  # xml_bad_expatbuilder
        "B317",  # xml_bad_sax
        "B318",  # xml_bad_minidom
        "B319",  # xml_bad_pulldom
        "B320",  # xml_bad_etree
        "B323",  # unverified_context
        "B324",  # hashlib_new_insecure_functions
        "B325",  # tempnam
        "B501",  # request_with_no_cert_validation
        "B502",  # ssl_with_bad_version
        "B503",  # ssl_with_bad_defaults
        "B504",  # ssl_with_no_version
        "B505",  # weak_cryptographic_key
        "B506",  # yaml_load
        "B507",  # ssh_no_host_key_verification
        "B601",  # paramiko_calls
        "B602",  # subprocess_popen_with_shell_equals_true
        "B604",  # any_other_function_with_shell_equals_true
        "B605",  # start_process_with_a_shell
        "B606",  # start_process_with_no_shell
        "B607",  # start_process_with_partial_path
        "B608",  # hardcoded_sql_expressions
        "B609"   # linux_commands_wildcard_injection
    ]


[tool.pylint]
    #ignore-paths = [
    #    "folder/*"
    #]
    max-line-length=120

[tool.ruff]
    line-length = 120
    [tool.ruff.lint]
        select = [
            "B",  # flake8-bugbear
            "C4",  # flake8-comprehensions
            "D",  # pydocstyle
            "D205",
            "E",  # pycodestyle error
            "F",  # Pyflakes
            "I",  # Isort
            "ISC",  # flake8-implicit-str-concat
            "PLC",  # Pylint Convention
            "PLE",  # Pylint Error
            "PLR",  # Pylint Refactor
            "PLW",  # Pylint Warning
            "RUF100",  # Ruff unused-noqa
            "S",  # flake8-bandit
            "T20", # flake8-print
            "W",  # pycodestyle warning
        ]
        ignore = [
            "PLR0913", # Too many arguments in function definition
            "I001",    # import block, fixed by isort
        ]

    [tool.ruff.pydocstyle]
        # Use Google-style docstrings.
        convention = "google"

    [tool.ruff.per-file-ignores]
        "tests/*" = [
            "S101",
            "PLR2004",  # Pylint magic-value-comparison
        ]


[tool.pytest.ini_options]
    addopts = "--cov --cov-report=term-missing --cov=gitlab_k8s_update --cov-append"
    python_files = [
        "test_*.py",
        "tests.py",
    ]
    testpaths = [
        "tests",
    ]


[build-system]
    requires = ["poetry-core>=1.0.0"]
    build-backend = "poetry.core.masonry.api"
