# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.4348
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from ourskyai_platform_api.models.camera_mode import CameraMode
from ourskyai_platform_api.models.plate_solve_parameters import PlateSolveParameters
from ourskyai_platform_api.models.tracking_type import TrackingType
from ourskyai_platform_api.models.upload_priority import UploadPriority

class V1ObservationInstruction(BaseModel):
    """
    Observation Instruction  # noqa: E501
    """
    id: StrictStr = Field(...)
    image_set_id: StrictStr = Field(..., alias="imageSetId")
    target_id: StrictStr = Field(..., alias="targetId")
    tracking_type: TrackingType = Field(..., alias="trackingType")
    exposure_duration: Union[StrictFloat, StrictInt] = Field(..., alias="exposureDuration")
    binning: StrictInt = Field(...)
    gain: StrictInt = Field(...)
    gain_mode: StrictInt = Field(..., alias="gainMode")
    gain_offset: StrictInt = Field(..., alias="gainOffset")
    ra: Union[StrictFloat, StrictInt] = Field(..., description="Represents the Right Ascension of the target at captureStart when `trackingType` is equal to `SIDEREAL`.  When `trackingType` is equal to `TARGET_RATE`, however this is an offset from the RA and is  better represented by the `tleOffsetRa` value.")
    dec: Union[StrictFloat, StrictInt] = Field(..., description="Represents the Declination of the target at captureStart when `trackingType` is equal to `SIDEREAL`.  When `trackingType` is equal to `TARGET_RATE`, however this is an offset from the Dec and is  better represented by the `tleOffsetDec` value.")
    capture_start: datetime = Field(..., alias="captureStart")
    capture_end: datetime = Field(..., alias="captureEnd")
    pre_capture_wait: StrictInt = Field(..., alias="preCaptureWait")
    start_slew_at: datetime = Field(..., alias="startSlewAt")
    camera_mode: CameraMode = Field(..., alias="cameraMode")
    tle_line1: StrictStr = Field(..., alias="tleLine1")
    tle_line2: StrictStr = Field(..., alias="tleLine2")
    tle_offset_dec: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tleOffsetDec")
    tle_offset_ra: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tleOffsetRa")
    plate_solve_parameters: Optional[PlateSolveParameters] = Field(None, alias="plateSolveParameters")
    upload_priority: Optional[UploadPriority] = Field(None, alias="uploadPriority")
    __properties = ["id", "imageSetId", "targetId", "trackingType", "exposureDuration", "binning", "gain", "gainMode", "gainOffset", "ra", "dec", "captureStart", "captureEnd", "preCaptureWait", "startSlewAt", "cameraMode", "tleLine1", "tleLine2", "tleOffsetDec", "tleOffsetRa", "plateSolveParameters", "uploadPriority"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ObservationInstruction:
        """Create an instance of V1ObservationInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of plate_solve_parameters
        if self.plate_solve_parameters:
            _dict['plateSolveParameters'] = self.plate_solve_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ObservationInstruction:
        """Create an instance of V1ObservationInstruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ObservationInstruction.parse_obj(obj)

        _obj = V1ObservationInstruction.parse_obj({
            "id": obj.get("id"),
            "image_set_id": obj.get("imageSetId"),
            "target_id": obj.get("targetId"),
            "tracking_type": obj.get("trackingType"),
            "exposure_duration": obj.get("exposureDuration"),
            "binning": obj.get("binning"),
            "gain": obj.get("gain"),
            "gain_mode": obj.get("gainMode"),
            "gain_offset": obj.get("gainOffset"),
            "ra": obj.get("ra"),
            "dec": obj.get("dec"),
            "capture_start": obj.get("captureStart"),
            "capture_end": obj.get("captureEnd"),
            "pre_capture_wait": obj.get("preCaptureWait"),
            "start_slew_at": obj.get("startSlewAt"),
            "camera_mode": obj.get("cameraMode"),
            "tle_line1": obj.get("tleLine1"),
            "tle_line2": obj.get("tleLine2"),
            "tle_offset_dec": obj.get("tleOffsetDec"),
            "tle_offset_ra": obj.get("tleOffsetRa"),
            "plate_solve_parameters": PlateSolveParameters.from_dict(obj.get("plateSolveParameters")) if obj.get("plateSolveParameters") is not None else None,
            "upload_priority": obj.get("uploadPriority")
        })
        return _obj


