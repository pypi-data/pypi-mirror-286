Metadata-Version: 2.1
Name: llmonpy
Version: 0.1.0
Summary: AI pipeline framework for Python.
Author-email: Tom Burns <public@llmonpy.ai>
License: MIT License
        
        Copyright (c) 2024 sftombu
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/llmonpy/llmonpy
Project-URL: Issues, https://github.com/llmonpy/llmonpy/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: google-generativeai
Requires-Dist: openai
Requires-Dist: mistralai
Requires-Dist: anthropic
Requires-Dist: nothingpy
Requires-Dist: jinja2
Requires-Dist: sqlalchemy
Requires-Dist: flask
Requires-Dist: flask-cors
Requires-Dist: together

# LLMonPy

LLMonPy is a python library that aims to make it easy to build AI systems that generate "good enough" responses 99.9% of the time. 
It is still in the early stages of development, but you can check out src/samples
to see how it can be used.  

### how it improves responses
tools to improve quality of output
	Aggregate output from other models
	Rank output of multiple models, then use the best as examples of good answers
	Use check lists from eval
		pass/fail -- ask model to improve response for tests is fails
		comparison -- ask it to make a new response that would win a comparison
	RAG
		Have it ask for resources it needs


### install and initial test

### examples
1) simple prompt -- eval writer
2) tourney that does same thing, but multiple LLMs
3) refinement cycle
