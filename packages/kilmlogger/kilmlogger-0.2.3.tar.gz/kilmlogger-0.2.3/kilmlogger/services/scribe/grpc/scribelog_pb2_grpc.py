# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import kilmlogger.services.scribe.grpc.scribelog_pb2 as scribelog__pb2


class ScribeLogServiceStub(object):
    """The greeting service definition."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendLog = channel.unary_unary(
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendLog",
            request_serializer=scribelog__pb2.LogEntryRequest.SerializeToString,
            response_deserializer=scribelog__pb2.LogEntryResult.FromString,
        )
        self.sendMultiLog = channel.unary_unary(
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendMultiLog",
            request_serializer=scribelog__pb2.ListOfEntryRequest.SerializeToString,
            response_deserializer=scribelog__pb2.LogEntryResult.FromString,
        )
        self.sendActionLog = channel.unary_unary(
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendActionLog",
            request_serializer=scribelog__pb2.ActionLogRequest.SerializeToString,
            response_deserializer=scribelog__pb2.LogEntryResult.FromString,
        )
        self.sendMultiActionLog = channel.unary_unary(
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendMultiActionLog",
            request_serializer=scribelog__pb2.ListOfActionLogRequest.SerializeToString,
            response_deserializer=scribelog__pb2.LogEntryResult.FromString,
        )
        self.sendMultiLogV2 = channel.unary_unary(
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendMultiLogV2",
            request_serializer=scribelog__pb2.ListOfEntryRequest.SerializeToString,
            response_deserializer=scribelog__pb2.LogEntryResult.FromString,
        )
        self.pingPong = channel.unary_unary(
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/pingPong",
            request_serializer=scribelog__pb2.Ping.SerializeToString,
            response_deserializer=scribelog__pb2.Pong.FromString,
        )


class ScribeLogServiceServicer(object):
    """The greeting service definition."""

    def sendLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def sendMultiLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def sendActionLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def sendMultiActionLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def sendMultiLogV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def pingPong(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ScribeLogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "sendLog": grpc.unary_unary_rpc_method_handler(
            servicer.sendLog,
            request_deserializer=scribelog__pb2.LogEntryRequest.FromString,
            response_serializer=scribelog__pb2.LogEntryResult.SerializeToString,
        ),
        "sendMultiLog": grpc.unary_unary_rpc_method_handler(
            servicer.sendMultiLog,
            request_deserializer=scribelog__pb2.ListOfEntryRequest.FromString,
            response_serializer=scribelog__pb2.LogEntryResult.SerializeToString,
        ),
        "sendActionLog": grpc.unary_unary_rpc_method_handler(
            servicer.sendActionLog,
            request_deserializer=scribelog__pb2.ActionLogRequest.FromString,
            response_serializer=scribelog__pb2.LogEntryResult.SerializeToString,
        ),
        "sendMultiActionLog": grpc.unary_unary_rpc_method_handler(
            servicer.sendMultiActionLog,
            request_deserializer=scribelog__pb2.ListOfActionLogRequest.FromString,
            response_serializer=scribelog__pb2.LogEntryResult.SerializeToString,
        ),
        "sendMultiLogV2": grpc.unary_unary_rpc_method_handler(
            servicer.sendMultiLogV2,
            request_deserializer=scribelog__pb2.ListOfEntryRequest.FromString,
            response_serializer=scribelog__pb2.LogEntryResult.SerializeToString,
        ),
        "pingPong": grpc.unary_unary_rpc_method_handler(
            servicer.pingPong,
            request_deserializer=scribelog__pb2.Ping.FromString,
            response_serializer=scribelog__pb2.Pong.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "com.vng.zlb.scribelog.grpc.lib.ScribeLogService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ScribeLogService(object):
    """The greeting service definition."""

    @staticmethod
    def sendLog(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendLog",
            scribelog__pb2.LogEntryRequest.SerializeToString,
            scribelog__pb2.LogEntryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def sendMultiLog(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendMultiLog",
            scribelog__pb2.ListOfEntryRequest.SerializeToString,
            scribelog__pb2.LogEntryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def sendActionLog(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendActionLog",
            scribelog__pb2.ActionLogRequest.SerializeToString,
            scribelog__pb2.LogEntryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def sendMultiActionLog(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendMultiActionLog",
            scribelog__pb2.ListOfActionLogRequest.SerializeToString,
            scribelog__pb2.LogEntryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def sendMultiLogV2(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/sendMultiLogV2",
            scribelog__pb2.ListOfEntryRequest.SerializeToString,
            scribelog__pb2.LogEntryResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def pingPong(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/com.vng.zlb.scribelog.grpc.lib.ScribeLogService/pingPong",
            scribelog__pb2.Ping.SerializeToString,
            scribelog__pb2.Pong.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
