# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GitopsProjectArgs', 'GitopsProject']

@pulumi.input_type
class GitopsProjectArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 agent_id: pulumi.Input[str],
                 projects: pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]],
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 query_name: Optional[pulumi.Input[str]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a GitopsProject resource.
        :param pulumi.Input[str] account_id: Account identifier of the GitOps project.
        :param pulumi.Input[str] agent_id: Agent identifier of the GitOps project.
        :param pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]] projects: App projects configuration details.
        :param pulumi.Input[str] org_id: Org identifier of the GitOps project.
        :param pulumi.Input[str] project_id: Project identifier of the GitOps repository.
        :param pulumi.Input[str] query_name: Identifier for the GitOps project.
        :param pulumi.Input[bool] upsert: Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "projects", projects)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if query_name is not None:
            pulumi.set(__self__, "query_name", query_name)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        Account identifier of the GitOps project.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Input[str]:
        """
        Agent identifier of the GitOps project.
        """
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_id", value)

    @property
    @pulumi.getter
    def projects(self) -> pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]]:
        """
        App projects configuration details.
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Org identifier of the GitOps project.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project identifier of the GitOps repository.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="queryName")
    def query_name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for the GitOps project.
        """
        return pulumi.get(self, "query_name")

    @query_name.setter
    def query_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_name", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class _GitopsProjectState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]]] = None,
                 query_name: Optional[pulumi.Input[str]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering GitopsProject resources.
        :param pulumi.Input[str] account_id: Account identifier of the GitOps project.
        :param pulumi.Input[str] agent_id: Agent identifier of the GitOps project.
        :param pulumi.Input[str] org_id: Org identifier of the GitOps project.
        :param pulumi.Input[str] project_id: Project identifier of the GitOps repository.
        :param pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]] projects: App projects configuration details.
        :param pulumi.Input[str] query_name: Identifier for the GitOps project.
        :param pulumi.Input[bool] upsert: Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if query_name is not None:
            pulumi.set(__self__, "query_name", query_name)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account identifier of the GitOps project.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[pulumi.Input[str]]:
        """
        Agent identifier of the GitOps project.
        """
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_id", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        Org identifier of the GitOps project.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project identifier of the GitOps repository.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]]]:
        """
        App projects configuration details.
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GitopsProjectProjectArgs']]]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter(name="queryName")
    def query_name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for the GitOps project.
        """
        return pulumi.get(self, "query_name")

    @query_name.setter
    def query_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_name", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


class GitopsProject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GitopsProjectProjectArgs']]]]] = None,
                 query_name: Optional[pulumi.Input[str]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        Import an Account level Gitops Repository

        ```sh
        $ pulumi import harness:platform/gitopsProject:GitopsProject example <agent_id>/<query_name>
        ```

        Import an Org level Gitops Repository

        ```sh
        $ pulumi import harness:platform/gitopsProject:GitopsProject example <organization_id>/<agent_id>/<query_name
        ```

        Import a Project level Gitops Repository

        ```sh
        $ pulumi import harness:platform/gitopsProject:GitopsProject example <organization_id>/<project_id>/<agent_id>/<query_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account identifier of the GitOps project.
        :param pulumi.Input[str] agent_id: Agent identifier of the GitOps project.
        :param pulumi.Input[str] org_id: Org identifier of the GitOps project.
        :param pulumi.Input[str] project_id: Project identifier of the GitOps repository.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GitopsProjectProjectArgs']]]] projects: App projects configuration details.
        :param pulumi.Input[str] query_name: Identifier for the GitOps project.
        :param pulumi.Input[bool] upsert: Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GitopsProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        Import an Account level Gitops Repository

        ```sh
        $ pulumi import harness:platform/gitopsProject:GitopsProject example <agent_id>/<query_name>
        ```

        Import an Org level Gitops Repository

        ```sh
        $ pulumi import harness:platform/gitopsProject:GitopsProject example <organization_id>/<agent_id>/<query_name
        ```

        Import a Project level Gitops Repository

        ```sh
        $ pulumi import harness:platform/gitopsProject:GitopsProject example <organization_id>/<project_id>/<agent_id>/<query_name>
        ```

        :param str resource_name: The name of the resource.
        :param GitopsProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GitopsProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 agent_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GitopsProjectProjectArgs']]]]] = None,
                 query_name: Optional[pulumi.Input[str]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GitopsProjectArgs.__new__(GitopsProjectArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if agent_id is None and not opts.urn:
                raise TypeError("Missing required property 'agent_id'")
            __props__.__dict__["agent_id"] = agent_id
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["project_id"] = project_id
            if projects is None and not opts.urn:
                raise TypeError("Missing required property 'projects'")
            __props__.__dict__["projects"] = projects
            __props__.__dict__["query_name"] = query_name
            __props__.__dict__["upsert"] = upsert
        super(GitopsProject, __self__).__init__(
            'harness:platform/gitopsProject:GitopsProject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            agent_id: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            projects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GitopsProjectProjectArgs']]]]] = None,
            query_name: Optional[pulumi.Input[str]] = None,
            upsert: Optional[pulumi.Input[bool]] = None) -> 'GitopsProject':
        """
        Get an existing GitopsProject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account identifier of the GitOps project.
        :param pulumi.Input[str] agent_id: Agent identifier of the GitOps project.
        :param pulumi.Input[str] org_id: Org identifier of the GitOps project.
        :param pulumi.Input[str] project_id: Project identifier of the GitOps repository.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GitopsProjectProjectArgs']]]] projects: App projects configuration details.
        :param pulumi.Input[str] query_name: Identifier for the GitOps project.
        :param pulumi.Input[bool] upsert: Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GitopsProjectState.__new__(_GitopsProjectState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["agent_id"] = agent_id
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["projects"] = projects
        __props__.__dict__["query_name"] = query_name
        __props__.__dict__["upsert"] = upsert
        return GitopsProject(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        Account identifier of the GitOps project.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Output[str]:
        """
        Agent identifier of the GitOps project.
        """
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[Optional[str]]:
        """
        Org identifier of the GitOps project.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[str]]:
        """
        Project identifier of the GitOps repository.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def projects(self) -> pulumi.Output[Sequence['outputs.GitopsProjectProject']]:
        """
        App projects configuration details.
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="queryName")
    def query_name(self) -> pulumi.Output[Optional[str]]:
        """
        Identifier for the GitOps project.
        """
        return pulumi.get(self, "query_name")

    @property
    @pulumi.getter
    def upsert(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        return pulumi.get(self, "upsert")

