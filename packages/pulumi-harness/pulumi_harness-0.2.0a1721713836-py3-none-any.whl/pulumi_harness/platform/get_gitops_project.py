# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGitopsProjectResult',
    'AwaitableGetGitopsProjectResult',
    'get_gitops_project',
    'get_gitops_project_output',
]

@pulumi.output_type
class GetGitopsProjectResult:
    """
    A collection of values returned by getGitopsProject.
    """
    def __init__(__self__, account_id=None, agent_id=None, id=None, org_id=None, project_id=None, projects=None, query_name=None, upsert=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if agent_id and not isinstance(agent_id, str):
            raise TypeError("Expected argument 'agent_id' to be a str")
        pulumi.set(__self__, "agent_id", agent_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if query_name and not isinstance(query_name, str):
            raise TypeError("Expected argument 'query_name' to be a str")
        pulumi.set(__self__, "query_name", query_name)
        if upsert and not isinstance(upsert, bool):
            raise TypeError("Expected argument 'upsert' to be a bool")
        pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        Account identifier of the GitOps project.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> str:
        """
        Agent identifier of the GitOps project.
        """
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        """
        Org identifier of the GitOps project.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project identifier of the GitOps repository.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetGitopsProjectProjectResult']:
        """
        App projects configuration details.
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="queryName")
    def query_name(self) -> Optional[str]:
        """
        Identifier for the GitOps project.
        """
        return pulumi.get(self, "query_name")

    @property
    @pulumi.getter
    def upsert(self) -> Optional[bool]:
        """
        Indicates if the GitOps repository should be updated if existing and inserted if not.
        """
        return pulumi.get(self, "upsert")


class AwaitableGetGitopsProjectResult(GetGitopsProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGitopsProjectResult(
            account_id=self.account_id,
            agent_id=self.agent_id,
            id=self.id,
            org_id=self.org_id,
            project_id=self.project_id,
            projects=self.projects,
            query_name=self.query_name,
            upsert=self.upsert)


def get_gitops_project(account_id: Optional[str] = None,
                       agent_id: Optional[str] = None,
                       org_id: Optional[str] = None,
                       project_id: Optional[str] = None,
                       projects: Optional[Sequence[pulumi.InputType['GetGitopsProjectProjectArgs']]] = None,
                       query_name: Optional[str] = None,
                       upsert: Optional[bool] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGitopsProjectResult:
    """
    ## Example Usage


    :param str account_id: Account identifier of the GitOps project.
    :param str agent_id: Agent identifier of the GitOps project.
    :param str org_id: Org identifier of the GitOps project.
    :param str project_id: Project identifier of the GitOps repository.
    :param Sequence[pulumi.InputType['GetGitopsProjectProjectArgs']] projects: App projects configuration details.
    :param str query_name: Identifier for the GitOps project.
    :param bool upsert: Indicates if the GitOps repository should be updated if existing and inserted if not.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['agentId'] = agent_id
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    __args__['projects'] = projects
    __args__['queryName'] = query_name
    __args__['upsert'] = upsert
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('harness:platform/getGitopsProject:getGitopsProject', __args__, opts=opts, typ=GetGitopsProjectResult).value

    return AwaitableGetGitopsProjectResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        agent_id=pulumi.get(__ret__, 'agent_id'),
        id=pulumi.get(__ret__, 'id'),
        org_id=pulumi.get(__ret__, 'org_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        projects=pulumi.get(__ret__, 'projects'),
        query_name=pulumi.get(__ret__, 'query_name'),
        upsert=pulumi.get(__ret__, 'upsert'))


@_utilities.lift_output_func(get_gitops_project)
def get_gitops_project_output(account_id: Optional[pulumi.Input[str]] = None,
                              agent_id: Optional[pulumi.Input[str]] = None,
                              org_id: Optional[pulumi.Input[Optional[str]]] = None,
                              project_id: Optional[pulumi.Input[Optional[str]]] = None,
                              projects: Optional[pulumi.Input[Sequence[pulumi.InputType['GetGitopsProjectProjectArgs']]]] = None,
                              query_name: Optional[pulumi.Input[Optional[str]]] = None,
                              upsert: Optional[pulumi.Input[Optional[bool]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGitopsProjectResult]:
    """
    ## Example Usage


    :param str account_id: Account identifier of the GitOps project.
    :param str agent_id: Agent identifier of the GitOps project.
    :param str org_id: Org identifier of the GitOps project.
    :param str project_id: Project identifier of the GitOps repository.
    :param Sequence[pulumi.InputType['GetGitopsProjectProjectArgs']] projects: App projects configuration details.
    :param str query_name: Identifier for the GitOps project.
    :param bool upsert: Indicates if the GitOps repository should be updated if existing and inserted if not.
    """
    ...
